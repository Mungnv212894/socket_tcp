
websocket.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ec  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  0800757c  0800757c  0000857c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079a4  080079a4  000090d4  2**0
                  CONTENTS
  4 .ARM          00000008  080079a4  080079a4  000089a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079ac  080079ac  000090d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079ac  080079ac  000089ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079b0  080079b0  000089b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  080079b4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000090d4  2**0
                  CONTENTS
 10 .bss          00000a70  200000d4  200000d4  000090d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b44  20000b44  000090d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000090d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf98  00000000  00000000  00009104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002507  00000000  00000000  0001609c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c40  00000000  00000000  000185a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000096c  00000000  00000000  000191e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002210c  00000000  00000000  00019b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e80c  00000000  00000000  0003bc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca985  00000000  00000000  0004a46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00114df1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d90  00000000  00000000  00114e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00118bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007564 	.word	0x08007564

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	08007564 	.word	0x08007564

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	HAL_Init();
 8000576:	f004 f9e7 	bl	8004948 <HAL_Init>
	    setbuf(stdout, NULL);
 800057a:	4b32      	ldr	r3, [pc, #200]	@ (8000644 <main+0xd4>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	689b      	ldr	r3, [r3, #8]
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f005 fe68 	bl	8006258 <setbuf>
	    SystemClock_Config();
 8000588:	f000 fa92 	bl	8000ab0 <SystemClock_Config>
	    MX_GPIO_Init();
 800058c:	f000 fb60 	bl	8000c50 <MX_GPIO_Init>
	    MX_SPI1_Init();
 8000590:	f000 faf6 	bl	8000b80 <MX_SPI1_Init>
	    MX_USART2_UART_Init();
 8000594:	f000 fb32 	bl	8000bfc <MX_USART2_UART_Init>

	    printf("--- W5500 DHCP TEST ----!\r\n");
 8000598:	482b      	ldr	r0, [pc, #172]	@ (8000648 <main+0xd8>)
 800059a:	f005 fe55 	bl	8006248 <puts>
	    W5500Init();
 800059e:	f003 fbab 	bl	8003cf8 <W5500Init>

	    wiz_PhyConf phyconf;
	    phyconf.by = PHY_CONFBY_SW;
 80005a2:	2301      	movs	r3, #1
 80005a4:	703b      	strb	r3, [r7, #0]
	    phyconf.duplex = PHY_DUPLEX_FULL;
 80005a6:	2301      	movs	r3, #1
 80005a8:	70fb      	strb	r3, [r7, #3]
	    phyconf.speed = PHY_SPEED_10;
 80005aa:	2300      	movs	r3, #0
 80005ac:	70bb      	strb	r3, [r7, #2]
	    phyconf.mode = PHY_MODE_AUTONEGO;
 80005ae:	2301      	movs	r3, #1
 80005b0:	707b      	strb	r3, [r7, #1]
	    ctlwizchip(CW_SET_PHYCONF, (void*)&phyconf);
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	200a      	movs	r0, #10
 80005b8:	f003 fcd6 	bl	8003f68 <ctlwizchip>

	    PHYStatusCheck();
 80005bc:	f000 f916 	bl	80007ec <PHYStatusCheck>
	    PrintPHYConf();
 80005c0:	f000 f93a 	bl	8000838 <PrintPHYConf>

	    DHCP_init(SOCKET_ID_FOR_DHCP, dhcp_buffer);
 80005c4:	4921      	ldr	r1, [pc, #132]	@ (800064c <main+0xdc>)
 80005c6:	2007      	movs	r0, #7
 80005c8:	f002 f832 	bl	8002630 <DHCP_init>
	    reg_dhcp_cbfunc(OnDHCPIPAssigned, NULL, NULL);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	481f      	ldr	r0, [pc, #124]	@ (8000650 <main+0xe0>)
 80005d2:	f000 fd8b 	bl	80010ec <reg_dhcp_cbfunc>

	    printf("Obtaining IP address ...\r\n");
 80005d6:	481f      	ldr	r0, [pc, #124]	@ (8000654 <main+0xe4>)
 80005d8:	f005 fe36 	bl	8006248 <puts>

	    while (!dhcpDone) {
 80005dc:	e001      	b.n	80005e2 <main+0x72>
	        DHCP_run();
 80005de:	f001 fe6f 	bl	80022c0 <DHCP_run>
	    while (!dhcpDone) {
 80005e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000658 <main+0xe8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d0f8      	beq.n	80005de <main+0x6e>
	    }

	    // Tạo socket
	    int sock = socket(1, Sn_MR_TCP, 0, 0);
 80005ec:	2300      	movs	r3, #0
 80005ee:	2200      	movs	r2, #0
 80005f0:	2101      	movs	r1, #1
 80005f2:	2001      	movs	r0, #1
 80005f4:	f002 fc46 	bl	8002e84 <socket>
 80005f8:	4603      	mov	r3, r0
 80005fa:	607b      	str	r3, [r7, #4]
	    if (sock != 1) {
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b01      	cmp	r3, #1
 8000600:	d004      	beq.n	800060c <main+0x9c>
	        printf("\r\nCannot create socket");
 8000602:	4816      	ldr	r0, [pc, #88]	@ (800065c <main+0xec>)
 8000604:	f005 fdb8 	bl	8006178 <iprintf>
	        while (1);
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <main+0x98>
	    }

	    // Kết nối đến server
	    if (connect(sock, destination_ip, destination_port) != SOCK_OK) {
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	4a13      	ldr	r2, [pc, #76]	@ (8000660 <main+0xf0>)
 8000612:	8812      	ldrh	r2, [r2, #0]
 8000614:	4913      	ldr	r1, [pc, #76]	@ (8000664 <main+0xf4>)
 8000616:	4618      	mov	r0, r3
 8000618:	f002 fdb6 	bl	8003188 <connect>
 800061c:	4603      	mov	r3, r0
 800061e:	2b01      	cmp	r3, #1
 8000620:	d004      	beq.n	800062c <main+0xbc>
	        printf("\r\nCannot connect to server!");
 8000622:	4811      	ldr	r0, [pc, #68]	@ (8000668 <main+0xf8>)
 8000624:	f005 fda8 	bl	8006178 <iprintf>
	        while (1);
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0xb8>
	    }

	    printf("\r\nConnected with server.");
 800062c:	480f      	ldr	r0, [pc, #60]	@ (800066c <main+0xfc>)
 800062e:	f005 fda3 	bl	8006178 <iprintf>

	    // Giữ kết nối và gửi chuỗi dữ liệu liên tục
	    while (1) {
	        sendData(sock);
 8000632:	6878      	ldr	r0, [r7, #4]
 8000634:	f000 f97e 	bl	8000934 <sendData>
	        HAL_Delay(1000); // Đợi 1 giây trước khi gửi lại
 8000638:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800063c:	f004 f9f6 	bl	8004a2c <HAL_Delay>
	    while (1) {
 8000640:	bf00      	nop
 8000642:	e7f6      	b.n	8000632 <main+0xc2>
 8000644:	20000084 	.word	0x20000084
 8000648:	0800757c 	.word	0x0800757c
 800064c:	200000f0 	.word	0x200000f0
 8000650:	08000671 	.word	0x08000671
 8000654:	08007598 	.word	0x08007598
 8000658:	20000990 	.word	0x20000990
 800065c:	080075b4 	.word	0x080075b4
 8000660:	2000001c 	.word	0x2000001c
 8000664:	20000018 	.word	0x20000018
 8000668:	080075cc 	.word	0x080075cc
 800066c:	080075e8 	.word	0x080075e8

08000670 <OnDHCPIPAssigned>:
	    }
}


void OnDHCPIPAssigned(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
    printf("IP Obtained: \r\n");
 8000674:	4810      	ldr	r0, [pc, #64]	@ (80006b8 <OnDHCPIPAssigned+0x48>)
 8000676:	f005 fde7 	bl	8006248 <puts>

    getIPfromDHCP(gWIZNETINFO.ip);
 800067a:	4810      	ldr	r0, [pc, #64]	@ (80006bc <OnDHCPIPAssigned+0x4c>)
 800067c:	f002 f882 	bl	8002784 <getIPfromDHCP>
    getGWfromDHCP(gWIZNETINFO.gw);
 8000680:	480f      	ldr	r0, [pc, #60]	@ (80006c0 <OnDHCPIPAssigned+0x50>)
 8000682:	f002 f89f 	bl	80027c4 <getGWfromDHCP>
    getSNfromDHCP(gWIZNETINFO.sn);
 8000686:	480f      	ldr	r0, [pc, #60]	@ (80006c4 <OnDHCPIPAssigned+0x54>)
 8000688:	f002 f8bc 	bl	8002804 <getSNfromDHCP>
    getDNSfromDHCP(gWIZNETINFO.dns);
 800068c:	480e      	ldr	r0, [pc, #56]	@ (80006c8 <OnDHCPIPAssigned+0x58>)
 800068e:	f002 f8d9 	bl	8002844 <getDNSfromDHCP>

    gWIZNETINFO.dhcp = NETINFO_DHCP;
 8000692:	4b0e      	ldr	r3, [pc, #56]	@ (80006cc <OnDHCPIPAssigned+0x5c>)
 8000694:	2202      	movs	r2, #2
 8000696:	759a      	strb	r2, [r3, #22]

    ctlnetwork(CN_SET_NETINFO, (void*)&gWIZNETINFO);
 8000698:	490c      	ldr	r1, [pc, #48]	@ (80006cc <OnDHCPIPAssigned+0x5c>)
 800069a:	2000      	movs	r0, #0
 800069c:	f003 fd44 	bl	8004128 <ctlnetwork>

    DisplayNetworkConfigurations();
 80006a0:	f000 f818 	bl	80006d4 <DisplayNetworkConfigurations>
    PHYStatusCheck();
 80006a4:	f000 f8a2 	bl	80007ec <PHYStatusCheck>
    PrintPHYConf();
 80006a8:	f000 f8c6 	bl	8000838 <PrintPHYConf>

    dhcpDone = 1;  // IP đã được cấp phát
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <OnDHCPIPAssigned+0x60>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	701a      	strb	r2, [r3, #0]
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	08007604 	.word	0x08007604
 80006bc:	20000006 	.word	0x20000006
 80006c0:	2000000e 	.word	0x2000000e
 80006c4:	2000000a 	.word	0x2000000a
 80006c8:	20000012 	.word	0x20000012
 80006cc:	20000000 	.word	0x20000000
 80006d0:	20000990 	.word	0x20000990

080006d4 <DisplayNetworkConfigurations>:

void DisplayNetworkConfigurations()
{
 80006d4:	b5b0      	push	{r4, r5, r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af04      	add	r7, sp, #16
	ctlnetwork(CN_GET_NETINFO, (void*) &gWIZNETINFO);
 80006da:	492a      	ldr	r1, [pc, #168]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 80006dc:	2001      	movs	r0, #1
 80006de:	f003 fd23 	bl	8004128 <ctlnetwork>

	printf(" MAC : %02X:%02X:%02X:%02X:%02X:%02X\r\n", gWIZNETINFO.mac[0], gWIZNETINFO.mac[1], gWIZNETINFO.mac[2], gWIZNETINFO.mac[3], gWIZNETINFO.mac[4], gWIZNETINFO.mac[5]);
 80006e2:	4b28      	ldr	r3, [pc, #160]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	4b26      	ldr	r3, [pc, #152]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 80006ea:	785b      	ldrb	r3, [r3, #1]
 80006ec:	461c      	mov	r4, r3
 80006ee:	4b25      	ldr	r3, [pc, #148]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 80006f0:	789b      	ldrb	r3, [r3, #2]
 80006f2:	461d      	mov	r5, r3
 80006f4:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 80006f6:	78db      	ldrb	r3, [r3, #3]
 80006f8:	461a      	mov	r2, r3
 80006fa:	4b22      	ldr	r3, [pc, #136]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	4619      	mov	r1, r3
 8000700:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 8000702:	795b      	ldrb	r3, [r3, #5]
 8000704:	9302      	str	r3, [sp, #8]
 8000706:	9101      	str	r1, [sp, #4]
 8000708:	9200      	str	r2, [sp, #0]
 800070a:	462b      	mov	r3, r5
 800070c:	4622      	mov	r2, r4
 800070e:	4601      	mov	r1, r0
 8000710:	481d      	ldr	r0, [pc, #116]	@ (8000788 <DisplayNetworkConfigurations+0xb4>)
 8000712:	f005 fd31 	bl	8006178 <iprintf>
	printf(" IP : %d.%d.%d.%d\r\n", gWIZNETINFO.ip[0], gWIZNETINFO.ip[1], gWIZNETINFO.ip[2], gWIZNETINFO.ip[3]);
 8000716:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 8000718:	799b      	ldrb	r3, [r3, #6]
 800071a:	4619      	mov	r1, r3
 800071c:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 800071e:	79db      	ldrb	r3, [r3, #7]
 8000720:	461a      	mov	r2, r3
 8000722:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 8000724:	7a1b      	ldrb	r3, [r3, #8]
 8000726:	4618      	mov	r0, r3
 8000728:	4b16      	ldr	r3, [pc, #88]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 800072a:	7a5b      	ldrb	r3, [r3, #9]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4603      	mov	r3, r0
 8000730:	4816      	ldr	r0, [pc, #88]	@ (800078c <DisplayNetworkConfigurations+0xb8>)
 8000732:	f005 fd21 	bl	8006178 <iprintf>
	printf(" GW : %d.%d.%d.%d\r\n", gWIZNETINFO.gw[0], gWIZNETINFO.gw[1], gWIZNETINFO.gw[2], gWIZNETINFO.gw[3]);
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 8000738:	7b9b      	ldrb	r3, [r3, #14]
 800073a:	4619      	mov	r1, r3
 800073c:	4b11      	ldr	r3, [pc, #68]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 800073e:	7bdb      	ldrb	r3, [r3, #15]
 8000740:	461a      	mov	r2, r3
 8000742:	4b10      	ldr	r3, [pc, #64]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 8000744:	7c1b      	ldrb	r3, [r3, #16]
 8000746:	4618      	mov	r0, r3
 8000748:	4b0e      	ldr	r3, [pc, #56]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 800074a:	7c5b      	ldrb	r3, [r3, #17]
 800074c:	9300      	str	r3, [sp, #0]
 800074e:	4603      	mov	r3, r0
 8000750:	480f      	ldr	r0, [pc, #60]	@ (8000790 <DisplayNetworkConfigurations+0xbc>)
 8000752:	f005 fd11 	bl	8006178 <iprintf>
	printf(" SN : %d.%d.%d.%d\r\n", gWIZNETINFO.sn[0], gWIZNETINFO.sn[1], gWIZNETINFO.sn[2], gWIZNETINFO.sn[3]);
 8000756:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 8000758:	7a9b      	ldrb	r3, [r3, #10]
 800075a:	4619      	mov	r1, r3
 800075c:	4b09      	ldr	r3, [pc, #36]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 800075e:	7adb      	ldrb	r3, [r3, #11]
 8000760:	461a      	mov	r2, r3
 8000762:	4b08      	ldr	r3, [pc, #32]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 8000764:	7b1b      	ldrb	r3, [r3, #12]
 8000766:	4618      	mov	r0, r3
 8000768:	4b06      	ldr	r3, [pc, #24]	@ (8000784 <DisplayNetworkConfigurations+0xb0>)
 800076a:	7b5b      	ldrb	r3, [r3, #13]
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4603      	mov	r3, r0
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <DisplayNetworkConfigurations+0xc0>)
 8000772:	f005 fd01 	bl	8006178 <iprintf>
	printf("=======================================\r\n");
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <DisplayNetworkConfigurations+0xc4>)
 8000778:	f005 fd66 	bl	8006248 <puts>
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bdb0      	pop	{r4, r5, r7, pc}
 8000782:	bf00      	nop
 8000784:	20000000 	.word	0x20000000
 8000788:	08007614 	.word	0x08007614
 800078c:	0800763c 	.word	0x0800763c
 8000790:	08007650 	.word	0x08007650
 8000794:	08007664 	.word	0x08007664
 8000798:	08007678 	.word	0x08007678

0800079c <UWriteData>:



void UWriteData(const char data)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
	while(__HAL_UART_GET_FLAG(&huart2,UART_FLAG_TXE)==RESET);
 80007a6:	bf00      	nop
 80007a8:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <UWriteData+0x30>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007b2:	2b80      	cmp	r3, #128	@ 0x80
 80007b4:	d1f8      	bne.n	80007a8 <UWriteData+0xc>

	huart2.Instance->DR=data;
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <UWriteData+0x30>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	79fa      	ldrb	r2, [r7, #7]
 80007bc:	605a      	str	r2, [r3, #4]

}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000948 	.word	0x20000948

080007d0 <__io_putchar>:

int __io_putchar(int ch)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	UWriteData(ch);
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	b2db      	uxtb	r3, r3
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff ffdd 	bl	800079c <UWriteData>
	return ch;
 80007e2:	687b      	ldr	r3, [r7, #4]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3708      	adds	r7, #8
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}

080007ec <PHYStatusCheck>:

void PHYStatusCheck(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
	uint8_t tmp;

	do
	{
		printf("\r\nChecking Ethernet Cable Presence ...");
 80007f2:	480e      	ldr	r0, [pc, #56]	@ (800082c <PHYStatusCheck+0x40>)
 80007f4:	f005 fcc0 	bl	8006178 <iprintf>
		ctlwizchip(CW_GET_PHYLINK, (void*) &tmp);
 80007f8:	1dfb      	adds	r3, r7, #7
 80007fa:	4619      	mov	r1, r3
 80007fc:	200f      	movs	r0, #15
 80007fe:	f003 fbb3 	bl	8003f68 <ctlwizchip>

		if(tmp == PHY_LINK_OFF)
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	d106      	bne.n	8000816 <PHYStatusCheck+0x2a>
		{
			printf("NO Cable Connected!");
 8000808:	4809      	ldr	r0, [pc, #36]	@ (8000830 <PHYStatusCheck+0x44>)
 800080a:	f005 fcb5 	bl	8006178 <iprintf>
			HAL_Delay(1500);
 800080e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000812:	f004 f90b 	bl	8004a2c <HAL_Delay>
		}
	}while(tmp == PHY_LINK_OFF);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0ea      	beq.n	80007f2 <PHYStatusCheck+0x6>

	printf("Good! Cable got connected!");
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <PHYStatusCheck+0x48>)
 800081e:	f005 fcab 	bl	8006178 <iprintf>

}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	080076a4 	.word	0x080076a4
 8000830:	080076cc 	.word	0x080076cc
 8000834:	080076e0 	.word	0x080076e0

08000838 <PrintPHYConf>:

void PrintPHYConf(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
	wiz_PhyConf phyconf;

	ctlwizchip(CW_GET_PHYCONF, (void*) &phyconf);
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	4619      	mov	r1, r3
 8000842:	200b      	movs	r0, #11
 8000844:	f003 fb90 	bl	8003f68 <ctlwizchip>

	if(phyconf.by==PHY_CONFBY_HW)
 8000848:	793b      	ldrb	r3, [r7, #4]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d103      	bne.n	8000856 <PrintPHYConf+0x1e>
	{
		printf("\n\rPHY Configured by Hardware Pins");
 800084e:	4810      	ldr	r0, [pc, #64]	@ (8000890 <PrintPHYConf+0x58>)
 8000850:	f005 fc92 	bl	8006178 <iprintf>
 8000854:	e002      	b.n	800085c <PrintPHYConf+0x24>
	}
	else
	{
		printf("\n\rPHY Configured by Registers");
 8000856:	480f      	ldr	r0, [pc, #60]	@ (8000894 <PrintPHYConf+0x5c>)
 8000858:	f005 fc8e 	bl	8006178 <iprintf>
	}

	if(phyconf.mode==PHY_MODE_AUTONEGO)
 800085c:	797b      	ldrb	r3, [r7, #5]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d103      	bne.n	800086a <PrintPHYConf+0x32>
	{
		printf("\n\rAutonegotiation Enabled");
 8000862:	480d      	ldr	r0, [pc, #52]	@ (8000898 <PrintPHYConf+0x60>)
 8000864:	f005 fc88 	bl	8006178 <iprintf>
 8000868:	e002      	b.n	8000870 <PrintPHYConf+0x38>
	}
	else
	{
		printf("\n\rAutonegotiation NOT Enabled");
 800086a:	480c      	ldr	r0, [pc, #48]	@ (800089c <PrintPHYConf+0x64>)
 800086c:	f005 fc84 	bl	8006178 <iprintf>
	}

	if(phyconf.duplex==PHY_DUPLEX_FULL)
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d102      	bne.n	800087c <PrintPHYConf+0x44>
	{
		printf("\n\rDuplex Mode: Full");
 8000876:	480a      	ldr	r0, [pc, #40]	@ (80008a0 <PrintPHYConf+0x68>)
 8000878:	f005 fc7e 	bl	8006178 <iprintf>
	else
	{
		//printf("\n\rDuplex Mode: Half");
	}

	if(phyconf.speed==PHY_SPEED_10)
 800087c:	79bb      	ldrb	r3, [r7, #6]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <PrintPHYConf+0x50>
	{
		//printf("\n\rSpeed: 10Mbps");
	}
	else
	{
		printf("\n\rSpeed: 100Mbps");
 8000882:	4808      	ldr	r0, [pc, #32]	@ (80008a4 <PrintPHYConf+0x6c>)
 8000884:	f005 fc78 	bl	8006178 <iprintf>
	}
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	080076fc 	.word	0x080076fc
 8000894:	08007720 	.word	0x08007720
 8000898:	08007740 	.word	0x08007740
 800089c:	0800775c 	.word	0x0800775c
 80008a0:	0800777c 	.word	0x0800777c
 80008a4:	08007790 	.word	0x08007790

080008a8 <generateRandomString>:

void generateRandomString(char *str, size_t length) {
 80008a8:	b5b0      	push	{r4, r5, r7, lr}
 80008aa:	b094      	sub	sp, #80	@ 0x50
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	6039      	str	r1, [r7, #0]
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
 80008b2:	4b1e      	ldr	r3, [pc, #120]	@ (800092c <generateRandomString+0x84>)
 80008b4:	f107 0408 	add.w	r4, r7, #8
 80008b8:	461d      	mov	r5, r3
 80008ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80008ca:	c407      	stmia	r4!, {r0, r1, r2}
 80008cc:	8023      	strh	r3, [r4, #0]
 80008ce:	3402      	adds	r4, #2
 80008d0:	0c1b      	lsrs	r3, r3, #16
 80008d2:	7023      	strb	r3, [r4, #0]
    for (size_t i = 0; i < length; i++) {
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80008d8:	e01b      	b.n	8000912 <generateRandomString+0x6a>
        int key = rand() % (int)(sizeof(charset) - 1);
 80008da:	f005 fb4d 	bl	8005f78 <rand>
 80008de:	4602      	mov	r2, r0
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <generateRandomString+0x88>)
 80008e2:	fb83 1302 	smull	r1, r3, r3, r2
 80008e6:	4413      	add	r3, r2
 80008e8:	1159      	asrs	r1, r3, #5
 80008ea:	17d3      	asrs	r3, r2, #31
 80008ec:	1ac9      	subs	r1, r1, r3
 80008ee:	460b      	mov	r3, r1
 80008f0:	015b      	lsls	r3, r3, #5
 80008f2:	1a5b      	subs	r3, r3, r1
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	64bb      	str	r3, [r7, #72]	@ 0x48
        str[i] = charset[key];
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80008fe:	4413      	add	r3, r2
 8000900:	f107 0108 	add.w	r1, r7, #8
 8000904:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8000906:	440a      	add	r2, r1
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < length; i++) {
 800090c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800090e:	3301      	adds	r3, #1
 8000910:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000912:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	429a      	cmp	r2, r3
 8000918:	d3df      	bcc.n	80008da <generateRandomString+0x32>
    }
    str[length] = '\0'; // Kết thúc chuỗi
 800091a:	687a      	ldr	r2, [r7, #4]
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	4413      	add	r3, r2
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
}
 8000924:	bf00      	nop
 8000926:	3750      	adds	r7, #80	@ 0x50
 8000928:	46bd      	mov	sp, r7
 800092a:	bdb0      	pop	{r4, r5, r7, pc}
 800092c:	080077a4 	.word	0x080077a4
 8000930:	84210843 	.word	0x84210843

08000934 <sendData>:

void sendData(int sock) {
 8000934:	b580      	push	{r7, lr}
 8000936:	f5ad 5d1d 	sub.w	sp, sp, #10048	@ 0x2740
 800093a:	af02      	add	r7, sp, #8
 800093c:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 8000940:	f2a3 7334 	subw	r3, r3, #1844	@ 0x734
 8000944:	6018      	str	r0, [r3, #0]
    char randomString[RANDOM_STRING_LENGTH + 1];
    char buffer[BUFFER_SIZE];

    // Tạo chuỗi ngẫu nhiên
    generateRandomString(randomString, RANDOM_STRING_LENGTH);
 8000946:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 800094a:	f103 0318 	add.w	r3, r3, #24
 800094e:	3b1c      	subs	r3, #28
 8000950:	f241 3188 	movw	r1, #5000	@ 0x1388
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff ffa7 	bl	80008a8 <generateRandomString>
    randomString[RANDOM_STRING_LENGTH] = '\0'; // Đảm bảo kết thúc chuỗi bằng ký tự NULL
 800095a:	f507 53b9 	add.w	r3, r7, #5920	@ 0x1720
 800095e:	f103 0318 	add.w	r3, r3, #24
 8000962:	f5a3 7367 	sub.w	r3, r3, #924	@ 0x39c
 8000966:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2388 	strb.w	r2, [r3, #904]	@ 0x388

    // Tạo chuỗi bao bọc với START_TAG và END_TAG
    snprintf(buffer, sizeof(buffer), "%s%s%s", START_TAG, randomString, END_TAG);
 8000970:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000974:	3830      	subs	r0, #48	@ 0x30
 8000976:	4b48      	ldr	r3, [pc, #288]	@ (8000a98 <sendData+0x164>)
 8000978:	9301      	str	r3, [sp, #4]
 800097a:	f507 539d 	add.w	r3, r7, #5024	@ 0x13a0
 800097e:	f103 0318 	add.w	r3, r3, #24
 8000982:	3b1c      	subs	r3, #28
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	4b45      	ldr	r3, [pc, #276]	@ (8000a9c <sendData+0x168>)
 8000988:	4a45      	ldr	r2, [pc, #276]	@ (8000aa0 <sendData+0x16c>)
 800098a:	f241 3192 	movw	r1, #5010	@ 0x1392
 800098e:	f005 fd1f 	bl	80063d0 <sniprintf>

    int totalSent = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000998:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 800099c:	6013      	str	r3, [r2, #0]
    int bufferSize = strlen(buffer);
 800099e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009a2:	3b30      	subs	r3, #48	@ 0x30
 80009a4:	4618      	mov	r0, r3
 80009a6:	f7ff fc13 	bl	80001d0 <strlen>
 80009aa:	4603      	mov	r3, r0
 80009ac:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80009b0:	f102 0230 	add.w	r2, r2, #48	@ 0x30
 80009b4:	6013      	str	r3, [r2, #0]

    while (totalSent < bufferSize) {
 80009b6:	e05b      	b.n	8000a70 <sendData+0x13c>
        // Tính toán kích thước dữ liệu còn lại để gửi
        int remaining = bufferSize - totalSent;
 80009b8:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80009bc:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80009c6:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80009d2:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80009d6:	6013      	str	r3, [r2, #0]

        // Gửi dữ liệu qua W5500
        int sent = send(sock, (uint8_t*)buffer + totalSent, remaining);
 80009d8:	f507 63e7 	add.w	r3, r7, #1848	@ 0x738
 80009dc:	f2a3 7334 	subw	r3, r3, #1844	@ 0x734
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	b2d8      	uxtb	r0, r3
 80009e4:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 80009e8:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 80009ec:	681a      	ldr	r2, [r3, #0]
 80009ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009f2:	3b30      	subs	r3, #48	@ 0x30
 80009f4:	4413      	add	r3, r2
 80009f6:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 80009fa:	f102 022c 	add.w	r2, r2, #44	@ 0x2c
 80009fe:	6812      	ldr	r2, [r2, #0]
 8000a00:	b292      	uxth	r2, r2
 8000a02:	4619      	mov	r1, r3
 8000a04:	f002 fc9c 	bl	8003340 <send>
 8000a08:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a0c:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000a10:	6018      	str	r0, [r3, #0]

        if (sent <= 0) {
 8000a12:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a16:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	dc03      	bgt.n	8000a28 <sendData+0xf4>
            printf("\r\nFailed to send data!");
 8000a20:	4820      	ldr	r0, [pc, #128]	@ (8000aa4 <sendData+0x170>)
 8000a22:	f005 fba9 	bl	8006178 <iprintf>
 8000a26:	e032      	b.n	8000a8e <sendData+0x15a>
            return;
        }

        totalSent += sent;
 8000a28:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a2c:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000a30:	681a      	ldr	r2, [r3, #0]
 8000a32:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a36:	f103 0328 	add.w	r3, r3, #40	@ 0x28
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4413      	add	r3, r2
 8000a3e:	f507 521c 	add.w	r2, r7, #9984	@ 0x2700
 8000a42:	f102 0234 	add.w	r2, r2, #52	@ 0x34
 8000a46:	6013      	str	r3, [r2, #0]

        // In số byte đã gửi và số byte còn lại
        printf("\r\nSent %d bytes, %d bytes remaining", totalSent, bufferSize - totalSent);
 8000a48:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a4c:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a56:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	1ad3      	subs	r3, r2, r3
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a64:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000a68:	6819      	ldr	r1, [r3, #0]
 8000a6a:	480f      	ldr	r0, [pc, #60]	@ (8000aa8 <sendData+0x174>)
 8000a6c:	f005 fb84 	bl	8006178 <iprintf>
    while (totalSent < bufferSize) {
 8000a70:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a74:	f103 0334 	add.w	r3, r3, #52	@ 0x34
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	f507 531c 	add.w	r3, r7, #9984	@ 0x2700
 8000a7e:	f103 0330 	add.w	r3, r3, #48	@ 0x30
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	db97      	blt.n	80009b8 <sendData+0x84>
    }

    printf("\r\nSent Oke");
 8000a88:	4808      	ldr	r0, [pc, #32]	@ (8000aac <sendData+0x178>)
 8000a8a:	f005 fb75 	bl	8006178 <iprintf>
}
 8000a8e:	f507 571c 	add.w	r7, r7, #9984	@ 0x2700
 8000a92:	3738      	adds	r7, #56	@ 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	080077f4 	.word	0x080077f4
 8000a9c:	080077e4 	.word	0x080077e4
 8000aa0:	080077ec 	.word	0x080077ec
 8000aa4:	080077fc 	.word	0x080077fc
 8000aa8:	08007814 	.word	0x08007814
 8000aac:	08007838 	.word	0x08007838

08000ab0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b094      	sub	sp, #80	@ 0x50
 8000ab4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab6:	f107 0320 	add.w	r3, r7, #32
 8000aba:	2230      	movs	r2, #48	@ 0x30
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f005 fd92 	bl	80065e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac4:	f107 030c 	add.w	r3, r7, #12
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	60bb      	str	r3, [r7, #8]
 8000ad8:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <SystemClock_Config+0xc8>)
 8000ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000adc:	4a26      	ldr	r2, [pc, #152]	@ (8000b78 <SystemClock_Config+0xc8>)
 8000ade:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae4:	4b24      	ldr	r3, [pc, #144]	@ (8000b78 <SystemClock_Config+0xc8>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
 8000af4:	4b21      	ldr	r3, [pc, #132]	@ (8000b7c <SystemClock_Config+0xcc>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a20      	ldr	r2, [pc, #128]	@ (8000b7c <SystemClock_Config+0xcc>)
 8000afa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b1e      	ldr	r3, [pc, #120]	@ (8000b7c <SystemClock_Config+0xcc>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b20:	2308      	movs	r3, #8
 8000b22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b24:	2360      	movs	r3, #96	@ 0x60
 8000b26:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b2c:	2304      	movs	r3, #4
 8000b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	4618      	mov	r0, r3
 8000b36:	f004 fa39 	bl	8004fac <HAL_RCC_OscConfig>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b40:	f000 f8c8 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b44:	230f      	movs	r3, #15
 8000b46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8000b4c:	2380      	movs	r3, #128	@ 0x80
 8000b4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000b5a:	f107 030c 	add.w	r3, r7, #12
 8000b5e:	2101      	movs	r1, #1
 8000b60:	4618      	mov	r0, r3
 8000b62:	f004 fc9b 	bl	800549c <HAL_RCC_ClockConfig>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000b6c:	f000 f8b2 	bl	8000cd4 <Error_Handler>
  }
}
 8000b70:	bf00      	nop
 8000b72:	3750      	adds	r7, #80	@ 0x50
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40007000 	.word	0x40007000

08000b80 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b84:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000b86:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf8 <MX_SPI1_Init+0x78>)
 8000b88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000b8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b92:	4b18      	ldr	r3, [pc, #96]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b98:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b9e:	4b15      	ldr	r3, [pc, #84]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bca:	4b0a      	ldr	r3, [pc, #40]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000bcc:	220a      	movs	r2, #10
 8000bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd0:	4808      	ldr	r0, [pc, #32]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000bd2:	f004 fe83 	bl	80058dc <HAL_SPI_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000bdc:	f000 f87a 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */
  __HAL_SPI_ENABLE(&hspi1);
 8000be0:	4b04      	ldr	r3, [pc, #16]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	4b03      	ldr	r3, [pc, #12]	@ (8000bf4 <MX_SPI1_Init+0x74>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000bee:	601a      	str	r2, [r3, #0]

  /* USER CODE END SPI1_Init 2 */

}
 8000bf0:	bf00      	nop
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200008f0 	.word	0x200008f0
 8000bf8:	40013000 	.word	0x40013000

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	@ (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f004 fedb 	bl	80059ee <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f849 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000948 	.word	0x20000948
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b088      	sub	sp, #32
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 030c 	add.w	r3, r7, #12
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	@ (8000ccc <MX_GPIO_Init+0x7c>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	4a17      	ldr	r2, [pc, #92]	@ (8000ccc <MX_GPIO_Init+0x7c>)
 8000c70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <MX_GPIO_Init+0x7c>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c7e:	60bb      	str	r3, [r7, #8]
 8000c80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	607b      	str	r3, [r7, #4]
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_GPIO_Init+0x7c>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a10      	ldr	r2, [pc, #64]	@ (8000ccc <MX_GPIO_Init+0x7c>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_GPIO_Init+0x7c>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	607b      	str	r3, [r7, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2103      	movs	r1, #3
 8000ca2:	480b      	ldr	r0, [pc, #44]	@ (8000cd0 <MX_GPIO_Init+0x80>)
 8000ca4:	f004 f968 	bl	8004f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000ca8:	2303      	movs	r3, #3
 8000caa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cac:	2301      	movs	r3, #1
 8000cae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 030c 	add.w	r3, r7, #12
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <MX_GPIO_Init+0x80>)
 8000cc0:	f003 ffbe 	bl	8004c40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3720      	adds	r7, #32
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020000 	.word	0x40020000

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <Error_Handler+0x8>

08000ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	607b      	str	r3, [r7, #4]
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cee:	4a0f      	ldr	r2, [pc, #60]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	603b      	str	r3, [r7, #0]
 8000d06:	4b09      	ldr	r3, [pc, #36]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	4a08      	ldr	r2, [pc, #32]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d10:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d12:	4b06      	ldr	r3, [pc, #24]	@ (8000d2c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <HAL_SPI_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12b      	bne.n	8000daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a17      	ldr	r2, [pc, #92]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d8a:	23e0      	movs	r3, #224	@ 0xe0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <HAL_SPI_MspInit+0x8c>)
 8000da6:	f003 ff4b 	bl	8004c40 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	@ 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013000 	.word	0x40013000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc8:	f107 0314 	add.w	r3, r7, #20
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a19      	ldr	r2, [pc, #100]	@ (8000e44 <HAL_UART_MspInit+0x84>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d12b      	bne.n	8000e3a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	4b18      	ldr	r3, [pc, #96]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	4a17      	ldr	r2, [pc, #92]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000dec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000df0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df2:	4b15      	ldr	r3, [pc, #84]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_UART_MspInit+0x88>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e1a:	230c      	movs	r3, #12
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	2303      	movs	r3, #3
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2e:	f107 0314 	add.w	r3, r7, #20
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	@ (8000e4c <HAL_UART_MspInit+0x8c>)
 8000e36:	f003 ff03 	bl	8004c40 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40004400 	.word	0x40004400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020000 	.word	0x40020000

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e54:	bf00      	nop
 8000e56:	e7fd      	b.n	8000e54 <NMI_Handler+0x4>

08000e58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5c:	bf00      	nop
 8000e5e:	e7fd      	b.n	8000e5c <HardFault_Handler+0x4>

08000e60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e64:	bf00      	nop
 8000e66:	e7fd      	b.n	8000e64 <MemManage_Handler+0x4>

08000e68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6c:	bf00      	nop
 8000e6e:	e7fd      	b.n	8000e6c <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr

08000e86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea6:	f003 fda1 	bl	80049ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}

08000eae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  return 1;
 8000eb2:	2301      	movs	r3, #1
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_kill>:

int _kill(int pid, int sig)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
 8000ec6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ec8:	f005 fbdc 	bl	8006684 <__errno>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2216      	movs	r2, #22
 8000ed0:	601a      	str	r2, [r3, #0]
  return -1;
 8000ed2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_exit>:

void _exit (int status)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000ee6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ffe7 	bl	8000ebe <_kill>
  while (1) {}    /* Make sure we hang here */
 8000ef0:	bf00      	nop
 8000ef2:	e7fd      	b.n	8000ef0 <_exit+0x12>

08000ef4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f00:	2300      	movs	r3, #0
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	e00a      	b.n	8000f1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f06:	f3af 8000 	nop.w
 8000f0a:	4601      	mov	r1, r0
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	1c5a      	adds	r2, r3, #1
 8000f10:	60ba      	str	r2, [r7, #8]
 8000f12:	b2ca      	uxtb	r2, r1
 8000f14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697a      	ldr	r2, [r7, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbf0      	blt.n	8000f06 <_read+0x12>
  }

  return len;
 8000f24:	687b      	ldr	r3, [r7, #4]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3718      	adds	r7, #24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b086      	sub	sp, #24
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	60f8      	str	r0, [r7, #12]
 8000f36:	60b9      	str	r1, [r7, #8]
 8000f38:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	617b      	str	r3, [r7, #20]
 8000f3e:	e009      	b.n	8000f54 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	60ba      	str	r2, [r7, #8]
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fc41 	bl	80007d0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3301      	adds	r3, #1
 8000f52:	617b      	str	r3, [r7, #20]
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	429a      	cmp	r2, r3
 8000f5a:	dbf1      	blt.n	8000f40 <_write+0x12>
  }
  return len;
 8000f5c:	687b      	ldr	r3, [r7, #4]
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <_close>:

int _close(int file)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b083      	sub	sp, #12
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr

08000f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f7e:	b480      	push	{r7}
 8000f80:	b083      	sub	sp, #12
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
 8000f86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f8e:	605a      	str	r2, [r3, #4]
  return 0;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <_isatty>:

int _isatty(int file)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	b083      	sub	sp, #12
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fa6:	2301      	movs	r3, #1
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr

08000fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
	...

08000fd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b086      	sub	sp, #24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fd8:	4a14      	ldr	r2, [pc, #80]	@ (800102c <_sbrk+0x5c>)
 8000fda:	4b15      	ldr	r3, [pc, #84]	@ (8001030 <_sbrk+0x60>)
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fe4:	4b13      	ldr	r3, [pc, #76]	@ (8001034 <_sbrk+0x64>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d102      	bne.n	8000ff2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fec:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <_sbrk+0x64>)
 8000fee:	4a12      	ldr	r2, [pc, #72]	@ (8001038 <_sbrk+0x68>)
 8000ff0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ff2:	4b10      	ldr	r3, [pc, #64]	@ (8001034 <_sbrk+0x64>)
 8000ff4:	681a      	ldr	r2, [r3, #0]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4413      	add	r3, r2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d207      	bcs.n	8001010 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001000:	f005 fb40 	bl	8006684 <__errno>
 8001004:	4603      	mov	r3, r0
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800100a:	f04f 33ff 	mov.w	r3, #4294967295
 800100e:	e009      	b.n	8001024 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001010:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001016:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <_sbrk+0x64>)
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4413      	add	r3, r2
 800101e:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <_sbrk+0x64>)
 8001020:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001022:	68fb      	ldr	r3, [r7, #12]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3718      	adds	r7, #24
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20020000 	.word	0x20020000
 8001030:	00000400 	.word	0x00000400
 8001034:	20000994 	.word	0x20000994
 8001038:	20000b48 	.word	0x20000b48

0800103c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <SystemInit+0x20>)
 8001042:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001046:	4a05      	ldr	r2, [pc, #20]	@ (800105c <SystemInit+0x20>)
 8001048:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800104c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8001064:	2204      	movs	r2, #4
 8001066:	4909      	ldr	r1, [pc, #36]	@ (800108c <default_ip_assign+0x2c>)
 8001068:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800106c:	f001 fd1e 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8001070:	2204      	movs	r2, #4
 8001072:	4907      	ldr	r1, [pc, #28]	@ (8001090 <default_ip_assign+0x30>)
 8001074:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8001078:	f001 fd18 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 800107c:	2204      	movs	r2, #4
 800107e:	4905      	ldr	r1, [pc, #20]	@ (8001094 <default_ip_assign+0x34>)
 8001080:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001084:	f001 fd12 	bl	8002aac <WIZCHIP_WRITE_BUF>
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}
 800108c:	200009a8 	.word	0x200009a8
 8001090:	200009b0 	.word	0x200009b0
 8001094:	200009ac 	.word	0x200009ac

08001098 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 800109c:	2180      	movs	r1, #128	@ 0x80
 800109e:	2000      	movs	r0, #0
 80010a0:	f001 fc56 	bl	8002950 <WIZCHIP_WRITE>
   getMR(); // for delay
 80010a4:	2000      	movs	r0, #0
 80010a6:	f001 fc07 	bl	80028b8 <WIZCHIP_READ>
   default_ip_assign();
 80010aa:	f7ff ffd9 	bl	8001060 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 80010ae:	2206      	movs	r2, #6
 80010b0:	4903      	ldr	r1, [pc, #12]	@ (80010c0 <default_ip_update+0x28>)
 80010b2:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80010b6:	f001 fcf9 	bl	8002aac <WIZCHIP_WRITE_BUF>
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200009c8 	.word	0x200009c8

080010c4 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 80010c8:	2180      	movs	r1, #128	@ 0x80
 80010ca:	2000      	movs	r0, #0
 80010cc:	f001 fc40 	bl	8002950 <WIZCHIP_WRITE>
	getMR(); // for delay
 80010d0:	2000      	movs	r0, #0
 80010d2:	f001 fbf1 	bl	80028b8 <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 80010d6:	2206      	movs	r2, #6
 80010d8:	4903      	ldr	r1, [pc, #12]	@ (80010e8 <default_ip_conflict+0x24>)
 80010da:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80010de:	f001 fce5 	bl	8002aac <WIZCHIP_WRITE_BUF>
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200009c8 	.word	0x200009c8

080010ec <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 80010f8:	4b10      	ldr	r3, [pc, #64]	@ (800113c <reg_dhcp_cbfunc+0x50>)
 80010fa:	4a11      	ldr	r2, [pc, #68]	@ (8001140 <reg_dhcp_cbfunc+0x54>)
 80010fc:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <reg_dhcp_cbfunc+0x58>)
 8001100:	4a11      	ldr	r2, [pc, #68]	@ (8001148 <reg_dhcp_cbfunc+0x5c>)
 8001102:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <reg_dhcp_cbfunc+0x60>)
 8001106:	4a12      	ldr	r2, [pc, #72]	@ (8001150 <reg_dhcp_cbfunc+0x64>)
 8001108:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d002      	beq.n	8001116 <reg_dhcp_cbfunc+0x2a>
 8001110:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <reg_dhcp_cbfunc+0x50>)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <reg_dhcp_cbfunc+0x36>
 800111c:	4a09      	ldr	r2, [pc, #36]	@ (8001144 <reg_dhcp_cbfunc+0x58>)
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d002      	beq.n	800112e <reg_dhcp_cbfunc+0x42>
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <reg_dhcp_cbfunc+0x60>)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000034 	.word	0x20000034
 8001140:	08001061 	.word	0x08001061
 8001144:	20000038 	.word	0x20000038
 8001148:	08001099 	.word	0x08001099
 800114c:	2000003c 	.word	0x2000003c
 8001150:	080010c5 	.word	0x080010c5

08001154 <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 800115a:	463b      	mov	r3, r7
 800115c:	2206      	movs	r2, #6
 800115e:	4619      	mov	r1, r3
 8001160:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8001164:	f001 fc42 	bl	80029ec <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 8001168:	4b72      	ldr	r3, [pc, #456]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8001170:	4b70      	ldr	r3, [pc, #448]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2201      	movs	r2, #1
 8001176:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 8001178:	4b6e      	ldr	r3, [pc, #440]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2206      	movs	r2, #6
 800117e:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8001180:	4b6c      	ldr	r3, [pc, #432]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 8001188:	4b6a      	ldr	r3, [pc, #424]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	3304      	adds	r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8001190:	4b69      	ldr	r3, [pc, #420]	@ (8001338 <makeDHCPMSG+0x1e4>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	0e1b      	lsrs	r3, r3, #24
 8001196:	b2da      	uxtb	r2, r3
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 800119c:	4b66      	ldr	r3, [pc, #408]	@ (8001338 <makeDHCPMSG+0x1e4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	0c1a      	lsrs	r2, r3, #16
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	3301      	adds	r3, #1
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 80011aa:	4b63      	ldr	r3, [pc, #396]	@ (8001338 <makeDHCPMSG+0x1e4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	0a1a      	lsrs	r2, r3, #8
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	3302      	adds	r3, #2
 80011b4:	b2d2      	uxtb	r2, r2
 80011b6:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 80011b8:	4b5f      	ldr	r3, [pc, #380]	@ (8001338 <makeDHCPMSG+0x1e4>)
 80011ba:	681a      	ldr	r2, [r3, #0]
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	3303      	adds	r3, #3
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 80011c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2200      	movs	r2, #0
 80011ca:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 80011cc:	4b59      	ldr	r3, [pc, #356]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	330a      	adds	r3, #10
 80011d2:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	2280      	movs	r2, #128	@ 0x80
 80011d8:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	3301      	adds	r3, #1
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80011e2:	4b54      	ldr	r3, [pc, #336]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2200      	movs	r2, #0
 80011e8:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80011ea:	4b52      	ldr	r3, [pc, #328]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2200      	movs	r2, #0
 80011f0:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80011f2:	4b50      	ldr	r3, [pc, #320]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2200      	movs	r2, #0
 80011f8:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80011fa:	4b4e      	ldr	r3, [pc, #312]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2200      	movs	r2, #0
 8001200:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 8001202:	4b4c      	ldr	r3, [pc, #304]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2200      	movs	r2, #0
 8001210:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 8001212:	4b48      	ldr	r3, [pc, #288]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 800121a:	4b46      	ldr	r3, [pc, #280]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 8001222:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2200      	movs	r2, #0
 8001228:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 800122a:	4b42      	ldr	r3, [pc, #264]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2200      	movs	r2, #0
 8001230:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 8001232:	4b40      	ldr	r3, [pc, #256]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 800123a:	4b3e      	ldr	r3, [pc, #248]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8001242:	4b3c      	ldr	r3, [pc, #240]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 800124a:	4b3a      	ldr	r3, [pc, #232]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2200      	movs	r2, #0
 8001250:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8001252:	4b38      	ldr	r3, [pc, #224]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 800125a:	4b36      	ldr	r3, [pc, #216]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2200      	movs	r2, #0
 8001260:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8001262:	4b34      	ldr	r3, [pc, #208]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4a35      	ldr	r2, [pc, #212]	@ (800133c <makeDHCPMSG+0x1e8>)
 8001268:	7812      	ldrb	r2, [r2, #0]
 800126a:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 800126c:	4b31      	ldr	r3, [pc, #196]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a32      	ldr	r2, [pc, #200]	@ (800133c <makeDHCPMSG+0x1e8>)
 8001272:	7852      	ldrb	r2, [r2, #1]
 8001274:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 8001276:	4b2f      	ldr	r3, [pc, #188]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a30      	ldr	r2, [pc, #192]	@ (800133c <makeDHCPMSG+0x1e8>)
 800127c:	7892      	ldrb	r2, [r2, #2]
 800127e:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8001280:	4b2c      	ldr	r3, [pc, #176]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a2d      	ldr	r2, [pc, #180]	@ (800133c <makeDHCPMSG+0x1e8>)
 8001286:	78d2      	ldrb	r2, [r2, #3]
 8001288:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 800128a:	4b2a      	ldr	r3, [pc, #168]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a2b      	ldr	r2, [pc, #172]	@ (800133c <makeDHCPMSG+0x1e8>)
 8001290:	7912      	ldrb	r2, [r2, #4]
 8001292:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 8001296:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a28      	ldr	r2, [pc, #160]	@ (800133c <makeDHCPMSG+0x1e8>)
 800129c:	7952      	ldrb	r2, [r2, #5]
 800129e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 80012a2:	2306      	movs	r3, #6
 80012a4:	73fb      	strb	r3, [r7, #15]
 80012a6:	e008      	b.n	80012ba <makeDHCPMSG+0x166>
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	7bfb      	ldrb	r3, [r7, #15]
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	771a      	strb	r2, [r3, #28]
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
 80012b6:	3301      	adds	r3, #1
 80012b8:	73fb      	strb	r3, [r7, #15]
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
 80012bc:	2b0f      	cmp	r3, #15
 80012be:	d9f3      	bls.n	80012a8 <makeDHCPMSG+0x154>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]
 80012c4:	e009      	b.n	80012da <makeDHCPMSG+0x186>
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
 80012cc:	4413      	add	r3, r2
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	3301      	adds	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	7bfb      	ldrb	r3, [r7, #15]
 80012dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80012de:	d9f2      	bls.n	80012c6 <makeDHCPMSG+0x172>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80012e0:	2300      	movs	r3, #0
 80012e2:	73fb      	strb	r3, [r7, #15]
 80012e4:	e009      	b.n	80012fa <makeDHCPMSG+0x1a6>
 80012e6:	4b13      	ldr	r3, [pc, #76]	@ (8001334 <makeDHCPMSG+0x1e0>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	7bfb      	ldrb	r3, [r7, #15]
 80012ec:	4413      	add	r3, r2
 80012ee:	2200      	movs	r2, #0
 80012f0:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
 80012f6:	3301      	adds	r3, #1
 80012f8:	73fb      	strb	r3, [r7, #15]
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	daf1      	bge.n	80012e6 <makeDHCPMSG+0x192>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 8001302:	4b0c      	ldr	r3, [pc, #48]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2263      	movs	r2, #99	@ 0x63
 8001308:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 800130c:	4b09      	ldr	r3, [pc, #36]	@ (8001334 <makeDHCPMSG+0x1e0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2282      	movs	r2, #130	@ 0x82
 8001312:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 8001316:	4b07      	ldr	r3, [pc, #28]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2253      	movs	r2, #83	@ 0x53
 800131c:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 8001320:	4b04      	ldr	r3, [pc, #16]	@ (8001334 <makeDHCPMSG+0x1e0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2263      	movs	r2, #99	@ 0x63
 8001326:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
}
 800132a:	bf00      	nop
 800132c:	3710      	adds	r7, #16
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200009c4 	.word	0x200009c4
 8001338:	200009c0 	.word	0x200009c0
 800133c:	200009c8 	.word	0x200009c8

08001340 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8001340:	b5b0      	push	{r4, r5, r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001346:	2300      	movs	r3, #0
 8001348:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800134a:	f7ff ff03 	bl	8001154 <makeDHCPMSG>
   DHCP_SIP[0]=0;
 800134e:	4b56      	ldr	r3, [pc, #344]	@ (80014a8 <send_DHCP_DISCOVER+0x168>)
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8001354:	4b54      	ldr	r3, [pc, #336]	@ (80014a8 <send_DHCP_DISCOVER+0x168>)
 8001356:	2200      	movs	r2, #0
 8001358:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800135a:	4b53      	ldr	r3, [pc, #332]	@ (80014a8 <send_DHCP_DISCOVER+0x168>)
 800135c:	2200      	movs	r2, #0
 800135e:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8001360:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <send_DHCP_DISCOVER+0x168>)
 8001362:	2200      	movs	r2, #0
 8001364:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 8001366:	4b51      	ldr	r3, [pc, #324]	@ (80014ac <send_DHCP_DISCOVER+0x16c>)
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 800136c:	4b4f      	ldr	r3, [pc, #316]	@ (80014ac <send_DHCP_DISCOVER+0x16c>)
 800136e:	2200      	movs	r2, #0
 8001370:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8001372:	4b4e      	ldr	r3, [pc, #312]	@ (80014ac <send_DHCP_DISCOVER+0x16c>)
 8001374:	2200      	movs	r2, #0
 8001376:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 8001378:	4b4c      	ldr	r3, [pc, #304]	@ (80014ac <send_DHCP_DISCOVER+0x16c>)
 800137a:	2200      	movs	r2, #0
 800137c:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 800137e:	2304      	movs	r3, #4
 8001380:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001382:	4b4b      	ldr	r3, [pc, #300]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001384:	681a      	ldr	r2, [r3, #0]
 8001386:	88bb      	ldrh	r3, [r7, #4]
 8001388:	1c59      	adds	r1, r3, #1
 800138a:	80b9      	strh	r1, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	2235      	movs	r2, #53	@ 0x35
 8001390:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001394:	4b46      	ldr	r3, [pc, #280]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	1c59      	adds	r1, r3, #1
 800139c:	80b9      	strh	r1, [r7, #4]
 800139e:	4413      	add	r3, r2
 80013a0:	2201      	movs	r2, #1
 80013a2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 80013a6:	4b42      	ldr	r3, [pc, #264]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	1c59      	adds	r1, r3, #1
 80013ae:	80b9      	strh	r1, [r7, #4]
 80013b0:	4413      	add	r3, r2
 80013b2:	2201      	movs	r2, #1
 80013b4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80013b8:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	88bb      	ldrh	r3, [r7, #4]
 80013be:	1c59      	adds	r1, r3, #1
 80013c0:	80b9      	strh	r1, [r7, #4]
 80013c2:	4413      	add	r3, r2
 80013c4:	223d      	movs	r2, #61	@ 0x3d
 80013c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80013ca:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	88bb      	ldrh	r3, [r7, #4]
 80013d0:	1c59      	adds	r1, r3, #1
 80013d2:	80b9      	strh	r1, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	2207      	movs	r2, #7
 80013d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80013dc:	4b34      	ldr	r3, [pc, #208]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	88bb      	ldrh	r3, [r7, #4]
 80013e2:	1c59      	adds	r1, r3, #1
 80013e4:	80b9      	strh	r1, [r7, #4]
 80013e6:	4413      	add	r3, r2
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80013ee:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	88bb      	ldrh	r3, [r7, #4]
 80013f4:	1c59      	adds	r1, r3, #1
 80013f6:	80b9      	strh	r1, [r7, #4]
 80013f8:	4618      	mov	r0, r3
 80013fa:	4b2e      	ldr	r3, [pc, #184]	@ (80014b4 <send_DHCP_DISCOVER+0x174>)
 80013fc:	7819      	ldrb	r1, [r3, #0]
 80013fe:	1813      	adds	r3, r2, r0
 8001400:	460a      	mov	r2, r1
 8001402:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001406:	4b2a      	ldr	r3, [pc, #168]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	88bb      	ldrh	r3, [r7, #4]
 800140c:	1c59      	adds	r1, r3, #1
 800140e:	80b9      	strh	r1, [r7, #4]
 8001410:	4618      	mov	r0, r3
 8001412:	4b28      	ldr	r3, [pc, #160]	@ (80014b4 <send_DHCP_DISCOVER+0x174>)
 8001414:	7859      	ldrb	r1, [r3, #1]
 8001416:	1813      	adds	r3, r2, r0
 8001418:	460a      	mov	r2, r1
 800141a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 800141e:	4b24      	ldr	r3, [pc, #144]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	1c59      	adds	r1, r3, #1
 8001426:	80b9      	strh	r1, [r7, #4]
 8001428:	4618      	mov	r0, r3
 800142a:	4b22      	ldr	r3, [pc, #136]	@ (80014b4 <send_DHCP_DISCOVER+0x174>)
 800142c:	7899      	ldrb	r1, [r3, #2]
 800142e:	1813      	adds	r3, r2, r0
 8001430:	460a      	mov	r2, r1
 8001432:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	88bb      	ldrh	r3, [r7, #4]
 800143c:	1c59      	adds	r1, r3, #1
 800143e:	80b9      	strh	r1, [r7, #4]
 8001440:	4618      	mov	r0, r3
 8001442:	4b1c      	ldr	r3, [pc, #112]	@ (80014b4 <send_DHCP_DISCOVER+0x174>)
 8001444:	78d9      	ldrb	r1, [r3, #3]
 8001446:	1813      	adds	r3, r2, r0
 8001448:	460a      	mov	r2, r1
 800144a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 800144e:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	88bb      	ldrh	r3, [r7, #4]
 8001454:	1c59      	adds	r1, r3, #1
 8001456:	80b9      	strh	r1, [r7, #4]
 8001458:	4618      	mov	r0, r3
 800145a:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <send_DHCP_DISCOVER+0x174>)
 800145c:	7919      	ldrb	r1, [r3, #4]
 800145e:	1813      	adds	r3, r2, r0
 8001460:	460a      	mov	r2, r1
 8001462:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001466:	4b12      	ldr	r3, [pc, #72]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	88bb      	ldrh	r3, [r7, #4]
 800146c:	1c59      	adds	r1, r3, #1
 800146e:	80b9      	strh	r1, [r7, #4]
 8001470:	4618      	mov	r0, r3
 8001472:	4b10      	ldr	r3, [pc, #64]	@ (80014b4 <send_DHCP_DISCOVER+0x174>)
 8001474:	7959      	ldrb	r1, [r3, #5]
 8001476:	1813      	adds	r3, r2, r0
 8001478:	460a      	mov	r2, r1
 800147a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 800147e:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	88bb      	ldrh	r3, [r7, #4]
 8001484:	1c59      	adds	r1, r3, #1
 8001486:	80b9      	strh	r1, [r7, #4]
 8001488:	4413      	add	r3, r2
 800148a:	220c      	movs	r2, #12
 800148c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8001490:	4b07      	ldr	r3, [pc, #28]	@ (80014b0 <send_DHCP_DISCOVER+0x170>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	88bb      	ldrh	r3, [r7, #4]
 8001496:	1c59      	adds	r1, r3, #1
 8001498:	80b9      	strh	r1, [r7, #4]
 800149a:	4413      	add	r3, r2
 800149c:	2200      	movs	r2, #0
 800149e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80014a2:	2300      	movs	r3, #0
 80014a4:	80fb      	strh	r3, [r7, #6]
 80014a6:	e017      	b.n	80014d8 <send_DHCP_DISCOVER+0x198>
 80014a8:	2000099c 	.word	0x2000099c
 80014ac:	200009a0 	.word	0x200009a0
 80014b0:	200009c4 	.word	0x200009c4
 80014b4:	200009c8 	.word	0x200009c8
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80014b8:	88f9      	ldrh	r1, [r7, #6]
 80014ba:	4b80      	ldr	r3, [pc, #512]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	88bb      	ldrh	r3, [r7, #4]
 80014c0:	1c58      	adds	r0, r3, #1
 80014c2:	80b8      	strh	r0, [r7, #4]
 80014c4:	4618      	mov	r0, r3
 80014c6:	4b7e      	ldr	r3, [pc, #504]	@ (80016c0 <send_DHCP_DISCOVER+0x380>)
 80014c8:	5c59      	ldrb	r1, [r3, r1]
 80014ca:	1813      	adds	r3, r2, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	3301      	adds	r3, #1
 80014d6:	80fb      	strh	r3, [r7, #6]
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	4a79      	ldr	r2, [pc, #484]	@ (80016c0 <send_DHCP_DISCOVER+0x380>)
 80014dc:	5cd3      	ldrb	r3, [r2, r3]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d1ea      	bne.n	80014b8 <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80014e2:	4b78      	ldr	r3, [pc, #480]	@ (80016c4 <send_DHCP_DISCOVER+0x384>)
 80014e4:	78db      	ldrb	r3, [r3, #3]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4b74      	ldr	r3, [pc, #464]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 80014ec:	681c      	ldr	r4, [r3, #0]
 80014ee:	88bb      	ldrh	r3, [r7, #4]
 80014f0:	1c59      	adds	r1, r3, #1
 80014f2:	80b9      	strh	r1, [r7, #4]
 80014f4:	461d      	mov	r5, r3
 80014f6:	4610      	mov	r0, r2
 80014f8:	f001 f9c4 	bl	8002884 <NibbleToHex>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	1963      	adds	r3, r4, r5
 8001502:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001506:	4b6f      	ldr	r3, [pc, #444]	@ (80016c4 <send_DHCP_DISCOVER+0x384>)
 8001508:	78da      	ldrb	r2, [r3, #3]
 800150a:	4b6c      	ldr	r3, [pc, #432]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 800150c:	681c      	ldr	r4, [r3, #0]
 800150e:	88bb      	ldrh	r3, [r7, #4]
 8001510:	1c59      	adds	r1, r3, #1
 8001512:	80b9      	strh	r1, [r7, #4]
 8001514:	461d      	mov	r5, r3
 8001516:	4610      	mov	r0, r2
 8001518:	f001 f9b4 	bl	8002884 <NibbleToHex>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	1963      	adds	r3, r4, r5
 8001522:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001526:	4b67      	ldr	r3, [pc, #412]	@ (80016c4 <send_DHCP_DISCOVER+0x384>)
 8001528:	791b      	ldrb	r3, [r3, #4]
 800152a:	091b      	lsrs	r3, r3, #4
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4b63      	ldr	r3, [pc, #396]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001530:	681c      	ldr	r4, [r3, #0]
 8001532:	88bb      	ldrh	r3, [r7, #4]
 8001534:	1c59      	adds	r1, r3, #1
 8001536:	80b9      	strh	r1, [r7, #4]
 8001538:	461d      	mov	r5, r3
 800153a:	4610      	mov	r0, r2
 800153c:	f001 f9a2 	bl	8002884 <NibbleToHex>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	1963      	adds	r3, r4, r5
 8001546:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800154a:	4b5e      	ldr	r3, [pc, #376]	@ (80016c4 <send_DHCP_DISCOVER+0x384>)
 800154c:	791a      	ldrb	r2, [r3, #4]
 800154e:	4b5b      	ldr	r3, [pc, #364]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001550:	681c      	ldr	r4, [r3, #0]
 8001552:	88bb      	ldrh	r3, [r7, #4]
 8001554:	1c59      	adds	r1, r3, #1
 8001556:	80b9      	strh	r1, [r7, #4]
 8001558:	461d      	mov	r5, r3
 800155a:	4610      	mov	r0, r2
 800155c:	f001 f992 	bl	8002884 <NibbleToHex>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	1963      	adds	r3, r4, r5
 8001566:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800156a:	4b56      	ldr	r3, [pc, #344]	@ (80016c4 <send_DHCP_DISCOVER+0x384>)
 800156c:	795b      	ldrb	r3, [r3, #5]
 800156e:	091b      	lsrs	r3, r3, #4
 8001570:	b2da      	uxtb	r2, r3
 8001572:	4b52      	ldr	r3, [pc, #328]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001574:	681c      	ldr	r4, [r3, #0]
 8001576:	88bb      	ldrh	r3, [r7, #4]
 8001578:	1c59      	adds	r1, r3, #1
 800157a:	80b9      	strh	r1, [r7, #4]
 800157c:	461d      	mov	r5, r3
 800157e:	4610      	mov	r0, r2
 8001580:	f001 f980 	bl	8002884 <NibbleToHex>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	1963      	adds	r3, r4, r5
 800158a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 800158e:	4b4d      	ldr	r3, [pc, #308]	@ (80016c4 <send_DHCP_DISCOVER+0x384>)
 8001590:	795a      	ldrb	r2, [r3, #5]
 8001592:	4b4a      	ldr	r3, [pc, #296]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001594:	681c      	ldr	r4, [r3, #0]
 8001596:	88bb      	ldrh	r3, [r7, #4]
 8001598:	1c59      	adds	r1, r3, #1
 800159a:	80b9      	strh	r1, [r7, #4]
 800159c:	461d      	mov	r5, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f001 f970 	bl	8002884 <NibbleToHex>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	1963      	adds	r3, r4, r5
 80015aa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 80015ae:	88fb      	ldrh	r3, [r7, #6]
 80015b0:	b2d9      	uxtb	r1, r3
 80015b2:	4b42      	ldr	r3, [pc, #264]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	88b8      	ldrh	r0, [r7, #4]
 80015b8:	88fb      	ldrh	r3, [r7, #6]
 80015ba:	3307      	adds	r3, #7
 80015bc:	1ac3      	subs	r3, r0, r3
 80015be:	3106      	adds	r1, #6
 80015c0:	b2c9      	uxtb	r1, r1
 80015c2:	4413      	add	r3, r2
 80015c4:	460a      	mov	r2, r1
 80015c6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 80015ca:	4b3c      	ldr	r3, [pc, #240]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	88bb      	ldrh	r3, [r7, #4]
 80015d0:	1c59      	adds	r1, r3, #1
 80015d2:	80b9      	strh	r1, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	2237      	movs	r2, #55	@ 0x37
 80015d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80015dc:	4b37      	ldr	r3, [pc, #220]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	88bb      	ldrh	r3, [r7, #4]
 80015e2:	1c59      	adds	r1, r3, #1
 80015e4:	80b9      	strh	r1, [r7, #4]
 80015e6:	4413      	add	r3, r2
 80015e8:	2206      	movs	r2, #6
 80015ea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80015ee:	4b33      	ldr	r3, [pc, #204]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	88bb      	ldrh	r3, [r7, #4]
 80015f4:	1c59      	adds	r1, r3, #1
 80015f6:	80b9      	strh	r1, [r7, #4]
 80015f8:	4413      	add	r3, r2
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001600:	4b2e      	ldr	r3, [pc, #184]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	1c59      	adds	r1, r3, #1
 8001608:	80b9      	strh	r1, [r7, #4]
 800160a:	4413      	add	r3, r2
 800160c:	2203      	movs	r2, #3
 800160e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001612:	4b2a      	ldr	r3, [pc, #168]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	88bb      	ldrh	r3, [r7, #4]
 8001618:	1c59      	adds	r1, r3, #1
 800161a:	80b9      	strh	r1, [r7, #4]
 800161c:	4413      	add	r3, r2
 800161e:	2206      	movs	r2, #6
 8001620:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001624:	4b25      	ldr	r3, [pc, #148]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	88bb      	ldrh	r3, [r7, #4]
 800162a:	1c59      	adds	r1, r3, #1
 800162c:	80b9      	strh	r1, [r7, #4]
 800162e:	4413      	add	r3, r2
 8001630:	220f      	movs	r2, #15
 8001632:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001636:	4b21      	ldr	r3, [pc, #132]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001638:	681a      	ldr	r2, [r3, #0]
 800163a:	88bb      	ldrh	r3, [r7, #4]
 800163c:	1c59      	adds	r1, r3, #1
 800163e:	80b9      	strh	r1, [r7, #4]
 8001640:	4413      	add	r3, r2
 8001642:	223a      	movs	r2, #58	@ 0x3a
 8001644:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001648:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	88bb      	ldrh	r3, [r7, #4]
 800164e:	1c59      	adds	r1, r3, #1
 8001650:	80b9      	strh	r1, [r7, #4]
 8001652:	4413      	add	r3, r2
 8001654:	223b      	movs	r2, #59	@ 0x3b
 8001656:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800165a:	4b18      	ldr	r3, [pc, #96]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	88bb      	ldrh	r3, [r7, #4]
 8001660:	1c59      	adds	r1, r3, #1
 8001662:	80b9      	strh	r1, [r7, #4]
 8001664:	4413      	add	r3, r2
 8001666:	22ff      	movs	r2, #255	@ 0xff
 8001668:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 800166c:	88bb      	ldrh	r3, [r7, #4]
 800166e:	80fb      	strh	r3, [r7, #6]
 8001670:	e009      	b.n	8001686 <send_DHCP_DISCOVER+0x346>
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	88fb      	ldrh	r3, [r7, #6]
 8001678:	4413      	add	r3, r2
 800167a:	2200      	movs	r2, #0
 800167c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	3301      	adds	r3, #1
 8001684:	80fb      	strh	r3, [r7, #6]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 800168c:	d3f1      	bcc.n	8001672 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 800168e:	23ff      	movs	r3, #255	@ 0xff
 8001690:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8001692:	23ff      	movs	r3, #255	@ 0xff
 8001694:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 8001696:	23ff      	movs	r3, #255	@ 0xff
 8001698:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800169a:	23ff      	movs	r3, #255	@ 0xff
 800169c:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 800169e:	4b0a      	ldr	r3, [pc, #40]	@ (80016c8 <send_DHCP_DISCOVER+0x388>)
 80016a0:	7818      	ldrb	r0, [r3, #0]
 80016a2:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <send_DHCP_DISCOVER+0x37c>)
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	463b      	mov	r3, r7
 80016a8:	2243      	movs	r2, #67	@ 0x43
 80016aa:	9200      	str	r2, [sp, #0]
 80016ac:	f44f 7209 	mov.w	r2, #548	@ 0x224
 80016b0:	f001 ff3e 	bl	8003530 <sendto>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bdb0      	pop	{r4, r5, r7, pc}
 80016bc:	200009c4 	.word	0x200009c4
 80016c0:	2000002c 	.word	0x2000002c
 80016c4:	200009c8 	.word	0x200009c8
 80016c8:	20000998 	.word	0x20000998

080016cc <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 80016d2:	2300      	movs	r3, #0
 80016d4:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 80016d6:	f7ff fd3d 	bl	8001154 <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80016da:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <send_DHCP_REQUEST+0x7c>)
 80016dc:	f993 3000 	ldrsb.w	r3, [r3]
 80016e0:	2b03      	cmp	r3, #3
 80016e2:	d004      	beq.n	80016ee <send_DHCP_REQUEST+0x22>
 80016e4:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <send_DHCP_REQUEST+0x7c>)
 80016e6:	f993 3000 	ldrsb.w	r3, [r3]
 80016ea:	2b04      	cmp	r3, #4
 80016ec:	d134      	bne.n	8001758 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80016ee:	4b17      	ldr	r3, [pc, #92]	@ (800174c <send_DHCP_REQUEST+0x80>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	330a      	adds	r3, #10
 80016f4:	2200      	movs	r2, #0
 80016f6:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <send_DHCP_REQUEST+0x80>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	330a      	adds	r3, #10
 80016fe:	3301      	adds	r3, #1
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 8001704:	4b11      	ldr	r3, [pc, #68]	@ (800174c <send_DHCP_REQUEST+0x80>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a11      	ldr	r2, [pc, #68]	@ (8001750 <send_DHCP_REQUEST+0x84>)
 800170a:	7812      	ldrb	r2, [r2, #0]
 800170c:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 800170e:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <send_DHCP_REQUEST+0x80>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a0f      	ldr	r2, [pc, #60]	@ (8001750 <send_DHCP_REQUEST+0x84>)
 8001714:	7852      	ldrb	r2, [r2, #1]
 8001716:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <send_DHCP_REQUEST+0x80>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a0c      	ldr	r2, [pc, #48]	@ (8001750 <send_DHCP_REQUEST+0x84>)
 800171e:	7892      	ldrb	r2, [r2, #2]
 8001720:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 8001722:	4b0a      	ldr	r3, [pc, #40]	@ (800174c <send_DHCP_REQUEST+0x80>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a0a      	ldr	r2, [pc, #40]	@ (8001750 <send_DHCP_REQUEST+0x84>)
 8001728:	78d2      	ldrb	r2, [r2, #3]
 800172a:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <send_DHCP_REQUEST+0x88>)
 800172e:	781b      	ldrb	r3, [r3, #0]
 8001730:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 8001732:	4b08      	ldr	r3, [pc, #32]	@ (8001754 <send_DHCP_REQUEST+0x88>)
 8001734:	785b      	ldrb	r3, [r3, #1]
 8001736:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8001738:	4b06      	ldr	r3, [pc, #24]	@ (8001754 <send_DHCP_REQUEST+0x88>)
 800173a:	789b      	ldrb	r3, [r3, #2]
 800173c:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 800173e:	4b05      	ldr	r3, [pc, #20]	@ (8001754 <send_DHCP_REQUEST+0x88>)
 8001740:	78db      	ldrb	r3, [r3, #3]
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	e010      	b.n	8001768 <send_DHCP_REQUEST+0x9c>
 8001746:	bf00      	nop
 8001748:	200009b8 	.word	0x200009b8
 800174c:	200009c4 	.word	0x200009c4
 8001750:	200009a8 	.word	0x200009a8
 8001754:	2000099c 	.word	0x2000099c
   }
   else
   {
   	ip[0] = 255;
 8001758:	23ff      	movs	r3, #255	@ 0xff
 800175a:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 800175c:	23ff      	movs	r3, #255	@ 0xff
 800175e:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8001760:	23ff      	movs	r3, #255	@ 0xff
 8001762:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 8001764:	23ff      	movs	r3, #255	@ 0xff
 8001766:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001768:	2304      	movs	r3, #4
 800176a:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 800176c:	4b8d      	ldr	r3, [pc, #564]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	897b      	ldrh	r3, [r7, #10]
 8001772:	1c59      	adds	r1, r3, #1
 8001774:	8179      	strh	r1, [r7, #10]
 8001776:	4413      	add	r3, r2
 8001778:	2235      	movs	r2, #53	@ 0x35
 800177a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800177e:	4b89      	ldr	r3, [pc, #548]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	897b      	ldrh	r3, [r7, #10]
 8001784:	1c59      	adds	r1, r3, #1
 8001786:	8179      	strh	r1, [r7, #10]
 8001788:	4413      	add	r3, r2
 800178a:	2201      	movs	r2, #1
 800178c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8001790:	4b84      	ldr	r3, [pc, #528]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	897b      	ldrh	r3, [r7, #10]
 8001796:	1c59      	adds	r1, r3, #1
 8001798:	8179      	strh	r1, [r7, #10]
 800179a:	4413      	add	r3, r2
 800179c:	2203      	movs	r2, #3
 800179e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 80017a2:	4b80      	ldr	r3, [pc, #512]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	897b      	ldrh	r3, [r7, #10]
 80017a8:	1c59      	adds	r1, r3, #1
 80017aa:	8179      	strh	r1, [r7, #10]
 80017ac:	4413      	add	r3, r2
 80017ae:	223d      	movs	r2, #61	@ 0x3d
 80017b0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 80017b4:	4b7b      	ldr	r3, [pc, #492]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	897b      	ldrh	r3, [r7, #10]
 80017ba:	1c59      	adds	r1, r3, #1
 80017bc:	8179      	strh	r1, [r7, #10]
 80017be:	4413      	add	r3, r2
 80017c0:	2207      	movs	r2, #7
 80017c2:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80017c6:	4b77      	ldr	r3, [pc, #476]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	897b      	ldrh	r3, [r7, #10]
 80017cc:	1c59      	adds	r1, r3, #1
 80017ce:	8179      	strh	r1, [r7, #10]
 80017d0:	4413      	add	r3, r2
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80017d8:	4b72      	ldr	r3, [pc, #456]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	897b      	ldrh	r3, [r7, #10]
 80017de:	1c59      	adds	r1, r3, #1
 80017e0:	8179      	strh	r1, [r7, #10]
 80017e2:	4618      	mov	r0, r3
 80017e4:	4b70      	ldr	r3, [pc, #448]	@ (80019a8 <send_DHCP_REQUEST+0x2dc>)
 80017e6:	7819      	ldrb	r1, [r3, #0]
 80017e8:	1813      	adds	r3, r2, r0
 80017ea:	460a      	mov	r2, r1
 80017ec:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80017f0:	4b6c      	ldr	r3, [pc, #432]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	897b      	ldrh	r3, [r7, #10]
 80017f6:	1c59      	adds	r1, r3, #1
 80017f8:	8179      	strh	r1, [r7, #10]
 80017fa:	4618      	mov	r0, r3
 80017fc:	4b6a      	ldr	r3, [pc, #424]	@ (80019a8 <send_DHCP_REQUEST+0x2dc>)
 80017fe:	7859      	ldrb	r1, [r3, #1]
 8001800:	1813      	adds	r3, r2, r0
 8001802:	460a      	mov	r2, r1
 8001804:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001808:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	897b      	ldrh	r3, [r7, #10]
 800180e:	1c59      	adds	r1, r3, #1
 8001810:	8179      	strh	r1, [r7, #10]
 8001812:	4618      	mov	r0, r3
 8001814:	4b64      	ldr	r3, [pc, #400]	@ (80019a8 <send_DHCP_REQUEST+0x2dc>)
 8001816:	7899      	ldrb	r1, [r3, #2]
 8001818:	1813      	adds	r3, r2, r0
 800181a:	460a      	mov	r2, r1
 800181c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001820:	4b60      	ldr	r3, [pc, #384]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	897b      	ldrh	r3, [r7, #10]
 8001826:	1c59      	adds	r1, r3, #1
 8001828:	8179      	strh	r1, [r7, #10]
 800182a:	4618      	mov	r0, r3
 800182c:	4b5e      	ldr	r3, [pc, #376]	@ (80019a8 <send_DHCP_REQUEST+0x2dc>)
 800182e:	78d9      	ldrb	r1, [r3, #3]
 8001830:	1813      	adds	r3, r2, r0
 8001832:	460a      	mov	r2, r1
 8001834:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001838:	4b5a      	ldr	r3, [pc, #360]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	897b      	ldrh	r3, [r7, #10]
 800183e:	1c59      	adds	r1, r3, #1
 8001840:	8179      	strh	r1, [r7, #10]
 8001842:	4618      	mov	r0, r3
 8001844:	4b58      	ldr	r3, [pc, #352]	@ (80019a8 <send_DHCP_REQUEST+0x2dc>)
 8001846:	7919      	ldrb	r1, [r3, #4]
 8001848:	1813      	adds	r3, r2, r0
 800184a:	460a      	mov	r2, r1
 800184c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001850:	4b54      	ldr	r3, [pc, #336]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	897b      	ldrh	r3, [r7, #10]
 8001856:	1c59      	adds	r1, r3, #1
 8001858:	8179      	strh	r1, [r7, #10]
 800185a:	4618      	mov	r0, r3
 800185c:	4b52      	ldr	r3, [pc, #328]	@ (80019a8 <send_DHCP_REQUEST+0x2dc>)
 800185e:	7959      	ldrb	r1, [r3, #5]
 8001860:	1813      	adds	r3, r2, r0
 8001862:	460a      	mov	r2, r1
 8001864:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	2bff      	cmp	r3, #255	@ 0xff
 800186c:	f040 8084 	bne.w	8001978 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001870:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	897b      	ldrh	r3, [r7, #10]
 8001876:	1c59      	adds	r1, r3, #1
 8001878:	8179      	strh	r1, [r7, #10]
 800187a:	4413      	add	r3, r2
 800187c:	2232      	movs	r2, #50	@ 0x32
 800187e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	897b      	ldrh	r3, [r7, #10]
 8001888:	1c59      	adds	r1, r3, #1
 800188a:	8179      	strh	r1, [r7, #10]
 800188c:	4413      	add	r3, r2
 800188e:	2204      	movs	r2, #4
 8001890:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001894:	4b43      	ldr	r3, [pc, #268]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	897b      	ldrh	r3, [r7, #10]
 800189a:	1c59      	adds	r1, r3, #1
 800189c:	8179      	strh	r1, [r7, #10]
 800189e:	4618      	mov	r0, r3
 80018a0:	4b42      	ldr	r3, [pc, #264]	@ (80019ac <send_DHCP_REQUEST+0x2e0>)
 80018a2:	7819      	ldrb	r1, [r3, #0]
 80018a4:	1813      	adds	r3, r2, r0
 80018a6:	460a      	mov	r2, r1
 80018a8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 80018ac:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	897b      	ldrh	r3, [r7, #10]
 80018b2:	1c59      	adds	r1, r3, #1
 80018b4:	8179      	strh	r1, [r7, #10]
 80018b6:	4618      	mov	r0, r3
 80018b8:	4b3c      	ldr	r3, [pc, #240]	@ (80019ac <send_DHCP_REQUEST+0x2e0>)
 80018ba:	7859      	ldrb	r1, [r3, #1]
 80018bc:	1813      	adds	r3, r2, r0
 80018be:	460a      	mov	r2, r1
 80018c0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 80018c4:	4b37      	ldr	r3, [pc, #220]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	897b      	ldrh	r3, [r7, #10]
 80018ca:	1c59      	adds	r1, r3, #1
 80018cc:	8179      	strh	r1, [r7, #10]
 80018ce:	4618      	mov	r0, r3
 80018d0:	4b36      	ldr	r3, [pc, #216]	@ (80019ac <send_DHCP_REQUEST+0x2e0>)
 80018d2:	7899      	ldrb	r1, [r3, #2]
 80018d4:	1813      	adds	r3, r2, r0
 80018d6:	460a      	mov	r2, r1
 80018d8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80018dc:	4b31      	ldr	r3, [pc, #196]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	897b      	ldrh	r3, [r7, #10]
 80018e2:	1c59      	adds	r1, r3, #1
 80018e4:	8179      	strh	r1, [r7, #10]
 80018e6:	4618      	mov	r0, r3
 80018e8:	4b30      	ldr	r3, [pc, #192]	@ (80019ac <send_DHCP_REQUEST+0x2e0>)
 80018ea:	78d9      	ldrb	r1, [r3, #3]
 80018ec:	1813      	adds	r3, r2, r0
 80018ee:	460a      	mov	r2, r1
 80018f0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80018f4:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	897b      	ldrh	r3, [r7, #10]
 80018fa:	1c59      	adds	r1, r3, #1
 80018fc:	8179      	strh	r1, [r7, #10]
 80018fe:	4413      	add	r3, r2
 8001900:	2236      	movs	r2, #54	@ 0x36
 8001902:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 8001906:	4b27      	ldr	r3, [pc, #156]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	897b      	ldrh	r3, [r7, #10]
 800190c:	1c59      	adds	r1, r3, #1
 800190e:	8179      	strh	r1, [r7, #10]
 8001910:	4413      	add	r3, r2
 8001912:	2204      	movs	r2, #4
 8001914:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001918:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	897b      	ldrh	r3, [r7, #10]
 800191e:	1c59      	adds	r1, r3, #1
 8001920:	8179      	strh	r1, [r7, #10]
 8001922:	4618      	mov	r0, r3
 8001924:	4b22      	ldr	r3, [pc, #136]	@ (80019b0 <send_DHCP_REQUEST+0x2e4>)
 8001926:	7819      	ldrb	r1, [r3, #0]
 8001928:	1813      	adds	r3, r2, r0
 800192a:	460a      	mov	r2, r1
 800192c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001930:	4b1c      	ldr	r3, [pc, #112]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	897b      	ldrh	r3, [r7, #10]
 8001936:	1c59      	adds	r1, r3, #1
 8001938:	8179      	strh	r1, [r7, #10]
 800193a:	4618      	mov	r0, r3
 800193c:	4b1c      	ldr	r3, [pc, #112]	@ (80019b0 <send_DHCP_REQUEST+0x2e4>)
 800193e:	7859      	ldrb	r1, [r3, #1]
 8001940:	1813      	adds	r3, r2, r0
 8001942:	460a      	mov	r2, r1
 8001944:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001948:	4b16      	ldr	r3, [pc, #88]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	897b      	ldrh	r3, [r7, #10]
 800194e:	1c59      	adds	r1, r3, #1
 8001950:	8179      	strh	r1, [r7, #10]
 8001952:	4618      	mov	r0, r3
 8001954:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <send_DHCP_REQUEST+0x2e4>)
 8001956:	7899      	ldrb	r1, [r3, #2]
 8001958:	1813      	adds	r3, r2, r0
 800195a:	460a      	mov	r2, r1
 800195c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001960:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	897b      	ldrh	r3, [r7, #10]
 8001966:	1c59      	adds	r1, r3, #1
 8001968:	8179      	strh	r1, [r7, #10]
 800196a:	4618      	mov	r0, r3
 800196c:	4b10      	ldr	r3, [pc, #64]	@ (80019b0 <send_DHCP_REQUEST+0x2e4>)
 800196e:	78d9      	ldrb	r1, [r3, #3]
 8001970:	1813      	adds	r3, r2, r0
 8001972:	460a      	mov	r2, r1
 8001974:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8001978:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	897b      	ldrh	r3, [r7, #10]
 800197e:	1c59      	adds	r1, r3, #1
 8001980:	8179      	strh	r1, [r7, #10]
 8001982:	4413      	add	r3, r2
 8001984:	220c      	movs	r2, #12
 8001986:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 800198a:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <send_DHCP_REQUEST+0x2d8>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	897b      	ldrh	r3, [r7, #10]
 8001990:	1c59      	adds	r1, r3, #1
 8001992:	8179      	strh	r1, [r7, #10]
 8001994:	4413      	add	r3, r2
 8001996:	2200      	movs	r2, #0
 8001998:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	e019      	b.n	80019d6 <send_DHCP_REQUEST+0x30a>
 80019a2:	bf00      	nop
 80019a4:	200009c4 	.word	0x200009c4
 80019a8:	200009c8 	.word	0x200009c8
 80019ac:	200009a8 	.word	0x200009a8
 80019b0:	2000099c 	.word	0x2000099c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 80019b4:	4b86      	ldr	r3, [pc, #536]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	897b      	ldrh	r3, [r7, #10]
 80019ba:	1c59      	adds	r1, r3, #1
 80019bc:	8179      	strh	r1, [r7, #10]
 80019be:	4618      	mov	r0, r3
 80019c0:	4984      	ldr	r1, [pc, #528]	@ (8001bd4 <send_DHCP_REQUEST+0x508>)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	440b      	add	r3, r1
 80019c6:	7819      	ldrb	r1, [r3, #0]
 80019c8:	1813      	adds	r3, r2, r0
 80019ca:	460a      	mov	r2, r1
 80019cc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	4a7f      	ldr	r2, [pc, #508]	@ (8001bd4 <send_DHCP_REQUEST+0x508>)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4413      	add	r3, r2
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1e8      	bne.n	80019b4 <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80019e2:	4b7d      	ldr	r3, [pc, #500]	@ (8001bd8 <send_DHCP_REQUEST+0x50c>)
 80019e4:	78db      	ldrb	r3, [r3, #3]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	b2da      	uxtb	r2, r3
 80019ea:	4b79      	ldr	r3, [pc, #484]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 80019ec:	681c      	ldr	r4, [r3, #0]
 80019ee:	897b      	ldrh	r3, [r7, #10]
 80019f0:	1c59      	adds	r1, r3, #1
 80019f2:	8179      	strh	r1, [r7, #10]
 80019f4:	461d      	mov	r5, r3
 80019f6:	4610      	mov	r0, r2
 80019f8:	f000 ff44 	bl	8002884 <NibbleToHex>
 80019fc:	4603      	mov	r3, r0
 80019fe:	461a      	mov	r2, r3
 8001a00:	1963      	adds	r3, r4, r5
 8001a02:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 8001a06:	4b74      	ldr	r3, [pc, #464]	@ (8001bd8 <send_DHCP_REQUEST+0x50c>)
 8001a08:	78da      	ldrb	r2, [r3, #3]
 8001a0a:	4b71      	ldr	r3, [pc, #452]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001a0c:	681c      	ldr	r4, [r3, #0]
 8001a0e:	897b      	ldrh	r3, [r7, #10]
 8001a10:	1c59      	adds	r1, r3, #1
 8001a12:	8179      	strh	r1, [r7, #10]
 8001a14:	461d      	mov	r5, r3
 8001a16:	4610      	mov	r0, r2
 8001a18:	f000 ff34 	bl	8002884 <NibbleToHex>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	461a      	mov	r2, r3
 8001a20:	1963      	adds	r3, r4, r5
 8001a22:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 8001a26:	4b6c      	ldr	r3, [pc, #432]	@ (8001bd8 <send_DHCP_REQUEST+0x50c>)
 8001a28:	791b      	ldrb	r3, [r3, #4]
 8001a2a:	091b      	lsrs	r3, r3, #4
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	4b68      	ldr	r3, [pc, #416]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001a30:	681c      	ldr	r4, [r3, #0]
 8001a32:	897b      	ldrh	r3, [r7, #10]
 8001a34:	1c59      	adds	r1, r3, #1
 8001a36:	8179      	strh	r1, [r7, #10]
 8001a38:	461d      	mov	r5, r3
 8001a3a:	4610      	mov	r0, r2
 8001a3c:	f000 ff22 	bl	8002884 <NibbleToHex>
 8001a40:	4603      	mov	r3, r0
 8001a42:	461a      	mov	r2, r3
 8001a44:	1963      	adds	r3, r4, r5
 8001a46:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8001a4a:	4b63      	ldr	r3, [pc, #396]	@ (8001bd8 <send_DHCP_REQUEST+0x50c>)
 8001a4c:	791a      	ldrb	r2, [r3, #4]
 8001a4e:	4b60      	ldr	r3, [pc, #384]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001a50:	681c      	ldr	r4, [r3, #0]
 8001a52:	897b      	ldrh	r3, [r7, #10]
 8001a54:	1c59      	adds	r1, r3, #1
 8001a56:	8179      	strh	r1, [r7, #10]
 8001a58:	461d      	mov	r5, r3
 8001a5a:	4610      	mov	r0, r2
 8001a5c:	f000 ff12 	bl	8002884 <NibbleToHex>
 8001a60:	4603      	mov	r3, r0
 8001a62:	461a      	mov	r2, r3
 8001a64:	1963      	adds	r3, r4, r5
 8001a66:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8001a6a:	4b5b      	ldr	r3, [pc, #364]	@ (8001bd8 <send_DHCP_REQUEST+0x50c>)
 8001a6c:	795b      	ldrb	r3, [r3, #5]
 8001a6e:	091b      	lsrs	r3, r3, #4
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b57      	ldr	r3, [pc, #348]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001a74:	681c      	ldr	r4, [r3, #0]
 8001a76:	897b      	ldrh	r3, [r7, #10]
 8001a78:	1c59      	adds	r1, r3, #1
 8001a7a:	8179      	strh	r1, [r7, #10]
 8001a7c:	461d      	mov	r5, r3
 8001a7e:	4610      	mov	r0, r2
 8001a80:	f000 ff00 	bl	8002884 <NibbleToHex>
 8001a84:	4603      	mov	r3, r0
 8001a86:	461a      	mov	r2, r3
 8001a88:	1963      	adds	r3, r4, r5
 8001a8a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8001a8e:	4b52      	ldr	r3, [pc, #328]	@ (8001bd8 <send_DHCP_REQUEST+0x50c>)
 8001a90:	795a      	ldrb	r2, [r3, #5]
 8001a92:	4b4f      	ldr	r3, [pc, #316]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001a94:	681c      	ldr	r4, [r3, #0]
 8001a96:	897b      	ldrh	r3, [r7, #10]
 8001a98:	1c59      	adds	r1, r3, #1
 8001a9a:	8179      	strh	r1, [r7, #10]
 8001a9c:	461d      	mov	r5, r3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	f000 fef0 	bl	8002884 <NibbleToHex>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	1963      	adds	r3, r4, r5
 8001aaa:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	b2d9      	uxtb	r1, r3
 8001ab2:	4b47      	ldr	r3, [pc, #284]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	8978      	ldrh	r0, [r7, #10]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	3307      	adds	r3, #7
 8001abc:	1ac3      	subs	r3, r0, r3
 8001abe:	3106      	adds	r1, #6
 8001ac0:	b2c9      	uxtb	r1, r1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	460a      	mov	r2, r1
 8001ac6:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8001aca:	4b41      	ldr	r3, [pc, #260]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	897b      	ldrh	r3, [r7, #10]
 8001ad0:	1c59      	adds	r1, r3, #1
 8001ad2:	8179      	strh	r1, [r7, #10]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	2237      	movs	r2, #55	@ 0x37
 8001ad8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 8001adc:	4b3c      	ldr	r3, [pc, #240]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	897b      	ldrh	r3, [r7, #10]
 8001ae2:	1c59      	adds	r1, r3, #1
 8001ae4:	8179      	strh	r1, [r7, #10]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	2208      	movs	r2, #8
 8001aea:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 8001aee:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	897b      	ldrh	r3, [r7, #10]
 8001af4:	1c59      	adds	r1, r3, #1
 8001af6:	8179      	strh	r1, [r7, #10]
 8001af8:	4413      	add	r3, r2
 8001afa:	2201      	movs	r2, #1
 8001afc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 8001b00:	4b33      	ldr	r3, [pc, #204]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	1c59      	adds	r1, r3, #1
 8001b08:	8179      	strh	r1, [r7, #10]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dns;
 8001b12:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	897b      	ldrh	r3, [r7, #10]
 8001b18:	1c59      	adds	r1, r3, #1
 8001b1a:	8179      	strh	r1, [r7, #10]
 8001b1c:	4413      	add	r3, r2
 8001b1e:	2206      	movs	r2, #6
 8001b20:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = domainName;
 8001b24:	4b2a      	ldr	r3, [pc, #168]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	897b      	ldrh	r3, [r7, #10]
 8001b2a:	1c59      	adds	r1, r3, #1
 8001b2c:	8179      	strh	r1, [r7, #10]
 8001b2e:	4413      	add	r3, r2
 8001b30:	220f      	movs	r2, #15
 8001b32:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 8001b36:	4b26      	ldr	r3, [pc, #152]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	1c59      	adds	r1, r3, #1
 8001b3e:	8179      	strh	r1, [r7, #10]
 8001b40:	4413      	add	r3, r2
 8001b42:	223a      	movs	r2, #58	@ 0x3a
 8001b44:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8001b48:	4b21      	ldr	r3, [pc, #132]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	897b      	ldrh	r3, [r7, #10]
 8001b4e:	1c59      	adds	r1, r3, #1
 8001b50:	8179      	strh	r1, [r7, #10]
 8001b52:	4413      	add	r3, r2
 8001b54:	223b      	movs	r2, #59	@ 0x3b
 8001b56:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8001b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	897b      	ldrh	r3, [r7, #10]
 8001b60:	1c59      	adds	r1, r3, #1
 8001b62:	8179      	strh	r1, [r7, #10]
 8001b64:	4413      	add	r3, r2
 8001b66:	221f      	movs	r2, #31
 8001b68:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8001b6c:	4b18      	ldr	r3, [pc, #96]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	897b      	ldrh	r3, [r7, #10]
 8001b72:	1c59      	adds	r1, r3, #1
 8001b74:	8179      	strh	r1, [r7, #10]
 8001b76:	4413      	add	r3, r2
 8001b78:	2221      	movs	r2, #33	@ 0x21
 8001b7a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8001b7e:	4b14      	ldr	r3, [pc, #80]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	897b      	ldrh	r3, [r7, #10]
 8001b84:	1c59      	adds	r1, r3, #1
 8001b86:	8179      	strh	r1, [r7, #10]
 8001b88:	4413      	add	r3, r2
 8001b8a:	22ff      	movs	r2, #255	@ 0xff
 8001b8c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001b90:	897b      	ldrh	r3, [r7, #10]
 8001b92:	60fb      	str	r3, [r7, #12]
 8001b94:	e009      	b.n	8001baa <send_DHCP_REQUEST+0x4de>
 8001b96:	4b0e      	ldr	r3, [pc, #56]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4413      	add	r3, r2
 8001b9e:	33ec      	adds	r3, #236	@ 0xec
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	3301      	adds	r3, #1
 8001ba8:	60fb      	str	r3, [r7, #12]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001bb0:	dbf1      	blt.n	8001b96 <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <send_DHCP_REQUEST+0x510>)
 8001bb4:	7818      	ldrb	r0, [r3, #0]
 8001bb6:	4b06      	ldr	r3, [pc, #24]	@ (8001bd0 <send_DHCP_REQUEST+0x504>)
 8001bb8:	6819      	ldr	r1, [r3, #0]
 8001bba:	1d3b      	adds	r3, r7, #4
 8001bbc:	2243      	movs	r2, #67	@ 0x43
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001bc4:	f001 fcb4 	bl	8003530 <sendto>

}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdb0      	pop	{r4, r5, r7, pc}
 8001bd0:	200009c4 	.word	0x200009c4
 8001bd4:	2000002c 	.word	0x2000002c
 8001bd8:	200009c8 	.word	0x200009c8
 8001bdc:	20000998 	.word	0x20000998

08001be0 <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8001bea:	f7ff fab3 	bl	8001154 <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8001bee:	2304      	movs	r3, #4
 8001bf0:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8001bf2:	4b9f      	ldr	r3, [pc, #636]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	330a      	adds	r3, #10
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8001bfc:	4b9c      	ldr	r3, [pc, #624]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	330a      	adds	r3, #10
 8001c02:	3301      	adds	r3, #1
 8001c04:	2200      	movs	r2, #0
 8001c06:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8001c08:	4b99      	ldr	r3, [pc, #612]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	897b      	ldrh	r3, [r7, #10]
 8001c0e:	1c59      	adds	r1, r3, #1
 8001c10:	8179      	strh	r1, [r7, #10]
 8001c12:	4413      	add	r3, r2
 8001c14:	2235      	movs	r2, #53	@ 0x35
 8001c16:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001c1a:	4b95      	ldr	r3, [pc, #596]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	897b      	ldrh	r3, [r7, #10]
 8001c20:	1c59      	adds	r1, r3, #1
 8001c22:	8179      	strh	r1, [r7, #10]
 8001c24:	4413      	add	r3, r2
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8001c2c:	4b90      	ldr	r3, [pc, #576]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	897b      	ldrh	r3, [r7, #10]
 8001c32:	1c59      	adds	r1, r3, #1
 8001c34:	8179      	strh	r1, [r7, #10]
 8001c36:	4413      	add	r3, r2
 8001c38:	2204      	movs	r2, #4
 8001c3a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8001c3e:	4b8c      	ldr	r3, [pc, #560]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	897b      	ldrh	r3, [r7, #10]
 8001c44:	1c59      	adds	r1, r3, #1
 8001c46:	8179      	strh	r1, [r7, #10]
 8001c48:	4413      	add	r3, r2
 8001c4a:	223d      	movs	r2, #61	@ 0x3d
 8001c4c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8001c50:	4b87      	ldr	r3, [pc, #540]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	897b      	ldrh	r3, [r7, #10]
 8001c56:	1c59      	adds	r1, r3, #1
 8001c58:	8179      	strh	r1, [r7, #10]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	2207      	movs	r2, #7
 8001c5e:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8001c62:	4b83      	ldr	r3, [pc, #524]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	897b      	ldrh	r3, [r7, #10]
 8001c68:	1c59      	adds	r1, r3, #1
 8001c6a:	8179      	strh	r1, [r7, #10]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8001c74:	4b7e      	ldr	r3, [pc, #504]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	897b      	ldrh	r3, [r7, #10]
 8001c7a:	1c59      	adds	r1, r3, #1
 8001c7c:	8179      	strh	r1, [r7, #10]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	4b7c      	ldr	r3, [pc, #496]	@ (8001e74 <send_DHCP_DECLINE+0x294>)
 8001c82:	7819      	ldrb	r1, [r3, #0]
 8001c84:	1813      	adds	r3, r2, r0
 8001c86:	460a      	mov	r2, r1
 8001c88:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8001c8c:	4b78      	ldr	r3, [pc, #480]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	897b      	ldrh	r3, [r7, #10]
 8001c92:	1c59      	adds	r1, r3, #1
 8001c94:	8179      	strh	r1, [r7, #10]
 8001c96:	4618      	mov	r0, r3
 8001c98:	4b76      	ldr	r3, [pc, #472]	@ (8001e74 <send_DHCP_DECLINE+0x294>)
 8001c9a:	7859      	ldrb	r1, [r3, #1]
 8001c9c:	1813      	adds	r3, r2, r0
 8001c9e:	460a      	mov	r2, r1
 8001ca0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8001ca4:	4b72      	ldr	r3, [pc, #456]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	897b      	ldrh	r3, [r7, #10]
 8001caa:	1c59      	adds	r1, r3, #1
 8001cac:	8179      	strh	r1, [r7, #10]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	4b70      	ldr	r3, [pc, #448]	@ (8001e74 <send_DHCP_DECLINE+0x294>)
 8001cb2:	7899      	ldrb	r1, [r3, #2]
 8001cb4:	1813      	adds	r3, r2, r0
 8001cb6:	460a      	mov	r2, r1
 8001cb8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8001cbc:	4b6c      	ldr	r3, [pc, #432]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	897b      	ldrh	r3, [r7, #10]
 8001cc2:	1c59      	adds	r1, r3, #1
 8001cc4:	8179      	strh	r1, [r7, #10]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001e74 <send_DHCP_DECLINE+0x294>)
 8001cca:	78d9      	ldrb	r1, [r3, #3]
 8001ccc:	1813      	adds	r3, r2, r0
 8001cce:	460a      	mov	r2, r1
 8001cd0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8001cd4:	4b66      	ldr	r3, [pc, #408]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	897b      	ldrh	r3, [r7, #10]
 8001cda:	1c59      	adds	r1, r3, #1
 8001cdc:	8179      	strh	r1, [r7, #10]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	4b64      	ldr	r3, [pc, #400]	@ (8001e74 <send_DHCP_DECLINE+0x294>)
 8001ce2:	7919      	ldrb	r1, [r3, #4]
 8001ce4:	1813      	adds	r3, r2, r0
 8001ce6:	460a      	mov	r2, r1
 8001ce8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8001cec:	4b60      	ldr	r3, [pc, #384]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	1c59      	adds	r1, r3, #1
 8001cf4:	8179      	strh	r1, [r7, #10]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	4b5e      	ldr	r3, [pc, #376]	@ (8001e74 <send_DHCP_DECLINE+0x294>)
 8001cfa:	7959      	ldrb	r1, [r3, #5]
 8001cfc:	1813      	adds	r3, r2, r0
 8001cfe:	460a      	mov	r2, r1
 8001d00:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8001d04:	4b5a      	ldr	r3, [pc, #360]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	897b      	ldrh	r3, [r7, #10]
 8001d0a:	1c59      	adds	r1, r3, #1
 8001d0c:	8179      	strh	r1, [r7, #10]
 8001d0e:	4413      	add	r3, r2
 8001d10:	2232      	movs	r2, #50	@ 0x32
 8001d12:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001d16:	4b56      	ldr	r3, [pc, #344]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	897b      	ldrh	r3, [r7, #10]
 8001d1c:	1c59      	adds	r1, r3, #1
 8001d1e:	8179      	strh	r1, [r7, #10]
 8001d20:	4413      	add	r3, r2
 8001d22:	2204      	movs	r2, #4
 8001d24:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8001d28:	4b51      	ldr	r3, [pc, #324]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	897b      	ldrh	r3, [r7, #10]
 8001d2e:	1c59      	adds	r1, r3, #1
 8001d30:	8179      	strh	r1, [r7, #10]
 8001d32:	4618      	mov	r0, r3
 8001d34:	4b50      	ldr	r3, [pc, #320]	@ (8001e78 <send_DHCP_DECLINE+0x298>)
 8001d36:	7819      	ldrb	r1, [r3, #0]
 8001d38:	1813      	adds	r3, r2, r0
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8001d40:	4b4b      	ldr	r3, [pc, #300]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	897b      	ldrh	r3, [r7, #10]
 8001d46:	1c59      	adds	r1, r3, #1
 8001d48:	8179      	strh	r1, [r7, #10]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e78 <send_DHCP_DECLINE+0x298>)
 8001d4e:	7859      	ldrb	r1, [r3, #1]
 8001d50:	1813      	adds	r3, r2, r0
 8001d52:	460a      	mov	r2, r1
 8001d54:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	897b      	ldrh	r3, [r7, #10]
 8001d5e:	1c59      	adds	r1, r3, #1
 8001d60:	8179      	strh	r1, [r7, #10]
 8001d62:	4618      	mov	r0, r3
 8001d64:	4b44      	ldr	r3, [pc, #272]	@ (8001e78 <send_DHCP_DECLINE+0x298>)
 8001d66:	7899      	ldrb	r1, [r3, #2]
 8001d68:	1813      	adds	r3, r2, r0
 8001d6a:	460a      	mov	r2, r1
 8001d6c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8001d70:	4b3f      	ldr	r3, [pc, #252]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	897b      	ldrh	r3, [r7, #10]
 8001d76:	1c59      	adds	r1, r3, #1
 8001d78:	8179      	strh	r1, [r7, #10]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e78 <send_DHCP_DECLINE+0x298>)
 8001d7e:	78d9      	ldrb	r1, [r3, #3]
 8001d80:	1813      	adds	r3, r2, r0
 8001d82:	460a      	mov	r2, r1
 8001d84:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8001d88:	4b39      	ldr	r3, [pc, #228]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	897b      	ldrh	r3, [r7, #10]
 8001d8e:	1c59      	adds	r1, r3, #1
 8001d90:	8179      	strh	r1, [r7, #10]
 8001d92:	4413      	add	r3, r2
 8001d94:	2236      	movs	r2, #54	@ 0x36
 8001d96:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8001d9a:	4b35      	ldr	r3, [pc, #212]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	897b      	ldrh	r3, [r7, #10]
 8001da0:	1c59      	adds	r1, r3, #1
 8001da2:	8179      	strh	r1, [r7, #10]
 8001da4:	4413      	add	r3, r2
 8001da6:	2204      	movs	r2, #4
 8001da8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8001dac:	4b30      	ldr	r3, [pc, #192]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	897b      	ldrh	r3, [r7, #10]
 8001db2:	1c59      	adds	r1, r3, #1
 8001db4:	8179      	strh	r1, [r7, #10]
 8001db6:	4618      	mov	r0, r3
 8001db8:	4b30      	ldr	r3, [pc, #192]	@ (8001e7c <send_DHCP_DECLINE+0x29c>)
 8001dba:	7819      	ldrb	r1, [r3, #0]
 8001dbc:	1813      	adds	r3, r2, r0
 8001dbe:	460a      	mov	r2, r1
 8001dc0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	897b      	ldrh	r3, [r7, #10]
 8001dca:	1c59      	adds	r1, r3, #1
 8001dcc:	8179      	strh	r1, [r7, #10]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <send_DHCP_DECLINE+0x29c>)
 8001dd2:	7859      	ldrb	r1, [r3, #1]
 8001dd4:	1813      	adds	r3, r2, r0
 8001dd6:	460a      	mov	r2, r1
 8001dd8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8001ddc:	4b24      	ldr	r3, [pc, #144]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	1c59      	adds	r1, r3, #1
 8001de4:	8179      	strh	r1, [r7, #10]
 8001de6:	4618      	mov	r0, r3
 8001de8:	4b24      	ldr	r3, [pc, #144]	@ (8001e7c <send_DHCP_DECLINE+0x29c>)
 8001dea:	7899      	ldrb	r1, [r3, #2]
 8001dec:	1813      	adds	r3, r2, r0
 8001dee:	460a      	mov	r2, r1
 8001df0:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8001df4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	897b      	ldrh	r3, [r7, #10]
 8001dfa:	1c59      	adds	r1, r3, #1
 8001dfc:	8179      	strh	r1, [r7, #10]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	4b1e      	ldr	r3, [pc, #120]	@ (8001e7c <send_DHCP_DECLINE+0x29c>)
 8001e02:	78d9      	ldrb	r1, [r3, #3]
 8001e04:	1813      	adds	r3, r2, r0
 8001e06:	460a      	mov	r2, r1
 8001e08:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8001e0c:	4b18      	ldr	r3, [pc, #96]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	897b      	ldrh	r3, [r7, #10]
 8001e12:	1c59      	adds	r1, r3, #1
 8001e14:	8179      	strh	r1, [r7, #10]
 8001e16:	4413      	add	r3, r2
 8001e18:	22ff      	movs	r2, #255	@ 0xff
 8001e1a:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8001e1e:	897b      	ldrh	r3, [r7, #10]
 8001e20:	60fb      	str	r3, [r7, #12]
 8001e22:	e009      	b.n	8001e38 <send_DHCP_DECLINE+0x258>
 8001e24:	4b12      	ldr	r3, [pc, #72]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4413      	add	r3, r2
 8001e2c:	33ec      	adds	r3, #236	@ 0xec
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3301      	adds	r3, #1
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f5b3 7f9c 	cmp.w	r3, #312	@ 0x138
 8001e3e:	dbf1      	blt.n	8001e24 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8001e40:	23ff      	movs	r3, #255	@ 0xff
 8001e42:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8001e44:	23ff      	movs	r3, #255	@ 0xff
 8001e46:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8001e48:	23ff      	movs	r3, #255	@ 0xff
 8001e4a:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8001e4c:	23ff      	movs	r3, #255	@ 0xff
 8001e4e:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8001e50:	4b0b      	ldr	r3, [pc, #44]	@ (8001e80 <send_DHCP_DECLINE+0x2a0>)
 8001e52:	7818      	ldrb	r0, [r3, #0]
 8001e54:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <send_DHCP_DECLINE+0x290>)
 8001e56:	6819      	ldr	r1, [r3, #0]
 8001e58:	1d3b      	adds	r3, r7, #4
 8001e5a:	2243      	movs	r2, #67	@ 0x43
 8001e5c:	9200      	str	r2, [sp, #0]
 8001e5e:	f44f 7209 	mov.w	r2, #548	@ 0x224
 8001e62:	f001 fb65 	bl	8003530 <sendto>
}
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	200009c4 	.word	0x200009c4
 8001e74:	200009c8 	.word	0x200009c8
 8001e78:	200009a8 	.word	0x200009a8
 8001e7c:	2000099c 	.word	0x2000099c
 8001e80:	20000998 	.word	0x20000998

08001e84 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8001e84:	b590      	push	{r4, r7, lr}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8001e8e:	4ba1      	ldr	r3, [pc, #644]	@ (8002114 <parseDHCPMSG+0x290>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 feb3 	bl	8002bfe <getSn_RX_RSR>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	823b      	strh	r3, [r7, #16]
 8001e9c:	8a3b      	ldrh	r3, [r7, #16]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d011      	beq.n	8001ec6 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8001ea2:	4b9c      	ldr	r3, [pc, #624]	@ (8002114 <parseDHCPMSG+0x290>)
 8001ea4:	7818      	ldrb	r0, [r3, #0]
 8001ea6:	4b9c      	ldr	r3, [pc, #624]	@ (8002118 <parseDHCPMSG+0x294>)
 8001ea8:	6819      	ldr	r1, [r3, #0]
 8001eaa:	1d3c      	adds	r4, r7, #4
 8001eac:	8a3a      	ldrh	r2, [r7, #16]
 8001eae:	1cbb      	adds	r3, r7, #2
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	4623      	mov	r3, r4
 8001eb4:	f001 fc70 	bl	8003798 <recvfrom>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8001ebc:	887b      	ldrh	r3, [r7, #2]
 8001ebe:	2b43      	cmp	r3, #67	@ 0x43
 8001ec0:	f040 81ed 	bne.w	800229e <parseDHCPMSG+0x41a>
 8001ec4:	e001      	b.n	8001eca <parseDHCPMSG+0x46>
   else return 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e1eb      	b.n	80022a2 <parseDHCPMSG+0x41e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001eca:	4b93      	ldr	r3, [pc, #588]	@ (8002118 <parseDHCPMSG+0x294>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	7f1a      	ldrb	r2, [r3, #28]
 8001ed0:	4b92      	ldr	r3, [pc, #584]	@ (800211c <parseDHCPMSG+0x298>)
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d124      	bne.n	8001f22 <parseDHCPMSG+0x9e>
 8001ed8:	4b8f      	ldr	r3, [pc, #572]	@ (8002118 <parseDHCPMSG+0x294>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	7f5a      	ldrb	r2, [r3, #29]
 8001ede:	4b8f      	ldr	r3, [pc, #572]	@ (800211c <parseDHCPMSG+0x298>)
 8001ee0:	785b      	ldrb	r3, [r3, #1]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d11d      	bne.n	8001f22 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001ee6:	4b8c      	ldr	r3, [pc, #560]	@ (8002118 <parseDHCPMSG+0x294>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	7f9a      	ldrb	r2, [r3, #30]
 8001eec:	4b8b      	ldr	r3, [pc, #556]	@ (800211c <parseDHCPMSG+0x298>)
 8001eee:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d116      	bne.n	8001f22 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001ef4:	4b88      	ldr	r3, [pc, #544]	@ (8002118 <parseDHCPMSG+0x294>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	7fda      	ldrb	r2, [r3, #31]
 8001efa:	4b88      	ldr	r3, [pc, #544]	@ (800211c <parseDHCPMSG+0x298>)
 8001efc:	78db      	ldrb	r3, [r3, #3]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d10f      	bne.n	8001f22 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001f02:	4b85      	ldr	r3, [pc, #532]	@ (8002118 <parseDHCPMSG+0x294>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f893 2020 	ldrb.w	r2, [r3, #32]
 8001f0a:	4b84      	ldr	r3, [pc, #528]	@ (800211c <parseDHCPMSG+0x298>)
 8001f0c:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d107      	bne.n	8001f22 <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8001f12:	4b81      	ldr	r3, [pc, #516]	@ (8002118 <parseDHCPMSG+0x294>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001f1a:	4b80      	ldr	r3, [pc, #512]	@ (800211c <parseDHCPMSG+0x298>)
 8001f1c:	795b      	ldrb	r3, [r3, #5]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d001      	beq.n	8001f26 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8001f22:	2300      	movs	r3, #0
 8001f24:	e1bd      	b.n	80022a2 <parseDHCPMSG+0x41e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8001f26:	4b7e      	ldr	r3, [pc, #504]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10b      	bne.n	8001f46 <parseDHCPMSG+0xc2>
 8001f2e:	4b7c      	ldr	r3, [pc, #496]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f30:	785b      	ldrb	r3, [r3, #1]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d107      	bne.n	8001f46 <parseDHCPMSG+0xc2>
 8001f36:	4b7a      	ldr	r3, [pc, #488]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f38:	789b      	ldrb	r3, [r3, #2]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d103      	bne.n	8001f46 <parseDHCPMSG+0xc2>
 8001f3e:	4b78      	ldr	r3, [pc, #480]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f40:	78db      	ldrb	r3, [r3, #3]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d029      	beq.n	8001f9a <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001f46:	793a      	ldrb	r2, [r7, #4]
 8001f48:	4b75      	ldr	r3, [pc, #468]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d10e      	bne.n	8001f6e <parseDHCPMSG+0xea>
 8001f50:	797a      	ldrb	r2, [r7, #5]
 8001f52:	4b73      	ldr	r3, [pc, #460]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f54:	785b      	ldrb	r3, [r3, #1]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d109      	bne.n	8001f6e <parseDHCPMSG+0xea>
 8001f5a:	79ba      	ldrb	r2, [r7, #6]
 8001f5c:	4b70      	ldr	r3, [pc, #448]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f5e:	789b      	ldrb	r3, [r3, #2]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d104      	bne.n	8001f6e <parseDHCPMSG+0xea>
 8001f64:	79fa      	ldrb	r2, [r7, #7]
 8001f66:	4b6e      	ldr	r3, [pc, #440]	@ (8002120 <parseDHCPMSG+0x29c>)
 8001f68:	78db      	ldrb	r3, [r3, #3]
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d015      	beq.n	8001f9a <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001f6e:	793a      	ldrb	r2, [r7, #4]
 8001f70:	4b6c      	ldr	r3, [pc, #432]	@ (8002124 <parseDHCPMSG+0x2a0>)
 8001f72:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d10e      	bne.n	8001f96 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8001f78:	797a      	ldrb	r2, [r7, #5]
 8001f7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002124 <parseDHCPMSG+0x2a0>)
 8001f7c:	785b      	ldrb	r3, [r3, #1]
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d109      	bne.n	8001f96 <parseDHCPMSG+0x112>
 8001f82:	79ba      	ldrb	r2, [r7, #6]
 8001f84:	4b67      	ldr	r3, [pc, #412]	@ (8002124 <parseDHCPMSG+0x2a0>)
 8001f86:	789b      	ldrb	r3, [r3, #2]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d104      	bne.n	8001f96 <parseDHCPMSG+0x112>
 8001f8c:	79fa      	ldrb	r2, [r7, #7]
 8001f8e:	4b65      	ldr	r3, [pc, #404]	@ (8002124 <parseDHCPMSG+0x2a0>)
 8001f90:	78db      	ldrb	r3, [r3, #3]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d001      	beq.n	8001f9a <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	e183      	b.n	80022a2 <parseDHCPMSG+0x41e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8001f9a:	4b5f      	ldr	r3, [pc, #380]	@ (8002118 <parseDHCPMSG+0x294>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	33f0      	adds	r3, #240	@ 0xf0
 8001fa4:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8001fa6:	8a3b      	ldrh	r3, [r7, #16]
 8001fa8:	3bf0      	subs	r3, #240	@ 0xf0
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	4413      	add	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8001fb0:	e170      	b.n	8002294 <parseDHCPMSG+0x410>

			switch ( *p ) {
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	2b36      	cmp	r3, #54	@ 0x36
 8001fb8:	dc76      	bgt.n	80020a8 <parseDHCPMSG+0x224>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f2c0 815d 	blt.w	800227a <parseDHCPMSG+0x3f6>
 8001fc0:	2b36      	cmp	r3, #54	@ 0x36
 8001fc2:	f200 815a 	bhi.w	800227a <parseDHCPMSG+0x3f6>
 8001fc6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fcc <parseDHCPMSG+0x148>)
 8001fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fcc:	080020b5 	.word	0x080020b5
 8001fd0:	080020d5 	.word	0x080020d5
 8001fd4:	0800227b 	.word	0x0800227b
 8001fd8:	0800212d 	.word	0x0800212d
 8001fdc:	0800227b 	.word	0x0800227b
 8001fe0:	0800227b 	.word	0x0800227b
 8001fe4:	08002179 	.word	0x08002179
 8001fe8:	0800227b 	.word	0x0800227b
 8001fec:	0800227b 	.word	0x0800227b
 8001ff0:	0800227b 	.word	0x0800227b
 8001ff4:	0800227b 	.word	0x0800227b
 8001ff8:	0800227b 	.word	0x0800227b
 8001ffc:	0800227b 	.word	0x0800227b
 8002000:	0800227b 	.word	0x0800227b
 8002004:	0800227b 	.word	0x0800227b
 8002008:	0800227b 	.word	0x0800227b
 800200c:	0800227b 	.word	0x0800227b
 8002010:	0800227b 	.word	0x0800227b
 8002014:	0800227b 	.word	0x0800227b
 8002018:	0800227b 	.word	0x0800227b
 800201c:	0800227b 	.word	0x0800227b
 8002020:	0800227b 	.word	0x0800227b
 8002024:	0800227b 	.word	0x0800227b
 8002028:	0800227b 	.word	0x0800227b
 800202c:	0800227b 	.word	0x0800227b
 8002030:	0800227b 	.word	0x0800227b
 8002034:	0800227b 	.word	0x0800227b
 8002038:	0800227b 	.word	0x0800227b
 800203c:	0800227b 	.word	0x0800227b
 8002040:	0800227b 	.word	0x0800227b
 8002044:	0800227b 	.word	0x0800227b
 8002048:	0800227b 	.word	0x0800227b
 800204c:	0800227b 	.word	0x0800227b
 8002050:	0800227b 	.word	0x0800227b
 8002054:	0800227b 	.word	0x0800227b
 8002058:	0800227b 	.word	0x0800227b
 800205c:	0800227b 	.word	0x0800227b
 8002060:	0800227b 	.word	0x0800227b
 8002064:	0800227b 	.word	0x0800227b
 8002068:	0800227b 	.word	0x0800227b
 800206c:	0800227b 	.word	0x0800227b
 8002070:	0800227b 	.word	0x0800227b
 8002074:	0800227b 	.word	0x0800227b
 8002078:	0800227b 	.word	0x0800227b
 800207c:	0800227b 	.word	0x0800227b
 8002080:	0800227b 	.word	0x0800227b
 8002084:	0800227b 	.word	0x0800227b
 8002088:	0800227b 	.word	0x0800227b
 800208c:	0800227b 	.word	0x0800227b
 8002090:	0800227b 	.word	0x0800227b
 8002094:	0800227b 	.word	0x0800227b
 8002098:	080021c5 	.word	0x080021c5
 800209c:	0800227b 	.word	0x0800227b
 80020a0:	080020bd 	.word	0x080020bd
 80020a4:	08002221 	.word	0x08002221
 80020a8:	2bff      	cmp	r3, #255	@ 0xff
 80020aa:	f040 80e6 	bne.w	800227a <parseDHCPMSG+0x3f6>

   			case endOption :
   			   p = e;   // for break while(p < e)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	617b      	str	r3, [r7, #20]
   				break;
 80020b2:	e0ef      	b.n	8002294 <parseDHCPMSG+0x410>
            case padOption :
   				p++;
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
   				break;
 80020ba:	e0eb      	b.n	8002294 <parseDHCPMSG+0x410>
   			case dhcpMessageType :
   				p++;
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	3301      	adds	r3, #1
 80020c0:	617b      	str	r3, [r7, #20]
   				p++;
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	3301      	adds	r3, #1
 80020c6:	617b      	str	r3, [r7, #20]
   				type = *p++;
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	617a      	str	r2, [r7, #20]
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	74fb      	strb	r3, [r7, #19]
   				break;
 80020d2:	e0df      	b.n	8002294 <parseDHCPMSG+0x410>
   			case subnetMask :
   				p++;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
   				p++;
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	3301      	adds	r3, #1
 80020de:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	617a      	str	r2, [r7, #20]
 80020e6:	781a      	ldrb	r2, [r3, #0]
 80020e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <parseDHCPMSG+0x2a4>)
 80020ea:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	1c5a      	adds	r2, r3, #1
 80020f0:	617a      	str	r2, [r7, #20]
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002128 <parseDHCPMSG+0x2a4>)
 80020f6:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	1c5a      	adds	r2, r3, #1
 80020fc:	617a      	str	r2, [r7, #20]
 80020fe:	781a      	ldrb	r2, [r3, #0]
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <parseDHCPMSG+0x2a4>)
 8002102:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	1c5a      	adds	r2, r3, #1
 8002108:	617a      	str	r2, [r7, #20]
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <parseDHCPMSG+0x2a4>)
 800210e:	70da      	strb	r2, [r3, #3]
   				break;
 8002110:	e0c0      	b.n	8002294 <parseDHCPMSG+0x410>
 8002112:	bf00      	nop
 8002114:	20000998 	.word	0x20000998
 8002118:	200009c4 	.word	0x200009c4
 800211c:	200009c8 	.word	0x200009c8
 8002120:	2000099c 	.word	0x2000099c
 8002124:	200009a0 	.word	0x200009a0
 8002128:	200009b0 	.word	0x200009b0
   			case routersOnSubnet :
   				p++;
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	3301      	adds	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	1c5a      	adds	r2, r3, #1
 8002136:	617a      	str	r2, [r7, #20]
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	1c5a      	adds	r2, r3, #1
 8002140:	617a      	str	r2, [r7, #20]
 8002142:	781a      	ldrb	r2, [r3, #0]
 8002144:	4b59      	ldr	r3, [pc, #356]	@ (80022ac <parseDHCPMSG+0x428>)
 8002146:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	617a      	str	r2, [r7, #20]
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	4b56      	ldr	r3, [pc, #344]	@ (80022ac <parseDHCPMSG+0x428>)
 8002152:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	617a      	str	r2, [r7, #20]
 800215a:	781a      	ldrb	r2, [r3, #0]
 800215c:	4b53      	ldr	r3, [pc, #332]	@ (80022ac <parseDHCPMSG+0x428>)
 800215e:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	617a      	str	r2, [r7, #20]
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	4b50      	ldr	r3, [pc, #320]	@ (80022ac <parseDHCPMSG+0x428>)
 800216a:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 800216c:	7afb      	ldrb	r3, [r7, #11]
 800216e:	3b04      	subs	r3, #4
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	4413      	add	r3, r2
 8002174:	617b      	str	r3, [r7, #20]
   				break;
 8002176:	e08d      	b.n	8002294 <parseDHCPMSG+0x410>
   			case dns :
   				p++;                  
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3301      	adds	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	1c5a      	adds	r2, r3, #1
 8002182:	617a      	str	r2, [r7, #20]
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	617a      	str	r2, [r7, #20]
 800218e:	781a      	ldrb	r2, [r3, #0]
 8002190:	4b47      	ldr	r3, [pc, #284]	@ (80022b0 <parseDHCPMSG+0x42c>)
 8002192:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	617a      	str	r2, [r7, #20]
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	4b44      	ldr	r3, [pc, #272]	@ (80022b0 <parseDHCPMSG+0x42c>)
 800219e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	617a      	str	r2, [r7, #20]
 80021a6:	781a      	ldrb	r2, [r3, #0]
 80021a8:	4b41      	ldr	r3, [pc, #260]	@ (80022b0 <parseDHCPMSG+0x42c>)
 80021aa:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	1c5a      	adds	r2, r3, #1
 80021b0:	617a      	str	r2, [r7, #20]
 80021b2:	781a      	ldrb	r2, [r3, #0]
 80021b4:	4b3e      	ldr	r3, [pc, #248]	@ (80022b0 <parseDHCPMSG+0x42c>)
 80021b6:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 80021b8:	7afb      	ldrb	r3, [r7, #11]
 80021ba:	3b04      	subs	r3, #4
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4413      	add	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]
   				break;
 80021c2:	e067      	b.n	8002294 <parseDHCPMSG+0x410>
   			case dhcpIPaddrLeaseTime :
   				p++;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	3301      	adds	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	1c5a      	adds	r2, r3, #1
 80021ce:	617a      	str	r2, [r7, #20]
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	617a      	str	r2, [r7, #20]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	461a      	mov	r2, r3
 80021de:	4b35      	ldr	r3, [pc, #212]	@ (80022b4 <parseDHCPMSG+0x430>)
 80021e0:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80021e2:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <parseDHCPMSG+0x430>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	021a      	lsls	r2, r3, #8
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	1c59      	adds	r1, r3, #1
 80021ec:	6179      	str	r1, [r7, #20]
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a30      	ldr	r2, [pc, #192]	@ (80022b4 <parseDHCPMSG+0x430>)
 80021f4:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 80021f6:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <parseDHCPMSG+0x430>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	021a      	lsls	r2, r3, #8
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	1c59      	adds	r1, r3, #1
 8002200:	6179      	str	r1, [r7, #20]
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4413      	add	r3, r2
 8002206:	4a2b      	ldr	r2, [pc, #172]	@ (80022b4 <parseDHCPMSG+0x430>)
 8002208:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <parseDHCPMSG+0x430>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	021a      	lsls	r2, r3, #8
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	1c59      	adds	r1, r3, #1
 8002214:	6179      	str	r1, [r7, #20]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	4413      	add	r3, r2
 800221a:	4a26      	ldr	r2, [pc, #152]	@ (80022b4 <parseDHCPMSG+0x430>)
 800221c:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800221e:	e039      	b.n	8002294 <parseDHCPMSG+0x410>
   			case dhcpServerIdentifier :
   				p++;
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	3301      	adds	r3, #1
 8002224:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	617a      	str	r2, [r7, #20]
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	617a      	str	r2, [r7, #20]
 8002236:	781a      	ldrb	r2, [r3, #0]
 8002238:	4b1f      	ldr	r3, [pc, #124]	@ (80022b8 <parseDHCPMSG+0x434>)
 800223a:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	617a      	str	r2, [r7, #20]
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <parseDHCPMSG+0x434>)
 8002246:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	617a      	str	r2, [r7, #20]
 800224e:	781a      	ldrb	r2, [r3, #0]
 8002250:	4b19      	ldr	r3, [pc, #100]	@ (80022b8 <parseDHCPMSG+0x434>)
 8002252:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	617a      	str	r2, [r7, #20]
 800225a:	781a      	ldrb	r2, [r3, #0]
 800225c:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <parseDHCPMSG+0x434>)
 800225e:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 8002260:	793a      	ldrb	r2, [r7, #4]
 8002262:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <parseDHCPMSG+0x438>)
 8002264:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8002266:	797a      	ldrb	r2, [r7, #5]
 8002268:	4b14      	ldr	r3, [pc, #80]	@ (80022bc <parseDHCPMSG+0x438>)
 800226a:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 800226c:	79ba      	ldrb	r2, [r7, #6]
 800226e:	4b13      	ldr	r3, [pc, #76]	@ (80022bc <parseDHCPMSG+0x438>)
 8002270:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 8002272:	79fa      	ldrb	r2, [r7, #7]
 8002274:	4b11      	ldr	r3, [pc, #68]	@ (80022bc <parseDHCPMSG+0x438>)
 8002276:	70da      	strb	r2, [r3, #3]
   				break;
 8002278:	e00c      	b.n	8002294 <parseDHCPMSG+0x410>
   			default :
   				p++;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	3301      	adds	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	617a      	str	r2, [r7, #20]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 800228a:	7afb      	ldrb	r3, [r7, #11]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	4413      	add	r3, r2
 8002290:	617b      	str	r3, [r7, #20]
   				break;
 8002292:	bf00      	nop
		while ( p < e ) {
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	429a      	cmp	r2, r3
 800229a:	f4ff ae8a 	bcc.w	8001fb2 <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 800229e:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd90      	pop	{r4, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200009ac 	.word	0x200009ac
 80022b0:	200009b4 	.word	0x200009b4
 80022b4:	20000024 	.word	0x20000024
 80022b8:	2000099c 	.word	0x2000099c
 80022bc:	200009a0 	.word	0x200009a0

080022c0 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80022c6:	4b7f      	ldr	r3, [pc, #508]	@ (80024c4 <DHCP_run+0x204>)
 80022c8:	f993 3000 	ldrsb.w	r3, [r3]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d101      	bne.n	80022d4 <DHCP_run+0x14>
 80022d0:	2305      	movs	r3, #5
 80022d2:	e0f3      	b.n	80024bc <DHCP_run+0x1fc>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80022d4:	4b7c      	ldr	r3, [pc, #496]	@ (80024c8 <DHCP_run+0x208>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	3301      	adds	r3, #1
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80022e2:	4618      	mov	r0, r3
 80022e4:	f000 fae8 	bl	80028b8 <WIZCHIP_READ>
 80022e8:	4603      	mov	r3, r0
 80022ea:	2b22      	cmp	r3, #34	@ 0x22
 80022ec:	d006      	beq.n	80022fc <DHCP_run+0x3c>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80022ee:	4b76      	ldr	r3, [pc, #472]	@ (80024c8 <DHCP_run+0x208>)
 80022f0:	7818      	ldrb	r0, [r3, #0]
 80022f2:	2300      	movs	r3, #0
 80022f4:	2244      	movs	r2, #68	@ 0x44
 80022f6:	2102      	movs	r1, #2
 80022f8:	f000 fdc4 	bl	8002e84 <socket>

	ret = DHCP_RUNNING;
 80022fc:	2301      	movs	r3, #1
 80022fe:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8002300:	f7ff fdc0 	bl	8001e84 <parseDHCPMSG>
 8002304:	4603      	mov	r3, r0
 8002306:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8002308:	4b6e      	ldr	r3, [pc, #440]	@ (80024c4 <DHCP_run+0x204>)
 800230a:	f993 3000 	ldrsb.w	r3, [r3]
 800230e:	2b04      	cmp	r3, #4
 8002310:	f200 80d0 	bhi.w	80024b4 <DHCP_run+0x1f4>
 8002314:	a201      	add	r2, pc, #4	@ (adr r2, 800231c <DHCP_run+0x5c>)
 8002316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231a:	bf00      	nop
 800231c:	08002331 	.word	0x08002331
 8002320:	08002355 	.word	0x08002355
 8002324:	08002399 	.word	0x08002399
 8002328:	080023e9 	.word	0x080023e9
 800232c:	08002443 	.word	0x08002443
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8002330:	4b66      	ldr	r3, [pc, #408]	@ (80024cc <DHCP_run+0x20c>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8002336:	4b65      	ldr	r3, [pc, #404]	@ (80024cc <DHCP_run+0x20c>)
 8002338:	2200      	movs	r2, #0
 800233a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800233c:	4b63      	ldr	r3, [pc, #396]	@ (80024cc <DHCP_run+0x20c>)
 800233e:	2200      	movs	r2, #0
 8002340:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8002342:	4b62      	ldr	r3, [pc, #392]	@ (80024cc <DHCP_run+0x20c>)
 8002344:	2200      	movs	r2, #0
 8002346:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8002348:	f7fe fffa 	bl	8001340 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800234c:	4b5d      	ldr	r3, [pc, #372]	@ (80024c4 <DHCP_run+0x204>)
 800234e:	2201      	movs	r2, #1
 8002350:	701a      	strb	r2, [r3, #0]
   		break;
 8002352:	e0b2      	b.n	80024ba <DHCP_run+0x1fa>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8002354:	79bb      	ldrb	r3, [r7, #6]
 8002356:	2b02      	cmp	r3, #2
 8002358:	d119      	bne.n	800238e <DHCP_run+0xce>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800235a:	4b5d      	ldr	r3, [pc, #372]	@ (80024d0 <DHCP_run+0x210>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	7c1a      	ldrb	r2, [r3, #16]
 8002360:	4b5a      	ldr	r3, [pc, #360]	@ (80024cc <DHCP_run+0x20c>)
 8002362:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8002364:	4b5a      	ldr	r3, [pc, #360]	@ (80024d0 <DHCP_run+0x210>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	7c5a      	ldrb	r2, [r3, #17]
 800236a:	4b58      	ldr	r3, [pc, #352]	@ (80024cc <DHCP_run+0x20c>)
 800236c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800236e:	4b58      	ldr	r3, [pc, #352]	@ (80024d0 <DHCP_run+0x210>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	7c9a      	ldrb	r2, [r3, #18]
 8002374:	4b55      	ldr	r3, [pc, #340]	@ (80024cc <DHCP_run+0x20c>)
 8002376:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8002378:	4b55      	ldr	r3, [pc, #340]	@ (80024d0 <DHCP_run+0x210>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	7cda      	ldrb	r2, [r3, #19]
 800237e:	4b53      	ldr	r3, [pc, #332]	@ (80024cc <DHCP_run+0x20c>)
 8002380:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8002382:	f7ff f9a3 	bl	80016cc <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8002386:	4b4f      	ldr	r3, [pc, #316]	@ (80024c4 <DHCP_run+0x204>)
 8002388:	2202      	movs	r2, #2
 800238a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800238c:	e095      	b.n	80024ba <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 800238e:	f000 f8b1 	bl	80024f4 <check_DHCP_timeout>
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
         break;
 8002396:	e090      	b.n	80024ba <DHCP_run+0x1fa>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8002398:	79bb      	ldrb	r3, [r7, #6]
 800239a:	2b05      	cmp	r3, #5
 800239c:	d116      	bne.n	80023cc <DHCP_run+0x10c>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800239e:	f000 f909 	bl	80025b4 <check_DHCP_leasedIP>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <DHCP_run+0xfa>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80023a8:	4b4a      	ldr	r3, [pc, #296]	@ (80024d4 <DHCP_run+0x214>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4798      	blx	r3
					reset_DHCP_timeout();
 80023ae:	f000 f9d3 	bl	8002758 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80023b2:	4b44      	ldr	r3, [pc, #272]	@ (80024c4 <DHCP_run+0x204>)
 80023b4:	2203      	movs	r2, #3
 80023b6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80023b8:	e07f      	b.n	80024ba <DHCP_run+0x1fa>
					reset_DHCP_timeout();
 80023ba:	f000 f9cd 	bl	8002758 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80023be:	4b46      	ldr	r3, [pc, #280]	@ (80024d8 <DHCP_run+0x218>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80023c4:	4b3f      	ldr	r3, [pc, #252]	@ (80024c4 <DHCP_run+0x204>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]
		break;
 80023ca:	e076      	b.n	80024ba <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 80023cc:	79bb      	ldrb	r3, [r7, #6]
 80023ce:	2b06      	cmp	r3, #6
 80023d0:	d105      	bne.n	80023de <DHCP_run+0x11e>
				reset_DHCP_timeout();
 80023d2:	f000 f9c1 	bl	8002758 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80023d6:	4b3b      	ldr	r3, [pc, #236]	@ (80024c4 <DHCP_run+0x204>)
 80023d8:	2201      	movs	r2, #1
 80023da:	701a      	strb	r2, [r3, #0]
		break;
 80023dc:	e06d      	b.n	80024ba <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80023de:	f000 f889 	bl	80024f4 <check_DHCP_timeout>
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
		break;
 80023e6:	e068      	b.n	80024ba <DHCP_run+0x1fa>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80023e8:	2304      	movs	r3, #4
 80023ea:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80023ec:	4b3b      	ldr	r3, [pc, #236]	@ (80024dc <DHCP_run+0x21c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f4:	d060      	beq.n	80024b8 <DHCP_run+0x1f8>
 80023f6:	4b39      	ldr	r3, [pc, #228]	@ (80024dc <DHCP_run+0x21c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	085a      	lsrs	r2, r3, #1
 80023fc:	4b38      	ldr	r3, [pc, #224]	@ (80024e0 <DHCP_run+0x220>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d259      	bcs.n	80024b8 <DHCP_run+0x1f8>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8002408:	4b30      	ldr	r3, [pc, #192]	@ (80024cc <DHCP_run+0x20c>)
 800240a:	781a      	ldrb	r2, [r3, #0]
 800240c:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <DHCP_run+0x224>)
 800240e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8002410:	4b2e      	ldr	r3, [pc, #184]	@ (80024cc <DHCP_run+0x20c>)
 8002412:	785a      	ldrb	r2, [r3, #1]
 8002414:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <DHCP_run+0x224>)
 8002416:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8002418:	4b2c      	ldr	r3, [pc, #176]	@ (80024cc <DHCP_run+0x20c>)
 800241a:	789a      	ldrb	r2, [r3, #2]
 800241c:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <DHCP_run+0x224>)
 800241e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8002420:	4b2a      	ldr	r3, [pc, #168]	@ (80024cc <DHCP_run+0x20c>)
 8002422:	78da      	ldrb	r2, [r3, #3]
 8002424:	4b2f      	ldr	r3, [pc, #188]	@ (80024e4 <DHCP_run+0x224>)
 8002426:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8002428:	4b2f      	ldr	r3, [pc, #188]	@ (80024e8 <DHCP_run+0x228>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	3301      	adds	r3, #1
 800242e:	4a2e      	ldr	r2, [pc, #184]	@ (80024e8 <DHCP_run+0x228>)
 8002430:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8002432:	f7ff f94b 	bl	80016cc <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8002436:	f000 f98f 	bl	8002758 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800243a:	4b22      	ldr	r3, [pc, #136]	@ (80024c4 <DHCP_run+0x204>)
 800243c:	2204      	movs	r2, #4
 800243e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002440:	e03a      	b.n	80024b8 <DHCP_run+0x1f8>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8002442:	2304      	movs	r3, #4
 8002444:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8002446:	79bb      	ldrb	r3, [r7, #6]
 8002448:	2b05      	cmp	r3, #5
 800244a:	d125      	bne.n	8002498 <DHCP_run+0x1d8>
				dhcp_retry_count = 0;
 800244c:	4b27      	ldr	r3, [pc, #156]	@ (80024ec <DHCP_run+0x22c>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002452:	4b24      	ldr	r3, [pc, #144]	@ (80024e4 <DHCP_run+0x224>)
 8002454:	781a      	ldrb	r2, [r3, #0]
 8002456:	4b1d      	ldr	r3, [pc, #116]	@ (80024cc <DHCP_run+0x20c>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d111      	bne.n	8002482 <DHCP_run+0x1c2>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800245e:	4b21      	ldr	r3, [pc, #132]	@ (80024e4 <DHCP_run+0x224>)
 8002460:	785a      	ldrb	r2, [r3, #1]
 8002462:	4b1a      	ldr	r3, [pc, #104]	@ (80024cc <DHCP_run+0x20c>)
 8002464:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8002466:	429a      	cmp	r2, r3
 8002468:	d10b      	bne.n	8002482 <DHCP_run+0x1c2>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <DHCP_run+0x224>)
 800246c:	789a      	ldrb	r2, [r3, #2]
 800246e:	4b17      	ldr	r3, [pc, #92]	@ (80024cc <DHCP_run+0x20c>)
 8002470:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d105      	bne.n	8002482 <DHCP_run+0x1c2>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8002476:	4b1b      	ldr	r3, [pc, #108]	@ (80024e4 <DHCP_run+0x224>)
 8002478:	78da      	ldrb	r2, [r3, #3]
 800247a:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <DHCP_run+0x20c>)
 800247c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800247e:	429a      	cmp	r2, r3
 8002480:	d004      	beq.n	800248c <DHCP_run+0x1cc>
				{
					ret = DHCP_IP_CHANGED;
 8002482:	2303      	movs	r3, #3
 8002484:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8002486:	4b1a      	ldr	r3, [pc, #104]	@ (80024f0 <DHCP_run+0x230>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800248c:	f000 f964 	bl	8002758 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8002490:	4b0c      	ldr	r3, [pc, #48]	@ (80024c4 <DHCP_run+0x204>)
 8002492:	2203      	movs	r2, #3
 8002494:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8002496:	e010      	b.n	80024ba <DHCP_run+0x1fa>
			} else if (type == DHCP_NAK) {
 8002498:	79bb      	ldrb	r3, [r7, #6]
 800249a:	2b06      	cmp	r3, #6
 800249c:	d105      	bne.n	80024aa <DHCP_run+0x1ea>
				reset_DHCP_timeout();
 800249e:	f000 f95b 	bl	8002758 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80024a2:	4b08      	ldr	r3, [pc, #32]	@ (80024c4 <DHCP_run+0x204>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
	   	break;
 80024a8:	e007      	b.n	80024ba <DHCP_run+0x1fa>
			} else ret = check_DHCP_timeout();
 80024aa:	f000 f823 	bl	80024f4 <check_DHCP_timeout>
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80024b2:	e002      	b.n	80024ba <DHCP_run+0x1fa>
		default :
   		break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <DHCP_run+0x1fa>
		break;
 80024b8:	bf00      	nop
	}

	return ret;
 80024ba:	79fb      	ldrb	r3, [r7, #7]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	200009b8 	.word	0x200009b8
 80024c8:	20000998 	.word	0x20000998
 80024cc:	200009a8 	.word	0x200009a8
 80024d0:	200009c4 	.word	0x200009c4
 80024d4:	20000034 	.word	0x20000034
 80024d8:	2000003c 	.word	0x2000003c
 80024dc:	20000024 	.word	0x20000024
 80024e0:	200009bc 	.word	0x200009bc
 80024e4:	200009a4 	.word	0x200009a4
 80024e8:	200009c0 	.word	0x200009c0
 80024ec:	200009b9 	.word	0x200009b9
 80024f0:	20000038 	.word	0x20000038

080024f4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80024fa:	2301      	movs	r3, #1
 80024fc:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80024fe:	4b29      	ldr	r3, [pc, #164]	@ (80025a4 <check_DHCP_timeout+0xb0>)
 8002500:	f993 3000 	ldrsb.w	r3, [r3]
 8002504:	2b01      	cmp	r3, #1
 8002506:	dc2d      	bgt.n	8002564 <check_DHCP_timeout+0x70>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8002508:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <check_DHCP_timeout+0xb4>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b27      	ldr	r3, [pc, #156]	@ (80025ac <check_DHCP_timeout+0xb8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d242      	bcs.n	800259a <check_DHCP_timeout+0xa6>

			switch ( dhcp_state ) {
 8002514:	4b26      	ldr	r3, [pc, #152]	@ (80025b0 <check_DHCP_timeout+0xbc>)
 8002516:	f993 3000 	ldrsb.w	r3, [r3]
 800251a:	2b04      	cmp	r3, #4
 800251c:	d00c      	beq.n	8002538 <check_DHCP_timeout+0x44>
 800251e:	2b04      	cmp	r3, #4
 8002520:	dc0d      	bgt.n	800253e <check_DHCP_timeout+0x4a>
 8002522:	2b01      	cmp	r3, #1
 8002524:	d002      	beq.n	800252c <check_DHCP_timeout+0x38>
 8002526:	2b02      	cmp	r3, #2
 8002528:	d003      	beq.n	8002532 <check_DHCP_timeout+0x3e>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 800252a:	e008      	b.n	800253e <check_DHCP_timeout+0x4a>
					send_DHCP_DISCOVER();
 800252c:	f7fe ff08 	bl	8001340 <send_DHCP_DISCOVER>
				break;
 8002530:	e006      	b.n	8002540 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002532:	f7ff f8cb 	bl	80016cc <send_DHCP_REQUEST>
				break;
 8002536:	e003      	b.n	8002540 <check_DHCP_timeout+0x4c>
					send_DHCP_REQUEST();
 8002538:	f7ff f8c8 	bl	80016cc <send_DHCP_REQUEST>
				break;
 800253c:	e000      	b.n	8002540 <check_DHCP_timeout+0x4c>
				break;
 800253e:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 8002540:	4b1a      	ldr	r3, [pc, #104]	@ (80025ac <check_DHCP_timeout+0xb8>)
 8002542:	2200      	movs	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8002546:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <check_DHCP_timeout+0xb8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330a      	adds	r3, #10
 800254c:	4a16      	ldr	r2, [pc, #88]	@ (80025a8 <check_DHCP_timeout+0xb4>)
 800254e:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 8002550:	4b14      	ldr	r3, [pc, #80]	@ (80025a4 <check_DHCP_timeout+0xb0>)
 8002552:	f993 3000 	ldrsb.w	r3, [r3]
 8002556:	b2db      	uxtb	r3, r3
 8002558:	3301      	adds	r3, #1
 800255a:	b2db      	uxtb	r3, r3
 800255c:	b25a      	sxtb	r2, r3
 800255e:	4b11      	ldr	r3, [pc, #68]	@ (80025a4 <check_DHCP_timeout+0xb0>)
 8002560:	701a      	strb	r2, [r3, #0]
 8002562:	e01a      	b.n	800259a <check_DHCP_timeout+0xa6>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 8002564:	4b12      	ldr	r3, [pc, #72]	@ (80025b0 <check_DHCP_timeout+0xbc>)
 8002566:	f993 3000 	ldrsb.w	r3, [r3]
 800256a:	2b04      	cmp	r3, #4
 800256c:	d00c      	beq.n	8002588 <check_DHCP_timeout+0x94>
 800256e:	2b04      	cmp	r3, #4
 8002570:	dc10      	bgt.n	8002594 <check_DHCP_timeout+0xa0>
 8002572:	2b01      	cmp	r3, #1
 8002574:	d002      	beq.n	800257c <check_DHCP_timeout+0x88>
 8002576:	2b02      	cmp	r3, #2
 8002578:	d006      	beq.n	8002588 <check_DHCP_timeout+0x94>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 800257a:	e00b      	b.n	8002594 <check_DHCP_timeout+0xa0>
				dhcp_state = STATE_DHCP_INIT;
 800257c:	4b0c      	ldr	r3, [pc, #48]	@ (80025b0 <check_DHCP_timeout+0xbc>)
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8002582:	2300      	movs	r3, #0
 8002584:	71fb      	strb	r3, [r7, #7]
				break;
 8002586:	e006      	b.n	8002596 <check_DHCP_timeout+0xa2>
				send_DHCP_DISCOVER();
 8002588:	f7fe feda 	bl	8001340 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 800258c:	4b08      	ldr	r3, [pc, #32]	@ (80025b0 <check_DHCP_timeout+0xbc>)
 800258e:	2201      	movs	r2, #1
 8002590:	701a      	strb	r2, [r3, #0]
				break;
 8002592:	e000      	b.n	8002596 <check_DHCP_timeout+0xa2>
				break;
 8002594:	bf00      	nop
		}
		reset_DHCP_timeout();
 8002596:	f000 f8df 	bl	8002758 <reset_DHCP_timeout>
	}
	return ret;
 800259a:	79fb      	ldrb	r3, [r7, #7]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	200009b9 	.word	0x200009b9
 80025a8:	20000028 	.word	0x20000028
 80025ac:	200009bc 	.word	0x200009bc
 80025b0:	200009b8 	.word	0x200009b8

080025b4 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80025ba:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80025be:	f000 f97b 	bl	80028b8 <WIZCHIP_READ>
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80025c6:	2103      	movs	r1, #3
 80025c8:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80025cc:	f000 f9c0 	bl	8002950 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80025d0:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <check_DHCP_leasedIP+0x6c>)
 80025d2:	7818      	ldrb	r0, [r3, #0]
 80025d4:	f241 3388 	movw	r3, #5000	@ 0x1388
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4b12      	ldr	r3, [pc, #72]	@ (8002624 <check_DHCP_leasedIP+0x70>)
 80025dc:	2211      	movs	r2, #17
 80025de:	4912      	ldr	r1, [pc, #72]	@ (8002628 <check_DHCP_leasedIP+0x74>)
 80025e0:	f000 ffa6 	bl	8003530 <sendto>
 80025e4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	4619      	mov	r1, r3
 80025ea:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80025ee:	f000 f9af 	bl	8002950 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f113 0f0d 	cmn.w	r3, #13
 80025f8:	d101      	bne.n	80025fe <check_DHCP_leasedIP+0x4a>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e00c      	b.n	8002618 <check_DHCP_leasedIP+0x64>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80025fe:	f7ff faef 	bl	8001be0 <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <check_DHCP_leasedIP+0x78>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 8002608:	bf00      	nop
 800260a:	4b08      	ldr	r3, [pc, #32]	@ (800262c <check_DHCP_leasedIP+0x78>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	1ad3      	subs	r3, r2, r3
 8002612:	2b01      	cmp	r3, #1
 8002614:	d9f9      	bls.n	800260a <check_DHCP_leasedIP+0x56>

		return 0;
 8002616:	2300      	movs	r3, #0
	}
}	
 8002618:	4618      	mov	r0, r3
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000998 	.word	0x20000998
 8002624:	200009a8 	.word	0x200009a8
 8002628:	08007844 	.word	0x08007844
 800262c:	200009bc 	.word	0x200009bc

08002630 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	6039      	str	r1, [r7, #0]
 800263a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8002640:	2206      	movs	r2, #6
 8002642:	493f      	ldr	r1, [pc, #252]	@ (8002740 <DHCP_init+0x110>)
 8002644:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8002648:	f000 f9d0 	bl	80029ec <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800264c:	4b3c      	ldr	r3, [pc, #240]	@ (8002740 <DHCP_init+0x110>)
 800264e:	781a      	ldrb	r2, [r3, #0]
 8002650:	4b3b      	ldr	r3, [pc, #236]	@ (8002740 <DHCP_init+0x110>)
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	4313      	orrs	r3, r2
 8002656:	b2da      	uxtb	r2, r3
 8002658:	4b39      	ldr	r3, [pc, #228]	@ (8002740 <DHCP_init+0x110>)
 800265a:	789b      	ldrb	r3, [r3, #2]
 800265c:	4313      	orrs	r3, r2
 800265e:	b2da      	uxtb	r2, r3
 8002660:	4b37      	ldr	r3, [pc, #220]	@ (8002740 <DHCP_init+0x110>)
 8002662:	78db      	ldrb	r3, [r3, #3]
 8002664:	4313      	orrs	r3, r2
 8002666:	b2da      	uxtb	r2, r3
 8002668:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <DHCP_init+0x110>)
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	4313      	orrs	r3, r2
 800266e:	b2da      	uxtb	r2, r3
 8002670:	4b33      	ldr	r3, [pc, #204]	@ (8002740 <DHCP_init+0x110>)
 8002672:	795b      	ldrb	r3, [r3, #5]
 8002674:	4313      	orrs	r3, r2
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d117      	bne.n	80026ac <DHCP_init+0x7c>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800267c:	4b30      	ldr	r3, [pc, #192]	@ (8002740 <DHCP_init+0x110>)
 800267e:	2200      	movs	r2, #0
 8002680:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8002682:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <DHCP_init+0x110>)
 8002684:	2208      	movs	r2, #8
 8002686:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8002688:	4b2d      	ldr	r3, [pc, #180]	@ (8002740 <DHCP_init+0x110>)
 800268a:	22dc      	movs	r2, #220	@ 0xdc
 800268c:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800268e:	4b2c      	ldr	r3, [pc, #176]	@ (8002740 <DHCP_init+0x110>)
 8002690:	2200      	movs	r2, #0
 8002692:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8002694:	4b2a      	ldr	r3, [pc, #168]	@ (8002740 <DHCP_init+0x110>)
 8002696:	2200      	movs	r2, #0
 8002698:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 800269a:	4b29      	ldr	r3, [pc, #164]	@ (8002740 <DHCP_init+0x110>)
 800269c:	2200      	movs	r2, #0
 800269e:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 80026a0:	2206      	movs	r2, #6
 80026a2:	4927      	ldr	r1, [pc, #156]	@ (8002740 <DHCP_init+0x110>)
 80026a4:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80026a8:	f000 fa00 	bl	8002aac <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 80026ac:	4a25      	ldr	r2, [pc, #148]	@ (8002744 <DHCP_init+0x114>)
 80026ae:	79fb      	ldrb	r3, [r7, #7]
 80026b0:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 80026b2:	4a25      	ldr	r2, [pc, #148]	@ (8002748 <DHCP_init+0x118>)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80026b8:	4b24      	ldr	r3, [pc, #144]	@ (800274c <DHCP_init+0x11c>)
 80026ba:	4a25      	ldr	r2, [pc, #148]	@ (8002750 <DHCP_init+0x120>)
 80026bc:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80026be:	4b20      	ldr	r3, [pc, #128]	@ (8002740 <DHCP_init+0x110>)
 80026c0:	78db      	ldrb	r3, [r3, #3]
 80026c2:	461a      	mov	r2, r3
 80026c4:	4b21      	ldr	r3, [pc, #132]	@ (800274c <DHCP_init+0x11c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4413      	add	r3, r2
 80026ca:	4a20      	ldr	r2, [pc, #128]	@ (800274c <DHCP_init+0x11c>)
 80026cc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80026ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <DHCP_init+0x110>)
 80026d0:	791b      	ldrb	r3, [r3, #4]
 80026d2:	461a      	mov	r2, r3
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <DHCP_init+0x11c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4413      	add	r3, r2
 80026da:	4a1c      	ldr	r2, [pc, #112]	@ (800274c <DHCP_init+0x11c>)
 80026dc:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80026de:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <DHCP_init+0x110>)
 80026e0:	795b      	ldrb	r3, [r3, #5]
 80026e2:	461a      	mov	r2, r3
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <DHCP_init+0x11c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4413      	add	r3, r2
 80026ea:	4a18      	ldr	r2, [pc, #96]	@ (800274c <DHCP_init+0x11c>)
 80026ec:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80026ee:	4b14      	ldr	r3, [pc, #80]	@ (8002740 <DHCP_init+0x110>)
 80026f0:	78da      	ldrb	r2, [r3, #3]
 80026f2:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <DHCP_init+0x110>)
 80026f4:	791b      	ldrb	r3, [r3, #4]
 80026f6:	4053      	eors	r3, r2
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	4b11      	ldr	r3, [pc, #68]	@ (8002740 <DHCP_init+0x110>)
 80026fc:	795b      	ldrb	r3, [r3, #5]
 80026fe:	4053      	eors	r3, r2
 8002700:	b2db      	uxtb	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	4b11      	ldr	r3, [pc, #68]	@ (800274c <DHCP_init+0x11c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4413      	add	r3, r2
 800270a:	4a10      	ldr	r2, [pc, #64]	@ (800274c <DHCP_init+0x11c>)
 800270c:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 800270e:	f107 030c 	add.w	r3, r7, #12
 8002712:	2204      	movs	r2, #4
 8002714:	4619      	mov	r1, r3
 8002716:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800271a:	f000 f9c7 	bl	8002aac <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 800271e:	f107 030c 	add.w	r3, r7, #12
 8002722:	2204      	movs	r2, #4
 8002724:	4619      	mov	r1, r3
 8002726:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800272a:	f000 f9bf 	bl	8002aac <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 800272e:	f000 f813 	bl	8002758 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 8002732:	4b08      	ldr	r3, [pc, #32]	@ (8002754 <DHCP_init+0x124>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
}
 8002738:	bf00      	nop
 800273a:	3710      	adds	r7, #16
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}
 8002740:	200009c8 	.word	0x200009c8
 8002744:	20000998 	.word	0x20000998
 8002748:	200009c4 	.word	0x200009c4
 800274c:	200009c0 	.word	0x200009c0
 8002750:	12345678 	.word	0x12345678
 8002754:	200009b8 	.word	0x200009b8

08002758 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 800275c:	4b06      	ldr	r3, [pc, #24]	@ (8002778 <reset_DHCP_timeout+0x20>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <reset_DHCP_timeout+0x24>)
 8002764:	220a      	movs	r2, #10
 8002766:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8002768:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <reset_DHCP_timeout+0x28>)
 800276a:	2200      	movs	r2, #0
 800276c:	701a      	strb	r2, [r3, #0]
}
 800276e:	bf00      	nop
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	200009bc 	.word	0x200009bc
 800277c:	20000028 	.word	0x20000028
 8002780:	200009b9 	.word	0x200009b9

08002784 <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 800278c:	4b0c      	ldr	r3, [pc, #48]	@ (80027c0 <getIPfromDHCP+0x3c>)
 800278e:	781a      	ldrb	r2, [r3, #0]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3301      	adds	r3, #1
 8002798:	4a09      	ldr	r2, [pc, #36]	@ (80027c0 <getIPfromDHCP+0x3c>)
 800279a:	7852      	ldrb	r2, [r2, #1]
 800279c:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3302      	adds	r3, #2
 80027a2:	4a07      	ldr	r2, [pc, #28]	@ (80027c0 <getIPfromDHCP+0x3c>)
 80027a4:	7892      	ldrb	r2, [r2, #2]
 80027a6:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3303      	adds	r3, #3
 80027ac:	4a04      	ldr	r2, [pc, #16]	@ (80027c0 <getIPfromDHCP+0x3c>)
 80027ae:	78d2      	ldrb	r2, [r2, #3]
 80027b0:	701a      	strb	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	200009a8 	.word	0x200009a8

080027c4 <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80027cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002800 <getGWfromDHCP+0x3c>)
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3301      	adds	r3, #1
 80027d8:	4a09      	ldr	r2, [pc, #36]	@ (8002800 <getGWfromDHCP+0x3c>)
 80027da:	7852      	ldrb	r2, [r2, #1]
 80027dc:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	3302      	adds	r3, #2
 80027e2:	4a07      	ldr	r2, [pc, #28]	@ (8002800 <getGWfromDHCP+0x3c>)
 80027e4:	7892      	ldrb	r2, [r2, #2]
 80027e6:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3303      	adds	r3, #3
 80027ec:	4a04      	ldr	r2, [pc, #16]	@ (8002800 <getGWfromDHCP+0x3c>)
 80027ee:	78d2      	ldrb	r2, [r2, #3]
 80027f0:	701a      	strb	r2, [r3, #0]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	200009ac 	.word	0x200009ac

08002804 <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 800280c:	4b0c      	ldr	r3, [pc, #48]	@ (8002840 <getSNfromDHCP+0x3c>)
 800280e:	781a      	ldrb	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3301      	adds	r3, #1
 8002818:	4a09      	ldr	r2, [pc, #36]	@ (8002840 <getSNfromDHCP+0x3c>)
 800281a:	7852      	ldrb	r2, [r2, #1]
 800281c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3302      	adds	r3, #2
 8002822:	4a07      	ldr	r2, [pc, #28]	@ (8002840 <getSNfromDHCP+0x3c>)
 8002824:	7892      	ldrb	r2, [r2, #2]
 8002826:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3303      	adds	r3, #3
 800282c:	4a04      	ldr	r2, [pc, #16]	@ (8002840 <getSNfromDHCP+0x3c>)
 800282e:	78d2      	ldrb	r2, [r2, #3]
 8002830:	701a      	strb	r2, [r3, #0]
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	200009b0 	.word	0x200009b0

08002844 <getDNSfromDHCP>:

void getDNSfromDHCP(uint8_t* ip)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_dns[0];
 800284c:	4b0c      	ldr	r3, [pc, #48]	@ (8002880 <getDNSfromDHCP+0x3c>)
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_dns[1];
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3301      	adds	r3, #1
 8002858:	4a09      	ldr	r2, [pc, #36]	@ (8002880 <getDNSfromDHCP+0x3c>)
 800285a:	7852      	ldrb	r2, [r2, #1]
 800285c:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_dns[2];
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3302      	adds	r3, #2
 8002862:	4a07      	ldr	r2, [pc, #28]	@ (8002880 <getDNSfromDHCP+0x3c>)
 8002864:	7892      	ldrb	r2, [r2, #2]
 8002866:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_dns[3];         
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3303      	adds	r3, #3
 800286c:	4a04      	ldr	r2, [pc, #16]	@ (8002880 <getDNSfromDHCP+0x3c>)
 800286e:	78d2      	ldrb	r2, [r2, #3]
 8002870:	701a      	strb	r2, [r3, #0]
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	200009b4 	.word	0x200009b4

08002884 <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 800288e:	79fb      	ldrb	r3, [r7, #7]
 8002890:	f003 030f 	and.w	r3, r3, #15
 8002894:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 8002896:	79fb      	ldrb	r3, [r7, #7]
 8002898:	2b09      	cmp	r3, #9
 800289a:	d803      	bhi.n	80028a4 <NibbleToHex+0x20>
    return nibble + '0';
 800289c:	79fb      	ldrb	r3, [r7, #7]
 800289e:	3330      	adds	r3, #48	@ 0x30
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	e002      	b.n	80028aa <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 80028a4:	79fb      	ldrb	r3, [r7, #7]
 80028a6:	3337      	adds	r3, #55	@ 0x37
 80028a8:	b2db      	uxtb	r3, r3
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
	...

080028b8 <WIZCHIP_READ>:

#if   (_WIZCHIP_ == 5500)
////////////////////////////////////////////////////

uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
   uint8_t ret;
   uint8_t spi_data[3];

   WIZCHIP_CRITICAL_ENTER();
 80028c0:	4b22      	ldr	r3, [pc, #136]	@ (800294c <WIZCHIP_READ+0x94>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4798      	blx	r3
   WIZCHIP.CS._select();
 80028c6:	4b21      	ldr	r3, [pc, #132]	@ (800294c <WIZCHIP_READ+0x94>)
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 80028cc:	4b1f      	ldr	r3, [pc, #124]	@ (800294c <WIZCHIP_READ+0x94>)
 80028ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d003      	beq.n	80028dc <WIZCHIP_READ+0x24>
 80028d4:	4b1d      	ldr	r3, [pc, #116]	@ (800294c <WIZCHIP_READ+0x94>)
 80028d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d114      	bne.n	8002906 <WIZCHIP_READ+0x4e>
   {
	   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 80028dc:	4b1b      	ldr	r3, [pc, #108]	@ (800294c <WIZCHIP_READ+0x94>)
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	0c12      	lsrs	r2, r2, #16
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	4610      	mov	r0, r2
 80028e8:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 80028ea:	4b18      	ldr	r3, [pc, #96]	@ (800294c <WIZCHIP_READ+0x94>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	0a12      	lsrs	r2, r2, #8
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	4610      	mov	r0, r2
 80028f6:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 80028f8:	4b14      	ldr	r3, [pc, #80]	@ (800294c <WIZCHIP_READ+0x94>)
 80028fa:	6a1b      	ldr	r3, [r3, #32]
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	4610      	mov	r0, r2
 8002902:	4798      	blx	r3
 8002904:	e011      	b.n	800292a <WIZCHIP_READ+0x72>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	0c1b      	lsrs	r3, r3, #16
 800290a:	b2db      	uxtb	r3, r3
 800290c:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	b2db      	uxtb	r3, r3
 8002914:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	b2db      	uxtb	r3, r3
 800291a:	73bb      	strb	r3, [r7, #14]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 800291c:	4b0b      	ldr	r3, [pc, #44]	@ (800294c <WIZCHIP_READ+0x94>)
 800291e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002920:	f107 020c 	add.w	r2, r7, #12
 8002924:	2103      	movs	r1, #3
 8002926:	4610      	mov	r0, r2
 8002928:	4798      	blx	r3
   }
   ret = WIZCHIP.IF.SPI._read_byte();
 800292a:	4b08      	ldr	r3, [pc, #32]	@ (800294c <WIZCHIP_READ+0x94>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4798      	blx	r3
 8002930:	4603      	mov	r3, r0
 8002932:	73fb      	strb	r3, [r7, #15]

   WIZCHIP.CS._deselect();
 8002934:	4b05      	ldr	r3, [pc, #20]	@ (800294c <WIZCHIP_READ+0x94>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800293a:	4b04      	ldr	r3, [pc, #16]	@ (800294c <WIZCHIP_READ+0x94>)
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	4798      	blx	r3
   return ret;
 8002940:	7bfb      	ldrb	r3, [r7, #15]
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	20000044 	.word	0x20000044

08002950 <WIZCHIP_WRITE>:

void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	460b      	mov	r3, r1
 800295a:	70fb      	strb	r3, [r7, #3]
   uint8_t spi_data[4];

   WIZCHIP_CRITICAL_ENTER();
 800295c:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002962:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f043 0304 	orr.w	r3, r3, #4
 800296e:	607b      	str	r3, [r7, #4]

   //if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002970:	4b1d      	ldr	r3, [pc, #116]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 8002972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d119      	bne.n	80029ac <WIZCHIP_WRITE+0x5c>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002978:	4b1b      	ldr	r3, [pc, #108]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	0c12      	lsrs	r2, r2, #16
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	4610      	mov	r0, r2
 8002984:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002986:	4b18      	ldr	r3, [pc, #96]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	0a12      	lsrs	r2, r2, #8
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	4610      	mov	r0, r2
 8002992:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002994:	4b14      	ldr	r3, [pc, #80]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	4610      	mov	r0, r2
 800299e:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte(wb);
 80029a0:	4b11      	ldr	r3, [pc, #68]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	78fa      	ldrb	r2, [r7, #3]
 80029a6:	4610      	mov	r0, r2
 80029a8:	4798      	blx	r3
 80029aa:	e013      	b.n	80029d4 <WIZCHIP_WRITE+0x84>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	0c1b      	lsrs	r3, r3, #16
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	733b      	strb	r3, [r7, #12]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	0a1b      	lsrs	r3, r3, #8
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	737b      	strb	r3, [r7, #13]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	73bb      	strb	r3, [r7, #14]
		spi_data[3] = wb;
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	73fb      	strb	r3, [r7, #15]
		WIZCHIP.IF.SPI._write_burst(spi_data, 4);
 80029c6:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 80029c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029ca:	f107 020c 	add.w	r2, r7, #12
 80029ce:	2104      	movs	r1, #4
 80029d0:	4610      	mov	r0, r2
 80029d2:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80029da:	4b03      	ldr	r3, [pc, #12]	@ (80029e8 <WIZCHIP_WRITE+0x98>)
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	4798      	blx	r3
}
 80029e0:	bf00      	nop
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000044 	.word	0x20000044

080029ec <WIZCHIP_READ_BUF>:
         
void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b087      	sub	sp, #28
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 80029fa:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002a00:	4b29      	ldr	r3, [pc, #164]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a02:	695b      	ldr	r3, [r3, #20]
 8002a04:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_READ_ | _W5500_SPI_VDM_OP_);

   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002a06:	4b28      	ldr	r3, [pc, #160]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <WIZCHIP_READ_BUF+0x2a>
 8002a0e:	4b26      	ldr	r3, [pc, #152]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d126      	bne.n	8002a64 <WIZCHIP_READ_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002a16:	4b24      	ldr	r3, [pc, #144]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a18:	6a1b      	ldr	r3, [r3, #32]
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	0c12      	lsrs	r2, r2, #16
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	4610      	mov	r0, r2
 8002a22:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002a24:	4b20      	ldr	r3, [pc, #128]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	0a12      	lsrs	r2, r2, #8
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	4610      	mov	r0, r2
 8002a30:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002a32:	4b1d      	ldr	r3, [pc, #116]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a34:	6a1b      	ldr	r3, [r3, #32]
 8002a36:	68fa      	ldr	r2, [r7, #12]
 8002a38:	b2d2      	uxtb	r2, r2
 8002a3a:	4610      	mov	r0, r2
 8002a3c:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002a3e:	2300      	movs	r3, #0
 8002a40:	82fb      	strh	r3, [r7, #22]
 8002a42:	e00a      	b.n	8002a5a <WIZCHIP_READ_BUF+0x6e>
		   pBuf[i] = WIZCHIP.IF.SPI._read_byte();
 8002a44:	4b18      	ldr	r3, [pc, #96]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a46:	69db      	ldr	r3, [r3, #28]
 8002a48:	8afa      	ldrh	r2, [r7, #22]
 8002a4a:	68b9      	ldr	r1, [r7, #8]
 8002a4c:	188c      	adds	r4, r1, r2
 8002a4e:	4798      	blx	r3
 8002a50:	4603      	mov	r3, r0
 8002a52:	7023      	strb	r3, [r4, #0]
		for(i = 0; i < len; i++)
 8002a54:	8afb      	ldrh	r3, [r7, #22]
 8002a56:	3301      	adds	r3, #1
 8002a58:	82fb      	strh	r3, [r7, #22]
 8002a5a:	8afa      	ldrh	r2, [r7, #22]
 8002a5c:	88fb      	ldrh	r3, [r7, #6]
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d3f0      	bcc.n	8002a44 <WIZCHIP_READ_BUF+0x58>
   if(!WIZCHIP.IF.SPI._read_burst || !WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002a62:	e017      	b.n	8002a94 <WIZCHIP_READ_BUF+0xa8>
   }
   else																// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	f107 0210 	add.w	r2, r7, #16
 8002a82:	2103      	movs	r1, #3
 8002a84:	4610      	mov	r0, r2
 8002a86:	4798      	blx	r3
		WIZCHIP.IF.SPI._read_burst(pBuf, len);
 8002a88:	4b07      	ldr	r3, [pc, #28]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8c:	88fa      	ldrh	r2, [r7, #6]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	68b8      	ldr	r0, [r7, #8]
 8002a92:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002a94:	4b04      	ldr	r3, [pc, #16]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002a9a:	4b03      	ldr	r3, [pc, #12]	@ (8002aa8 <WIZCHIP_READ_BUF+0xbc>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	4798      	blx	r3
}
 8002aa0:	bf00      	nop
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd90      	pop	{r4, r7, pc}
 8002aa8:	20000044 	.word	0x20000044

08002aac <WIZCHIP_WRITE_BUF>:

void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
   uint8_t spi_data[3];
   uint16_t i;

   WIZCHIP_CRITICAL_ENTER();
 8002aba:	4b2b      	ldr	r3, [pc, #172]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	4798      	blx	r3
   WIZCHIP.CS._select();
 8002ac0:	4b29      	ldr	r3, [pc, #164]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	4798      	blx	r3

   AddrSel |= (_W5500_SPI_WRITE_ | _W5500_SPI_VDM_OP_);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	60fb      	str	r3, [r7, #12]

   if(!WIZCHIP.IF.SPI._write_burst) 	// byte operation
 8002ace:	4b26      	ldr	r3, [pc, #152]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d126      	bne.n	8002b24 <WIZCHIP_WRITE_BUF+0x78>
   {
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF0000) >> 16);
 8002ad6:	4b24      	ldr	r3, [pc, #144]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	0c12      	lsrs	r2, r2, #16
 8002ade:	b2d2      	uxtb	r2, r2
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x0000FF00) >>  8);
 8002ae4:	4b20      	ldr	r3, [pc, #128]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002ae6:	6a1b      	ldr	r3, [r3, #32]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	0a12      	lsrs	r2, r2, #8
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	4610      	mov	r0, r2
 8002af0:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_byte((AddrSel & 0x000000FF) >>  0);
 8002af2:	4b1d      	ldr	r3, [pc, #116]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	4610      	mov	r0, r2
 8002afc:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002afe:	2300      	movs	r3, #0
 8002b00:	82fb      	strh	r3, [r7, #22]
 8002b02:	e00a      	b.n	8002b1a <WIZCHIP_WRITE_BUF+0x6e>
			WIZCHIP.IF.SPI._write_byte(pBuf[i]);
 8002b04:	4b18      	ldr	r3, [pc, #96]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002b06:	6a1b      	ldr	r3, [r3, #32]
 8002b08:	8afa      	ldrh	r2, [r7, #22]
 8002b0a:	68b9      	ldr	r1, [r7, #8]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	7812      	ldrb	r2, [r2, #0]
 8002b10:	4610      	mov	r0, r2
 8002b12:	4798      	blx	r3
		for(i = 0; i < len; i++)
 8002b14:	8afb      	ldrh	r3, [r7, #22]
 8002b16:	3301      	adds	r3, #1
 8002b18:	82fb      	strh	r3, [r7, #22]
 8002b1a:	8afa      	ldrh	r2, [r7, #22]
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d3f0      	bcc.n	8002b04 <WIZCHIP_WRITE_BUF+0x58>
 8002b22:	e017      	b.n	8002b54 <WIZCHIP_WRITE_BUF+0xa8>
   }
   else									// burst operation
   {
		spi_data[0] = (AddrSel & 0x00FF0000) >> 16;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	0c1b      	lsrs	r3, r3, #16
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	743b      	strb	r3, [r7, #16]
		spi_data[1] = (AddrSel & 0x0000FF00) >> 8;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	747b      	strb	r3, [r7, #17]
		spi_data[2] = (AddrSel & 0x000000FF) >> 0;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	74bb      	strb	r3, [r7, #18]
		WIZCHIP.IF.SPI._write_burst(spi_data, 3);
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3e:	f107 0210 	add.w	r2, r7, #16
 8002b42:	2103      	movs	r1, #3
 8002b44:	4610      	mov	r0, r2
 8002b46:	4798      	blx	r3
		WIZCHIP.IF.SPI._write_burst(pBuf, len);
 8002b48:	4b07      	ldr	r3, [pc, #28]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4c:	88fa      	ldrh	r2, [r7, #6]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	68b8      	ldr	r0, [r7, #8]
 8002b52:	4798      	blx	r3
   }

   WIZCHIP.CS._deselect();
 8002b54:	4b04      	ldr	r3, [pc, #16]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8002b5a:	4b03      	ldr	r3, [pc, #12]	@ (8002b68 <WIZCHIP_WRITE_BUF+0xbc>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	4798      	blx	r3
}
 8002b60:	bf00      	nop
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	20000044 	.word	0x20000044

08002b6c <getSn_TX_FSR>:


uint16_t getSn_TX_FSR(uint8_t sn)
{
 8002b6c:	b590      	push	{r4, r7, lr}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002b76:	2300      	movs	r3, #0
 8002b78:	81fb      	strh	r3, [r7, #14]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002b7e:	79fb      	ldrb	r3, [r7, #7]
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	3301      	adds	r3, #1
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fe94 	bl	80028b8 <WIZCHIP_READ>
 8002b90:	4603      	mov	r3, r0
 8002b92:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002b94:	89bb      	ldrh	r3, [r7, #12]
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	b29c      	uxth	r4, r3
 8002b9a:	79fb      	ldrb	r3, [r7, #7]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	00db      	lsls	r3, r3, #3
 8002ba2:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f7ff fe86 	bl	80028b8 <WIZCHIP_READ>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4423      	add	r3, r4
 8002bb0:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002bb2:	89bb      	ldrh	r3, [r7, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d019      	beq.n	8002bec <getSn_TX_FSR+0x80>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8002bb8:	79fb      	ldrb	r3, [r7, #7]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fe77 	bl	80028b8 <WIZCHIP_READ>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8002bce:	89fb      	ldrh	r3, [r7, #14]
 8002bd0:	021b      	lsls	r3, r3, #8
 8002bd2:	b29c      	uxth	r4, r3
 8002bd4:	79fb      	ldrb	r3, [r7, #7]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	3301      	adds	r3, #1
 8002bda:	00db      	lsls	r3, r3, #3
 8002bdc:	f503 5304 	add.w	r3, r3, #8448	@ 0x2100
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fe69 	bl	80028b8 <WIZCHIP_READ>
 8002be6:	4603      	mov	r3, r0
 8002be8:	4423      	add	r3, r4
 8002bea:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002bec:	89fa      	ldrh	r2, [r7, #14]
 8002bee:	89bb      	ldrh	r3, [r7, #12]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d1c4      	bne.n	8002b7e <getSn_TX_FSR+0x12>
   return val;
 8002bf4:	89fb      	ldrh	r3, [r7, #14]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd90      	pop	{r4, r7, pc}

08002bfe <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8002bfe:	b590      	push	{r4, r7, lr}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	4603      	mov	r3, r0
 8002c06:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	81fb      	strh	r3, [r7, #14]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	81bb      	strh	r3, [r7, #12]

   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002c10:	79fb      	ldrb	r3, [r7, #7]
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	3301      	adds	r3, #1
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff fe4b 	bl	80028b8 <WIZCHIP_READ>
 8002c22:	4603      	mov	r3, r0
 8002c24:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002c26:	89bb      	ldrh	r3, [r7, #12]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	b29c      	uxth	r4, r3
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	3301      	adds	r3, #1
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff fe3d 	bl	80028b8 <WIZCHIP_READ>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	4423      	add	r3, r4
 8002c42:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8002c44:	89bb      	ldrh	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d019      	beq.n	8002c7e <getSn_RX_RSR+0x80>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 8002c4a:	79fb      	ldrb	r3, [r7, #7]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	3301      	adds	r3, #1
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	f503 5318 	add.w	r3, r3, #9728	@ 0x2600
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7ff fe2e 	bl	80028b8 <WIZCHIP_READ>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 8002c60:	89fb      	ldrh	r3, [r7, #14]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	b29c      	uxth	r4, r3
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fe20 	bl	80028b8 <WIZCHIP_READ>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4423      	add	r3, r4
 8002c7c:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8002c7e:	89fa      	ldrh	r2, [r7, #14]
 8002c80:	89bb      	ldrh	r3, [r7, #12]
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d1c4      	bne.n	8002c10 <getSn_RX_RSR+0x12>
   return val;
 8002c86:	89fb      	ldrh	r3, [r7, #14]
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3714      	adds	r7, #20
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd90      	pop	{r4, r7, pc}

08002c90 <wiz_send_data>:

void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60bb      	str	r3, [r7, #8]

   if(len == 0)  return;
 8002ca8:	88bb      	ldrh	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d046      	beq.n	8002d3c <wiz_send_data+0xac>
   ptr = getSn_TX_WR(sn);
 8002cae:	79fb      	ldrb	r3, [r7, #7]
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7ff fdfc 	bl	80028b8 <WIZCHIP_READ>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	021b      	lsls	r3, r3, #8
 8002cc4:	b29c      	uxth	r4, r3
 8002cc6:	79fb      	ldrb	r3, [r7, #7]
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	3301      	adds	r3, #1
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f7ff fdf0 	bl	80028b8 <WIZCHIP_READ>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4423      	add	r3, r4
 8002cdc:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = (ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_TXBUF_BLOCK(sn) << 3);
 8002cde:	89fb      	ldrh	r3, [r7, #14]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	79fa      	ldrb	r2, [r7, #7]
 8002ce4:	0092      	lsls	r2, r2, #2
 8002ce6:	3202      	adds	r2, #2
 8002ce8:	00d2      	lsls	r2, r2, #3
 8002cea:	4413      	add	r3, r2
 8002cec:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_WRITE_BUF(addrsel,wizdata, len);
 8002cee:	88bb      	ldrh	r3, [r7, #4]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	6839      	ldr	r1, [r7, #0]
 8002cf4:	68b8      	ldr	r0, [r7, #8]
 8002cf6:	f7ff fed9 	bl	8002aac <WIZCHIP_WRITE_BUF>
   
   ptr += len;
 8002cfa:	89fa      	ldrh	r2, [r7, #14]
 8002cfc:	88bb      	ldrh	r3, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	81fb      	strh	r3, [r7, #14]
   setSn_TX_WR(sn,ptr);
 8002d02:	79fb      	ldrb	r3, [r7, #7]
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	3301      	adds	r3, #1
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	f503 5310 	add.w	r3, r3, #9216	@ 0x2400
 8002d0e:	461a      	mov	r2, r3
 8002d10:	89fb      	ldrh	r3, [r7, #14]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	f7ff fe18 	bl	8002950 <WIZCHIP_WRITE>
 8002d20:	79fb      	ldrb	r3, [r7, #7]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	3301      	adds	r3, #1
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	f503 5314 	add.w	r3, r3, #9472	@ 0x2500
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	89fb      	ldrh	r3, [r7, #14]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	4619      	mov	r1, r3
 8002d34:	4610      	mov	r0, r2
 8002d36:	f7ff fe0b 	bl	8002950 <WIZCHIP_WRITE>
 8002d3a:	e000      	b.n	8002d3e <wiz_send_data+0xae>
   if(len == 0)  return;
 8002d3c:	bf00      	nop
}
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd90      	pop	{r4, r7, pc}

08002d44 <wiz_recv_data>:

void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8002d44:	b590      	push	{r4, r7, lr}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
 8002d50:	4613      	mov	r3, r2
 8002d52:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	81fb      	strh	r3, [r7, #14]
   uint32_t addrsel = 0;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	60bb      	str	r3, [r7, #8]
   
   if(len == 0) return;
 8002d5c:	88bb      	ldrh	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d046      	beq.n	8002df0 <wiz_recv_data+0xac>
   ptr = getSn_RX_RD(sn);
 8002d62:	79fb      	ldrb	r3, [r7, #7]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	3301      	adds	r3, #1
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fda2 	bl	80028b8 <WIZCHIP_READ>
 8002d74:	4603      	mov	r3, r0
 8002d76:	021b      	lsls	r3, r3, #8
 8002d78:	b29c      	uxth	r4, r3
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	009b      	lsls	r3, r3, #2
 8002d7e:	3301      	adds	r3, #1
 8002d80:	00db      	lsls	r3, r3, #3
 8002d82:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fd96 	bl	80028b8 <WIZCHIP_READ>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	4423      	add	r3, r4
 8002d90:	81fb      	strh	r3, [r7, #14]
   //M20140501 : implict type casting -> explict type casting
   //addrsel = ((ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
   addrsel = ((uint32_t)ptr << 8) + (WIZCHIP_RXBUF_BLOCK(sn) << 3);
 8002d92:	89fb      	ldrh	r3, [r7, #14]
 8002d94:	021b      	lsls	r3, r3, #8
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	0092      	lsls	r2, r2, #2
 8002d9a:	3203      	adds	r2, #3
 8002d9c:	00d2      	lsls	r2, r2, #3
 8002d9e:	4413      	add	r3, r2
 8002da0:	60bb      	str	r3, [r7, #8]
   //
   WIZCHIP_READ_BUF(addrsel, wizdata, len);
 8002da2:	88bb      	ldrh	r3, [r7, #4]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6839      	ldr	r1, [r7, #0]
 8002da8:	68b8      	ldr	r0, [r7, #8]
 8002daa:	f7ff fe1f 	bl	80029ec <WIZCHIP_READ_BUF>
   ptr += len;
 8002dae:	89fa      	ldrh	r2, [r7, #14]
 8002db0:	88bb      	ldrh	r3, [r7, #4]
 8002db2:	4413      	add	r3, r2
 8002db4:	81fb      	strh	r3, [r7, #14]
   
   setSn_RX_RD(sn,ptr);
 8002db6:	79fb      	ldrb	r3, [r7, #7]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	3301      	adds	r3, #1
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	89fb      	ldrh	r3, [r7, #14]
 8002dc6:	0a1b      	lsrs	r3, r3, #8
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4610      	mov	r0, r2
 8002dd0:	f7ff fdbe 	bl	8002950 <WIZCHIP_WRITE>
 8002dd4:	79fb      	ldrb	r3, [r7, #7]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	3301      	adds	r3, #1
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002de0:	461a      	mov	r2, r3
 8002de2:	89fb      	ldrh	r3, [r7, #14]
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	4619      	mov	r1, r3
 8002de8:	4610      	mov	r0, r2
 8002dea:	f7ff fdb1 	bl	8002950 <WIZCHIP_WRITE>
 8002dee:	e000      	b.n	8002df2 <wiz_recv_data+0xae>
   if(len == 0) return;
 8002df0:	bf00      	nop
}
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}

08002df8 <wiz_recv_ignore>:


void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8002df8:	b590      	push	{r4, r7, lr}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	460a      	mov	r2, r1
 8002e02:	71fb      	strb	r3, [r7, #7]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80bb      	strh	r3, [r7, #4]
   uint16_t ptr = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	81fb      	strh	r3, [r7, #14]

   ptr = getSn_RX_RD(sn);
 8002e0c:	79fb      	ldrb	r3, [r7, #7]
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	3301      	adds	r3, #1
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff fd4d 	bl	80028b8 <WIZCHIP_READ>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	b29c      	uxth	r4, r3
 8002e24:	79fb      	ldrb	r3, [r7, #7]
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	3301      	adds	r3, #1
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff fd41 	bl	80028b8 <WIZCHIP_READ>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4423      	add	r3, r4
 8002e3a:	81fb      	strh	r3, [r7, #14]
   ptr += len;
 8002e3c:	89fa      	ldrh	r2, [r7, #14]
 8002e3e:	88bb      	ldrh	r3, [r7, #4]
 8002e40:	4413      	add	r3, r2
 8002e42:	81fb      	strh	r3, [r7, #14]
   setSn_RX_RD(sn,ptr);
 8002e44:	79fb      	ldrb	r3, [r7, #7]
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	3301      	adds	r3, #1
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	f503 5320 	add.w	r3, r3, #10240	@ 0x2800
 8002e50:	461a      	mov	r2, r3
 8002e52:	89fb      	ldrh	r3, [r7, #14]
 8002e54:	0a1b      	lsrs	r3, r3, #8
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f7ff fd77 	bl	8002950 <WIZCHIP_WRITE>
 8002e62:	79fb      	ldrb	r3, [r7, #7]
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3301      	adds	r3, #1
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	f503 5324 	add.w	r3, r3, #10496	@ 0x2900
 8002e6e:	461a      	mov	r2, r3
 8002e70:	89fb      	ldrh	r3, [r7, #14]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	4619      	mov	r1, r3
 8002e76:	4610      	mov	r0, r2
 8002e78:	f7ff fd6a 	bl	8002950 <WIZCHIP_WRITE>
}
 8002e7c:	bf00      	nop
 8002e7e:	3714      	adds	r7, #20
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd90      	pop	{r4, r7, pc}

08002e84 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8002e84:	b590      	push	{r4, r7, lr}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	4604      	mov	r4, r0
 8002e8c:	4608      	mov	r0, r1
 8002e8e:	4611      	mov	r1, r2
 8002e90:	461a      	mov	r2, r3
 8002e92:	4623      	mov	r3, r4
 8002e94:	71fb      	strb	r3, [r7, #7]
 8002e96:	4603      	mov	r3, r0
 8002e98:	71bb      	strb	r3, [r7, #6]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	80bb      	strh	r3, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d902      	bls.n	8002eae <socket+0x2a>
 8002ea8:	f04f 33ff 	mov.w	r3, #4294967295
 8002eac:	e0f0      	b.n	8003090 <socket+0x20c>
	switch(protocol)
 8002eae:	79bb      	ldrb	r3, [r7, #6]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d005      	beq.n	8002ec0 <socket+0x3c>
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	dd11      	ble.n	8002edc <socket+0x58>
 8002eb8:	3b02      	subs	r3, #2
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d80e      	bhi.n	8002edc <socket+0x58>
	    break;
         }
      case Sn_MR_UDP :
      case Sn_MR_MACRAW :
	  case Sn_MR_IPRAW :
         break;
 8002ebe:	e011      	b.n	8002ee4 <socket+0x60>
            getSIPR((uint8_t*)&taddr);
 8002ec0:	f107 030c 	add.w	r3, r7, #12
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8002ecc:	f7ff fd8e 	bl	80029ec <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d105      	bne.n	8002ee2 <socket+0x5e>
 8002ed6:	f06f 0302 	mvn.w	r3, #2
 8002eda:	e0d9      	b.n	8003090 <socket+0x20c>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8002edc:	f06f 0304 	mvn.w	r3, #4
 8002ee0:	e0d6      	b.n	8003090 <socket+0x20c>
	    break;
 8002ee2:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8002ee4:	78fb      	ldrb	r3, [r7, #3]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d002      	beq.n	8002ef4 <socket+0x70>
 8002eee:	f06f 0305 	mvn.w	r3, #5
 8002ef2:	e0cd      	b.n	8003090 <socket+0x20c>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d028      	beq.n	8002f4c <socket+0xc8>
	{
   	switch(protocol)
 8002efa:	79bb      	ldrb	r3, [r7, #6]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d002      	beq.n	8002f06 <socket+0x82>
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d008      	beq.n	8002f16 <socket+0x92>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8002f04:	e022      	b.n	8002f4c <socket+0xc8>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8002f06:	78fb      	ldrb	r3, [r7, #3]
 8002f08:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d11a      	bne.n	8002f46 <socket+0xc2>
 8002f10:	f06f 0305 	mvn.w	r3, #5
 8002f14:	e0bc      	b.n	8003090 <socket+0x20c>
   	      if(flag & SF_IGMP_VER2)
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d006      	beq.n	8002f2e <socket+0xaa>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8002f20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	db02      	blt.n	8002f2e <socket+0xaa>
 8002f28:	f06f 0305 	mvn.w	r3, #5
 8002f2c:	e0b0      	b.n	8003090 <socket+0x20c>
      	      if(flag & SF_UNI_BLOCK)
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 0310 	and.w	r3, r3, #16
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d008      	beq.n	8002f4a <socket+0xc6>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
 8002f38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db04      	blt.n	8002f4a <socket+0xc6>
 8002f40:	f06f 0305 	mvn.w	r3, #5
 8002f44:	e0a4      	b.n	8003090 <socket+0x20c>
   	      break;
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <socket+0xc8>
   	      break;
 8002f4a:	bf00      	nop
   	}
   }
	close(sn);
 8002f4c:	79fb      	ldrb	r3, [r7, #7]
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f000 f8ac 	bl	80030ac <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8002f54:	79fb      	ldrb	r3, [r7, #7]
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	3301      	adds	r3, #1
 8002f5a:	00db      	lsls	r3, r3, #3
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f62:	f023 030f 	bic.w	r3, r3, #15
 8002f66:	b25a      	sxtb	r2, r3
 8002f68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	b25b      	sxtb	r3, r3
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7ff fcec 	bl	8002950 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8002f78:	88bb      	ldrh	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d110      	bne.n	8002fa0 <socket+0x11c>
	{
	   port = sock_any_port++;
 8002f7e:	4b46      	ldr	r3, [pc, #280]	@ (8003098 <socket+0x214>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	b291      	uxth	r1, r2
 8002f86:	4a44      	ldr	r2, [pc, #272]	@ (8003098 <socket+0x214>)
 8002f88:	8011      	strh	r1, [r2, #0]
 8002f8a:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8002f8c:	4b42      	ldr	r3, [pc, #264]	@ (8003098 <socket+0x214>)
 8002f8e:	881b      	ldrh	r3, [r3, #0]
 8002f90:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d103      	bne.n	8002fa0 <socket+0x11c>
 8002f98:	4b3f      	ldr	r3, [pc, #252]	@ (8003098 <socket+0x214>)
 8002f9a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8002f9e:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8002fac:	461a      	mov	r2, r3
 8002fae:	88bb      	ldrh	r3, [r7, #4]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	4610      	mov	r0, r2
 8002fba:	f7ff fcc9 	bl	8002950 <WIZCHIP_WRITE>
 8002fbe:	79fb      	ldrb	r3, [r7, #7]
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	3301      	adds	r3, #1
 8002fc4:	00db      	lsls	r3, r3, #3
 8002fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fca:	461a      	mov	r2, r3
 8002fcc:	88bb      	ldrh	r3, [r7, #4]
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f7ff fcbc 	bl	8002950 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8002fd8:	79fb      	ldrb	r3, [r7, #7]
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	3301      	adds	r3, #1
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f7ff fcb2 	bl	8002950 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8002fec:	bf00      	nop
 8002fee:	79fb      	ldrb	r3, [r7, #7]
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	00db      	lsls	r3, r3, #3
 8002ff6:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff fc5c 	bl	80028b8 <WIZCHIP_READ>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1f3      	bne.n	8002fee <socket+0x16a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	2201      	movs	r2, #1
 800300a:	fa02 f303 	lsl.w	r3, r2, r3
 800300e:	b21b      	sxth	r3, r3
 8003010:	43db      	mvns	r3, r3
 8003012:	b21a      	sxth	r2, r3
 8003014:	4b21      	ldr	r3, [pc, #132]	@ (800309c <socket+0x218>)
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	b21b      	sxth	r3, r3
 800301a:	4013      	ands	r3, r2
 800301c:	b21b      	sxth	r3, r3
 800301e:	b29a      	uxth	r2, r3
 8003020:	4b1e      	ldr	r3, [pc, #120]	@ (800309c <socket+0x218>)
 8003022:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	f003 0201 	and.w	r2, r3, #1
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	b21a      	sxth	r2, r3
 8003032:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <socket+0x218>)
 8003034:	881b      	ldrh	r3, [r3, #0]
 8003036:	b21b      	sxth	r3, r3
 8003038:	4313      	orrs	r3, r2
 800303a:	b21b      	sxth	r3, r3
 800303c:	b29a      	uxth	r2, r3
 800303e:	4b17      	ldr	r3, [pc, #92]	@ (800309c <socket+0x218>)
 8003040:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	2201      	movs	r2, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	b21b      	sxth	r3, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	b21a      	sxth	r2, r3
 8003050:	4b13      	ldr	r3, [pc, #76]	@ (80030a0 <socket+0x21c>)
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	b21b      	sxth	r3, r3
 8003056:	4013      	ands	r3, r2
 8003058:	b21b      	sxth	r3, r3
 800305a:	b29a      	uxth	r2, r3
 800305c:	4b10      	ldr	r3, [pc, #64]	@ (80030a0 <socket+0x21c>)
 800305e:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	4a10      	ldr	r2, [pc, #64]	@ (80030a4 <socket+0x220>)
 8003064:	2100      	movs	r1, #0
 8003066:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	4a0e      	ldr	r2, [pc, #56]	@ (80030a8 <socket+0x224>)
 800306e:	2100      	movs	r1, #0
 8003070:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8003072:	bf00      	nop
 8003074:	79fb      	ldrb	r3, [r7, #7]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	3301      	adds	r3, #1
 800307a:	00db      	lsls	r3, r3, #3
 800307c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fc19 	bl	80028b8 <WIZCHIP_READ>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d0f3      	beq.n	8003074 <socket+0x1f0>
   return (int8_t)sn;
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	bd90      	pop	{r4, r7, pc}
 8003098:	20000040 	.word	0x20000040
 800309c:	200009ce 	.word	0x200009ce
 80030a0:	200009d0 	.word	0x200009d0
 80030a4:	200009d4 	.word	0x200009d4
 80030a8:	200009e4 	.word	0x200009e4

080030ac <close>:

int8_t close(uint8_t sn)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	4603      	mov	r3, r0
 80030b4:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	2b08      	cmp	r3, #8
 80030ba:	d902      	bls.n	80030c2 <close+0x16>
 80030bc:	f04f 33ff 	mov.w	r3, #4294967295
 80030c0:	e055      	b.n	800316e <close+0xc2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	3301      	adds	r3, #1
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030ce:	2110      	movs	r1, #16
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff fc3d 	bl	8002950 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 80030d6:	bf00      	nop
 80030d8:	79fb      	ldrb	r3, [r7, #7]
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	3301      	adds	r3, #1
 80030de:	00db      	lsls	r3, r3, #3
 80030e0:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fbe7 	bl	80028b8 <WIZCHIP_READ>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d1f3      	bne.n	80030d8 <close+0x2c>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 80030f0:	79fb      	ldrb	r3, [r7, #7]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	3301      	adds	r3, #1
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80030fc:	211f      	movs	r1, #31
 80030fe:	4618      	mov	r0, r3
 8003100:	f7ff fc26 	bl	8002950 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	2201      	movs	r2, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	b21b      	sxth	r3, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	b21a      	sxth	r2, r3
 8003112:	4b19      	ldr	r3, [pc, #100]	@ (8003178 <close+0xcc>)
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	b21b      	sxth	r3, r3
 8003118:	4013      	ands	r3, r2
 800311a:	b21b      	sxth	r3, r3
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b16      	ldr	r3, [pc, #88]	@ (8003178 <close+0xcc>)
 8003120:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8003122:	79fb      	ldrb	r3, [r7, #7]
 8003124:	2201      	movs	r2, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	b21b      	sxth	r3, r3
 800312c:	43db      	mvns	r3, r3
 800312e:	b21a      	sxth	r2, r3
 8003130:	4b12      	ldr	r3, [pc, #72]	@ (800317c <close+0xd0>)
 8003132:	881b      	ldrh	r3, [r3, #0]
 8003134:	b21b      	sxth	r3, r3
 8003136:	4013      	ands	r3, r2
 8003138:	b21b      	sxth	r3, r3
 800313a:	b29a      	uxth	r2, r3
 800313c:	4b0f      	ldr	r3, [pc, #60]	@ (800317c <close+0xd0>)
 800313e:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	4a0f      	ldr	r2, [pc, #60]	@ (8003180 <close+0xd4>)
 8003144:	2100      	movs	r1, #0
 8003146:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	4a0d      	ldr	r2, [pc, #52]	@ (8003184 <close+0xd8>)
 800314e:	2100      	movs	r1, #0
 8003150:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8003152:	bf00      	nop
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	3301      	adds	r3, #1
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fba9 	bl	80028b8 <WIZCHIP_READ>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1f3      	bne.n	8003154 <close+0xa8>
	return SOCK_OK;
 800316c:	2301      	movs	r3, #1
}
 800316e:	4618      	mov	r0, r3
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	200009ce 	.word	0x200009ce
 800317c:	200009d0 	.word	0x200009d0
 8003180:	200009d4 	.word	0x200009d4
 8003184:	200009e4 	.word	0x200009e4

08003188 <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	4603      	mov	r3, r0
 8003190:	6039      	str	r1, [r7, #0]
 8003192:	71fb      	strb	r3, [r7, #7]
 8003194:	4613      	mov	r3, r2
 8003196:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8003198:	79fb      	ldrb	r3, [r7, #7]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d902      	bls.n	80031a4 <connect+0x1c>
 800319e:	f04f 33ff 	mov.w	r3, #4294967295
 80031a2:	e0c6      	b.n	8003332 <connect+0x1aa>
   CHECK_SOCKMODE(Sn_MR_TCP);
 80031a4:	79fb      	ldrb	r3, [r7, #7]
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	3301      	adds	r3, #1
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff fb83 	bl	80028b8 <WIZCHIP_READ>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f003 030f 	and.w	r3, r3, #15
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d002      	beq.n	80031c2 <connect+0x3a>
 80031bc:	f06f 0304 	mvn.w	r3, #4
 80031c0:	e0b7      	b.n	8003332 <connect+0x1aa>
   CHECK_SOCKINIT();
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	3301      	adds	r3, #1
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fb72 	bl	80028b8 <WIZCHIP_READ>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b13      	cmp	r3, #19
 80031d8:	d002      	beq.n	80031e0 <connect+0x58>
 80031da:	f06f 0302 	mvn.w	r3, #2
 80031de:	e0a8      	b.n	8003332 <connect+0x1aa>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	021b      	lsls	r3, r3, #8
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	3201      	adds	r2, #1
 80031ee:	7812      	ldrb	r2, [r2, #0]
 80031f0:	4413      	add	r3, r2
 80031f2:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	021b      	lsls	r3, r3, #8
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	3202      	adds	r2, #2
 80031fc:	7812      	ldrb	r2, [r2, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	021b      	lsls	r3, r3, #8
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	3203      	adds	r2, #3
 800320a:	7812      	ldrb	r2, [r2, #0]
 800320c:	4413      	add	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003216:	d002      	beq.n	800321e <connect+0x96>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <connect+0x9c>
 800321e:	f06f 030b 	mvn.w	r3, #11
 8003222:	e086      	b.n	8003332 <connect+0x1aa>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8003224:	88bb      	ldrh	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <connect+0xa8>
 800322a:	f06f 030a 	mvn.w	r3, #10
 800322e:	e080      	b.n	8003332 <connect+0x1aa>
	setSn_DIPR(sn,addr);
 8003230:	79fb      	ldrb	r3, [r7, #7]
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	3301      	adds	r3, #1
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 800323c:	2204      	movs	r2, #4
 800323e:	6839      	ldr	r1, [r7, #0]
 8003240:	4618      	mov	r0, r3
 8003242:	f7ff fc33 	bl	8002aac <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8003246:	79fb      	ldrb	r3, [r7, #7]
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	3301      	adds	r3, #1
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003252:	461a      	mov	r2, r3
 8003254:	88bb      	ldrh	r3, [r7, #4]
 8003256:	0a1b      	lsrs	r3, r3, #8
 8003258:	b29b      	uxth	r3, r3
 800325a:	b2db      	uxtb	r3, r3
 800325c:	4619      	mov	r1, r3
 800325e:	4610      	mov	r0, r2
 8003260:	f7ff fb76 	bl	8002950 <WIZCHIP_WRITE>
 8003264:	79fb      	ldrb	r3, [r7, #7]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	3301      	adds	r3, #1
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 8003270:	461a      	mov	r2, r3
 8003272:	88bb      	ldrh	r3, [r7, #4]
 8003274:	b2db      	uxtb	r3, r3
 8003276:	4619      	mov	r1, r3
 8003278:	4610      	mov	r0, r2
 800327a:	f7ff fb69 	bl	8002950 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	3301      	adds	r3, #1
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800328a:	2104      	movs	r1, #4
 800328c:	4618      	mov	r0, r3
 800328e:	f7ff fb5f 	bl	8002950 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8003292:	bf00      	nop
 8003294:	79fb      	ldrb	r3, [r7, #7]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3301      	adds	r3, #1
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff fb09 	bl	80028b8 <WIZCHIP_READ>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1f3      	bne.n	8003294 <connect+0x10c>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80032ac:	4b23      	ldr	r3, [pc, #140]	@ (800333c <connect+0x1b4>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	461a      	mov	r2, r3
 80032b2:	79fb      	ldrb	r3, [r7, #7]
 80032b4:	fa42 f303 	asr.w	r3, r2, r3
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d02b      	beq.n	8003318 <connect+0x190>
 80032c0:	2300      	movs	r3, #0
 80032c2:	e036      	b.n	8003332 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 80032c4:	79fb      	ldrb	r3, [r7, #7]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	3301      	adds	r3, #1
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff faf1 	bl	80028b8 <WIZCHIP_READ>
 80032d6:	4603      	mov	r3, r0
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00c      	beq.n	80032fa <connect+0x172>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 80032e0:	79fb      	ldrb	r3, [r7, #7]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3301      	adds	r3, #1
 80032e6:	00db      	lsls	r3, r3, #3
 80032e8:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80032ec:	2108      	movs	r1, #8
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fb2e 	bl	8002950 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 80032f4:	f06f 030c 	mvn.w	r3, #12
 80032f8:	e01b      	b.n	8003332 <connect+0x1aa>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 80032fa:	79fb      	ldrb	r3, [r7, #7]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	3301      	adds	r3, #1
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fad6 	bl	80028b8 <WIZCHIP_READ>
 800330c:	4603      	mov	r3, r0
 800330e:	2b00      	cmp	r3, #0
 8003310:	d102      	bne.n	8003318 <connect+0x190>
		{
			return SOCKERR_SOCKCLOSED;
 8003312:	f06f 0303 	mvn.w	r3, #3
 8003316:	e00c      	b.n	8003332 <connect+0x1aa>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8003318:	79fb      	ldrb	r3, [r7, #7]
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	3301      	adds	r3, #1
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fac7 	bl	80028b8 <WIZCHIP_READ>
 800332a:	4603      	mov	r3, r0
 800332c:	2b17      	cmp	r3, #23
 800332e:	d1c9      	bne.n	80032c4 <connect+0x13c>
		}
	}
   
   return SOCK_OK;
 8003330:	2301      	movs	r3, #1
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200009ce 	.word	0x200009ce

08003340 <send>:
	}
	return SOCK_OK;
}

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	6039      	str	r1, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
 800334c:	4613      	mov	r3, r2
 800334e:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8003354:	2300      	movs	r3, #0
 8003356:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 8003358:	79fb      	ldrb	r3, [r7, #7]
 800335a:	2b08      	cmp	r3, #8
 800335c:	d902      	bls.n	8003364 <send+0x24>
 800335e:	f04f 33ff 	mov.w	r3, #4294967295
 8003362:	e0dd      	b.n	8003520 <send+0x1e0>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	3301      	adds	r3, #1
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4618      	mov	r0, r3
 800336e:	f7ff faa3 	bl	80028b8 <WIZCHIP_READ>
 8003372:	4603      	mov	r3, r0
 8003374:	f003 030f 	and.w	r3, r3, #15
 8003378:	2b01      	cmp	r3, #1
 800337a:	d002      	beq.n	8003382 <send+0x42>
 800337c:	f06f 0304 	mvn.w	r3, #4
 8003380:	e0ce      	b.n	8003520 <send+0x1e0>
   CHECK_SOCKDATA();
 8003382:	88bb      	ldrh	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <send+0x4e>
 8003388:	f06f 030d 	mvn.w	r3, #13
 800338c:	e0c8      	b.n	8003520 <send+0x1e0>
   tmp = getSn_SR(sn);
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3301      	adds	r3, #1
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fa8c 	bl	80028b8 <WIZCHIP_READ>
 80033a0:	4603      	mov	r3, r0
 80033a2:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80033a4:	7bfb      	ldrb	r3, [r7, #15]
 80033a6:	2b17      	cmp	r3, #23
 80033a8:	d005      	beq.n	80033b6 <send+0x76>
 80033aa:	7bfb      	ldrb	r3, [r7, #15]
 80033ac:	2b1c      	cmp	r3, #28
 80033ae:	d002      	beq.n	80033b6 <send+0x76>
 80033b0:	f06f 0306 	mvn.w	r3, #6
 80033b4:	e0b4      	b.n	8003520 <send+0x1e0>
   if( sock_is_sending & (1<<sn) )
 80033b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003528 <send+0x1e8>)
 80033b8:	881b      	ldrh	r3, [r3, #0]
 80033ba:	461a      	mov	r2, r3
 80033bc:	79fb      	ldrb	r3, [r7, #7]
 80033be:	fa42 f303 	asr.w	r3, r2, r3
 80033c2:	f003 0301 	and.w	r3, r3, #1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d039      	beq.n	800343e <send+0xfe>
   {
      tmp = getSn_IR(sn);
 80033ca:	79fb      	ldrb	r3, [r7, #7]
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	3301      	adds	r3, #1
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7ff fa6e 	bl	80028b8 <WIZCHIP_READ>
 80033dc:	4603      	mov	r3, r0
 80033de:	f003 031f 	and.w	r3, r3, #31
 80033e2:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	f003 0310 	and.w	r3, r3, #16
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d019      	beq.n	8003422 <send+0xe2>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3301      	adds	r3, #1
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80033fa:	2110      	movs	r1, #16
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff faa7 	bl	8002950 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8003402:	79fb      	ldrb	r3, [r7, #7]
 8003404:	2201      	movs	r2, #1
 8003406:	fa02 f303 	lsl.w	r3, r2, r3
 800340a:	b21b      	sxth	r3, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	b21a      	sxth	r2, r3
 8003410:	4b45      	ldr	r3, [pc, #276]	@ (8003528 <send+0x1e8>)
 8003412:	881b      	ldrh	r3, [r3, #0]
 8003414:	b21b      	sxth	r3, r3
 8003416:	4013      	ands	r3, r2
 8003418:	b21b      	sxth	r3, r3
 800341a:	b29a      	uxth	r2, r3
 800341c:	4b42      	ldr	r3, [pc, #264]	@ (8003528 <send+0x1e8>)
 800341e:	801a      	strh	r2, [r3, #0]
 8003420:	e00d      	b.n	800343e <send+0xfe>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d006      	beq.n	800343a <send+0xfa>
      {
         close(sn);
 800342c:	79fb      	ldrb	r3, [r7, #7]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fe3c 	bl	80030ac <close>
         return SOCKERR_TIMEOUT;
 8003434:	f06f 030c 	mvn.w	r3, #12
 8003438:	e072      	b.n	8003520 <send+0x1e0>
      }
      else return SOCK_BUSY;
 800343a:	2300      	movs	r3, #0
 800343c:	e070      	b.n	8003520 <send+0x1e0>
   }
   freesize = getSn_TxMAX(sn);
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	3301      	adds	r3, #1
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 800344a:	4618      	mov	r0, r3
 800344c:	f7ff fa34 	bl	80028b8 <WIZCHIP_READ>
 8003450:	4603      	mov	r3, r0
 8003452:	029b      	lsls	r3, r3, #10
 8003454:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003456:	88ba      	ldrh	r2, [r7, #4]
 8003458:	89bb      	ldrh	r3, [r7, #12]
 800345a:	429a      	cmp	r2, r3
 800345c:	d901      	bls.n	8003462 <send+0x122>
 800345e:	89bb      	ldrh	r3, [r7, #12]
 8003460:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8003462:	79fb      	ldrb	r3, [r7, #7]
 8003464:	4618      	mov	r0, r3
 8003466:	f7ff fb81 	bl	8002b6c <getSn_TX_FSR>
 800346a:	4603      	mov	r3, r0
 800346c:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	3301      	adds	r3, #1
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800347a:	4618      	mov	r0, r3
 800347c:	f7ff fa1c 	bl	80028b8 <WIZCHIP_READ>
 8003480:	4603      	mov	r3, r0
 8003482:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 8003484:	7bfb      	ldrb	r3, [r7, #15]
 8003486:	2b17      	cmp	r3, #23
 8003488:	d009      	beq.n	800349e <send+0x15e>
 800348a:	7bfb      	ldrb	r3, [r7, #15]
 800348c:	2b1c      	cmp	r3, #28
 800348e:	d006      	beq.n	800349e <send+0x15e>
      {
         close(sn);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff fe0a 	bl	80030ac <close>
         return SOCKERR_SOCKSTATUS;
 8003498:	f06f 0306 	mvn.w	r3, #6
 800349c:	e040      	b.n	8003520 <send+0x1e0>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 800349e:	4b23      	ldr	r3, [pc, #140]	@ (800352c <send+0x1ec>)
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	461a      	mov	r2, r3
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	fa42 f303 	asr.w	r3, r2, r3
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <send+0x17e>
 80034b2:	88ba      	ldrh	r2, [r7, #4]
 80034b4:	89bb      	ldrh	r3, [r7, #12]
 80034b6:	429a      	cmp	r2, r3
 80034b8:	d901      	bls.n	80034be <send+0x17e>
 80034ba:	2300      	movs	r3, #0
 80034bc:	e030      	b.n	8003520 <send+0x1e0>
      if(len <= freesize) break;
 80034be:	88ba      	ldrh	r2, [r7, #4]
 80034c0:	89bb      	ldrh	r3, [r7, #12]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d900      	bls.n	80034c8 <send+0x188>
      freesize = getSn_TX_FSR(sn);
 80034c6:	e7cc      	b.n	8003462 <send+0x122>
      if(len <= freesize) break;
 80034c8:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80034ca:	88ba      	ldrh	r2, [r7, #4]
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	6839      	ldr	r1, [r7, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff fbdd 	bl	8002c90 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80034d6:	79fb      	ldrb	r3, [r7, #7]
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	3301      	adds	r3, #1
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034e2:	2120      	movs	r1, #32
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7ff fa33 	bl	8002950 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 80034ea:	bf00      	nop
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	3301      	adds	r3, #1
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff f9dd 	bl	80028b8 <WIZCHIP_READ>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1f3      	bne.n	80034ec <send+0x1ac>
   sock_is_sending |= (1 << sn);
 8003504:	79fb      	ldrb	r3, [r7, #7]
 8003506:	2201      	movs	r2, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	b21a      	sxth	r2, r3
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <send+0x1e8>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	b21b      	sxth	r3, r3
 8003514:	4313      	orrs	r3, r2
 8003516:	b21b      	sxth	r3, r3
 8003518:	b29a      	uxth	r2, r3
 800351a:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <send+0x1e8>)
 800351c:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 800351e:	88bb      	ldrh	r3, [r7, #4]
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200009d0 	.word	0x200009d0
 800352c:	200009ce 	.word	0x200009ce

08003530 <sendto>:
   //return len;
   return (int32_t)len;
}

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b086      	sub	sp, #24
 8003534:	af00      	add	r7, sp, #0
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607b      	str	r3, [r7, #4]
 800353a:	4603      	mov	r3, r0
 800353c:	73fb      	strb	r3, [r7, #15]
 800353e:	4613      	mov	r3, r2
 8003540:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 8003542:	2300      	movs	r3, #0
 8003544:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 8003546:	2300      	movs	r3, #0
 8003548:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	2b08      	cmp	r3, #8
 800354e:	d902      	bls.n	8003556 <sendto+0x26>
 8003550:	f04f 33ff 	mov.w	r3, #4294967295
 8003554:	e11a      	b.n	800378c <sendto+0x25c>
   switch(getSn_MR(sn) & 0x0F)
 8003556:	7bfb      	ldrb	r3, [r7, #15]
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	3301      	adds	r3, #1
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff f9aa 	bl	80028b8 <WIZCHIP_READ>
 8003564:	4603      	mov	r3, r0
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	3b02      	subs	r3, #2
 800356c:	2b02      	cmp	r3, #2
 800356e:	d902      	bls.n	8003576 <sendto+0x46>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 8003570:	f06f 0304 	mvn.w	r3, #4
 8003574:	e10a      	b.n	800378c <sendto+0x25c>
         break;
 8003576:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8003578:	89bb      	ldrh	r3, [r7, #12]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <sendto+0x54>
 800357e:	f06f 030d 	mvn.w	r3, #13
 8003582:	e103      	b.n	800378c <sendto+0x25c>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	3201      	adds	r2, #1
 8003592:	7812      	ldrb	r2, [r2, #0]
 8003594:	4413      	add	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	3202      	adds	r2, #2
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	4413      	add	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	021b      	lsls	r3, r3, #8
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	3203      	adds	r2, #3
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	4413      	add	r3, r2
 80035b2:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10e      	bne.n	80035d8 <sendto+0xa8>
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3301      	adds	r3, #1
 80035c0:	00db      	lsls	r3, r3, #3
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff f978 	bl	80028b8 <WIZCHIP_READ>
 80035c8:	4603      	mov	r3, r0
 80035ca:	f003 0304 	and.w	r3, r3, #4
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	d002      	beq.n	80035d8 <sendto+0xa8>
 80035d2:	f06f 030b 	mvn.w	r3, #11
 80035d6:	e0d9      	b.n	800378c <sendto+0x25c>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 80035d8:	8c3b      	ldrh	r3, [r7, #32]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10e      	bne.n	80035fc <sendto+0xcc>
 80035de:	7bfb      	ldrb	r3, [r7, #15]
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	3301      	adds	r3, #1
 80035e4:	00db      	lsls	r3, r3, #3
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f966 	bl	80028b8 <WIZCHIP_READ>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f003 0304 	and.w	r3, r3, #4
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d002      	beq.n	80035fc <sendto+0xcc>
 80035f6:	f06f 030a 	mvn.w	r3, #10
 80035fa:	e0c7      	b.n	800378c <sendto+0x25c>
   tmp = getSn_SR(sn);
 80035fc:	7bfb      	ldrb	r3, [r7, #15]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	3301      	adds	r3, #1
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003608:	4618      	mov	r0, r3
 800360a:	f7ff f955 	bl	80028b8 <WIZCHIP_READ>
 800360e:	4603      	mov	r3, r0
 8003610:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 8003612:	7dfb      	ldrb	r3, [r7, #23]
 8003614:	2b42      	cmp	r3, #66	@ 0x42
 8003616:	d008      	beq.n	800362a <sendto+0xfa>
 8003618:	7dfb      	ldrb	r3, [r7, #23]
 800361a:	2b22      	cmp	r3, #34	@ 0x22
 800361c:	d005      	beq.n	800362a <sendto+0xfa>
 800361e:	7dfb      	ldrb	r3, [r7, #23]
 8003620:	2b32      	cmp	r3, #50	@ 0x32
 8003622:	d002      	beq.n	800362a <sendto+0xfa>
 8003624:	f06f 0306 	mvn.w	r3, #6
 8003628:	e0b0      	b.n	800378c <sendto+0x25c>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 800362a:	7bfb      	ldrb	r3, [r7, #15]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	3301      	adds	r3, #1
 8003630:	00db      	lsls	r3, r3, #3
 8003632:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
 8003636:	2204      	movs	r2, #4
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fa36 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 8003640:	7bfb      	ldrb	r3, [r7, #15]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	3301      	adds	r3, #1
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800364c:	461a      	mov	r2, r3
 800364e:	8c3b      	ldrh	r3, [r7, #32]
 8003650:	0a1b      	lsrs	r3, r3, #8
 8003652:	b29b      	uxth	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	4619      	mov	r1, r3
 8003658:	4610      	mov	r0, r2
 800365a:	f7ff f979 	bl	8002950 <WIZCHIP_WRITE>
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	3301      	adds	r3, #1
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	f503 5388 	add.w	r3, r3, #4352	@ 0x1100
 800366a:	461a      	mov	r2, r3
 800366c:	8c3b      	ldrh	r3, [r7, #32]
 800366e:	b2db      	uxtb	r3, r3
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f7ff f96c 	bl	8002950 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8003678:	7bfb      	ldrb	r3, [r7, #15]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	3301      	adds	r3, #1
 800367e:	00db      	lsls	r3, r3, #3
 8003680:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 8003684:	4618      	mov	r0, r3
 8003686:	f7ff f917 	bl	80028b8 <WIZCHIP_READ>
 800368a:	4603      	mov	r3, r0
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 8003690:	89ba      	ldrh	r2, [r7, #12]
 8003692:	8abb      	ldrh	r3, [r7, #20]
 8003694:	429a      	cmp	r2, r3
 8003696:	d901      	bls.n	800369c <sendto+0x16c>
 8003698:	8abb      	ldrh	r3, [r7, #20]
 800369a:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fa64 	bl	8002b6c <getSn_TX_FSR>
 80036a4:	4603      	mov	r3, r0
 80036a6:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80036a8:	7bfb      	ldrb	r3, [r7, #15]
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3301      	adds	r3, #1
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7ff f8ff 	bl	80028b8 <WIZCHIP_READ>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d102      	bne.n	80036c6 <sendto+0x196>
 80036c0:	f06f 0303 	mvn.w	r3, #3
 80036c4:	e062      	b.n	800378c <sendto+0x25c>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80036c6:	4b33      	ldr	r3, [pc, #204]	@ (8003794 <sendto+0x264>)
 80036c8:	881b      	ldrh	r3, [r3, #0]
 80036ca:	461a      	mov	r2, r3
 80036cc:	7bfb      	ldrb	r3, [r7, #15]
 80036ce:	fa42 f303 	asr.w	r3, r2, r3
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d005      	beq.n	80036e6 <sendto+0x1b6>
 80036da:	89ba      	ldrh	r2, [r7, #12]
 80036dc:	8abb      	ldrh	r3, [r7, #20]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d901      	bls.n	80036e6 <sendto+0x1b6>
 80036e2:	2300      	movs	r3, #0
 80036e4:	e052      	b.n	800378c <sendto+0x25c>
      if(len <= freesize) break;
 80036e6:	89ba      	ldrh	r2, [r7, #12]
 80036e8:	8abb      	ldrh	r3, [r7, #20]
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d900      	bls.n	80036f0 <sendto+0x1c0>
      freesize = getSn_TX_FSR(sn);
 80036ee:	e7d5      	b.n	800369c <sendto+0x16c>
      if(len <= freesize) break;
 80036f0:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 80036f2:	89ba      	ldrh	r2, [r7, #12]
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	68b9      	ldr	r1, [r7, #8]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7ff fac9 	bl	8002c90 <wiz_send_data>
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80036fe:	7bfb      	ldrb	r3, [r7, #15]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	3301      	adds	r3, #1
 8003704:	00db      	lsls	r3, r3, #3
 8003706:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800370a:	2120      	movs	r1, #32
 800370c:	4618      	mov	r0, r3
 800370e:	f7ff f91f 	bl	8002950 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 8003712:	bf00      	nop
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3301      	adds	r3, #1
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff f8c9 	bl	80028b8 <WIZCHIP_READ>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f3      	bne.n	8003714 <sendto+0x1e4>
   while(1)
   {
      tmp = getSn_IR(sn);
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	3301      	adds	r3, #1
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003738:	4618      	mov	r0, r3
 800373a:	f7ff f8bd 	bl	80028b8 <WIZCHIP_READ>
 800373e:	4603      	mov	r3, r0
 8003740:	f003 031f 	and.w	r3, r3, #31
 8003744:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8003746:	7dfb      	ldrb	r3, [r7, #23]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00c      	beq.n	800376a <sendto+0x23a>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8003750:	7bfb      	ldrb	r3, [r7, #15]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	3301      	adds	r3, #1
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800375c:	2110      	movs	r1, #16
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f8f6 	bl	8002950 <WIZCHIP_WRITE>
         break;
 8003764:	bf00      	nop
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8003766:	89bb      	ldrh	r3, [r7, #12]
 8003768:	e010      	b.n	800378c <sendto+0x25c>
      else if(tmp & Sn_IR_TIMEOUT)
 800376a:	7dfb      	ldrb	r3, [r7, #23]
 800376c:	f003 0308 	and.w	r3, r3, #8
 8003770:	2b00      	cmp	r3, #0
 8003772:	d0db      	beq.n	800372c <sendto+0x1fc>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3301      	adds	r3, #1
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8003780:	2108      	movs	r1, #8
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f8e4 	bl	8002950 <WIZCHIP_WRITE>
         return SOCKERR_TIMEOUT;
 8003788:	f06f 030c 	mvn.w	r3, #12
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	200009ce 	.word	0x200009ce

08003798 <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b088      	sub	sp, #32
 800379c:	af00      	add	r7, sp, #0
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607b      	str	r3, [r7, #4]
 80037a2:	4603      	mov	r3, r0
 80037a4:	73fb      	strb	r3, [r7, #15]
 80037a6:	4613      	mov	r3, r2
 80037a8:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 80037aa:	2300      	movs	r3, #0
 80037ac:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 80037ae:	7bfb      	ldrb	r3, [r7, #15]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d902      	bls.n	80037ba <recvfrom+0x22>
 80037b4:	f04f 33ff 	mov.w	r3, #4294967295
 80037b8:	e1d2      	b.n	8003b60 <recvfrom+0x3c8>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	3301      	adds	r3, #1
 80037c0:	00db      	lsls	r3, r3, #3
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff f878 	bl	80028b8 <WIZCHIP_READ>
 80037c8:	4603      	mov	r3, r0
 80037ca:	777b      	strb	r3, [r7, #29]
 80037cc:	7f7b      	ldrb	r3, [r7, #29]
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3b02      	subs	r3, #2
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d902      	bls.n	80037de <recvfrom+0x46>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80037d8:	f06f 0304 	mvn.w	r3, #4
 80037dc:	e1c0      	b.n	8003b60 <recvfrom+0x3c8>
         break;
 80037de:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80037e0:	89bb      	ldrh	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d102      	bne.n	80037ec <recvfrom+0x54>
 80037e6:	f06f 030d 	mvn.w	r3, #13
 80037ea:	e1b9      	b.n	8003b60 <recvfrom+0x3c8>
   if(sock_remained_size[sn] == 0)
 80037ec:	7bfb      	ldrb	r3, [r7, #15]
 80037ee:	4a87      	ldr	r2, [pc, #540]	@ (8003a0c <recvfrom+0x274>)
 80037f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d128      	bne.n	800384a <recvfrom+0xb2>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80037f8:	7bfb      	ldrb	r3, [r7, #15]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f9ff 	bl	8002bfe <getSn_RX_RSR>
 8003800:	4603      	mov	r3, r0
 8003802:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8003804:	7bfb      	ldrb	r3, [r7, #15]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	3301      	adds	r3, #1
 800380a:	00db      	lsls	r3, r3, #3
 800380c:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f851 	bl	80028b8 <WIZCHIP_READ>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <recvfrom+0x8a>
 800381c:	f06f 0303 	mvn.w	r3, #3
 8003820:	e19e      	b.n	8003b60 <recvfrom+0x3c8>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 8003822:	4b7b      	ldr	r3, [pc, #492]	@ (8003a10 <recvfrom+0x278>)
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	461a      	mov	r2, r3
 8003828:	7bfb      	ldrb	r3, [r7, #15]
 800382a:	fa42 f303 	asr.w	r3, r2, r3
 800382e:	f003 0301 	and.w	r3, r3, #1
 8003832:	2b00      	cmp	r3, #0
 8003834:	d004      	beq.n	8003840 <recvfrom+0xa8>
 8003836:	8bfb      	ldrh	r3, [r7, #30]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <recvfrom+0xa8>
 800383c:	2300      	movs	r3, #0
 800383e:	e18f      	b.n	8003b60 <recvfrom+0x3c8>
         if(pack_len != 0) break;
 8003840:	8bfb      	ldrh	r3, [r7, #30]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d100      	bne.n	8003848 <recvfrom+0xb0>
         pack_len = getSn_RX_RSR(sn);
 8003846:	e7d7      	b.n	80037f8 <recvfrom+0x60>
         if(pack_len != 0) break;
 8003848:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 800384a:	7f7b      	ldrb	r3, [r7, #29]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	2b04      	cmp	r3, #4
 8003852:	d078      	beq.n	8003946 <recvfrom+0x1ae>
 8003854:	2b04      	cmp	r3, #4
 8003856:	f300 8140 	bgt.w	8003ada <recvfrom+0x342>
 800385a:	2b02      	cmp	r3, #2
 800385c:	d003      	beq.n	8003866 <recvfrom+0xce>
 800385e:	2b03      	cmp	r3, #3
 8003860:	f000 80da 	beq.w	8003a18 <recvfrom+0x280>
 8003864:	e139      	b.n	8003ada <recvfrom+0x342>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4a68      	ldr	r2, [pc, #416]	@ (8003a0c <recvfrom+0x274>)
 800386a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d151      	bne.n	8003916 <recvfrom+0x17e>
	      {
   			wiz_recv_data(sn, head, 8);
 8003872:	f107 0114 	add.w	r1, r7, #20
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	2208      	movs	r2, #8
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fa62 	bl	8002d44 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3301      	adds	r3, #1
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800388c:	2140      	movs	r1, #64	@ 0x40
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff f85e 	bl	8002950 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003894:	bf00      	nop
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	3301      	adds	r3, #1
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80038a2:	4618      	mov	r0, r3
 80038a4:	f7ff f808 	bl	80028b8 <WIZCHIP_READ>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1f3      	bne.n	8003896 <recvfrom+0xfe>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 80038ae:	7d3a      	ldrb	r2, [r7, #20]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3301      	adds	r3, #1
 80038b8:	7d7a      	ldrb	r2, [r7, #21]
 80038ba:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3302      	adds	r3, #2
 80038c0:	7dba      	ldrb	r2, [r7, #22]
 80038c2:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3303      	adds	r3, #3
 80038c8:	7dfa      	ldrb	r2, [r7, #23]
 80038ca:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80038cc:	7e3b      	ldrb	r3, [r7, #24]
 80038ce:	461a      	mov	r2, r3
 80038d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d2:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d6:	881b      	ldrh	r3, [r3, #0]
 80038d8:	021b      	lsls	r3, r3, #8
 80038da:	b29b      	uxth	r3, r3
 80038dc:	7e7a      	ldrb	r2, [r7, #25]
 80038de:	4413      	add	r3, r2
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e4:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80038e6:	7eba      	ldrb	r2, [r7, #26]
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	4611      	mov	r1, r2
 80038ec:	4a47      	ldr	r2, [pc, #284]	@ (8003a0c <recvfrom+0x274>)
 80038ee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80038f2:	7bfb      	ldrb	r3, [r7, #15]
 80038f4:	4a45      	ldr	r2, [pc, #276]	@ (8003a0c <recvfrom+0x274>)
 80038f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	7efb      	ldrb	r3, [r7, #27]
 8003900:	4619      	mov	r1, r3
 8003902:	7bfb      	ldrb	r3, [r7, #15]
 8003904:	440a      	add	r2, r1
 8003906:	b291      	uxth	r1, r2
 8003908:	4a40      	ldr	r2, [pc, #256]	@ (8003a0c <recvfrom+0x274>)
 800390a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 800390e:	7bfb      	ldrb	r3, [r7, #15]
 8003910:	4a40      	ldr	r2, [pc, #256]	@ (8003a14 <recvfrom+0x27c>)
 8003912:	2180      	movs	r1, #128	@ 0x80
 8003914:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	4a3c      	ldr	r2, [pc, #240]	@ (8003a0c <recvfrom+0x274>)
 800391a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800391e:	89ba      	ldrh	r2, [r7, #12]
 8003920:	429a      	cmp	r2, r3
 8003922:	d202      	bcs.n	800392a <recvfrom+0x192>
 8003924:	89bb      	ldrh	r3, [r7, #12]
 8003926:	83fb      	strh	r3, [r7, #30]
 8003928:	e004      	b.n	8003934 <recvfrom+0x19c>
			else pack_len = sock_remained_size[sn];
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	4a37      	ldr	r2, [pc, #220]	@ (8003a0c <recvfrom+0x274>)
 800392e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003932:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8003934:	8bfb      	ldrh	r3, [r7, #30]
 8003936:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003938:	8bfa      	ldrh	r2, [r7, #30]
 800393a:	7bfb      	ldrb	r3, [r7, #15]
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	4618      	mov	r0, r3
 8003940:	f7ff fa00 	bl	8002d44 <wiz_recv_data>
			break;
 8003944:	e0d5      	b.n	8003af2 <recvfrom+0x35a>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	4a30      	ldr	r2, [pc, #192]	@ (8003a0c <recvfrom+0x274>)
 800394a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d145      	bne.n	80039de <recvfrom+0x246>
	      {
   			wiz_recv_data(sn, head, 2);
 8003952:	f107 0114 	add.w	r1, r7, #20
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	2202      	movs	r2, #2
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff f9f2 	bl	8002d44 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003960:	7bfb      	ldrb	r3, [r7, #15]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	3301      	adds	r3, #1
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 800396c:	2140      	movs	r1, #64	@ 0x40
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe ffee 	bl	8002950 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003974:	bf00      	nop
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	3301      	adds	r3, #1
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003982:	4618      	mov	r0, r3
 8003984:	f7fe ff98 	bl	80028b8 <WIZCHIP_READ>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f3      	bne.n	8003976 <recvfrom+0x1de>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 800398e:	7d3a      	ldrb	r2, [r7, #20]
 8003990:	7bfb      	ldrb	r3, [r7, #15]
 8003992:	4611      	mov	r1, r2
 8003994:	4a1d      	ldr	r2, [pc, #116]	@ (8003a0c <recvfrom+0x274>)
 8003996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800399a:	7bfb      	ldrb	r3, [r7, #15]
 800399c:	4a1b      	ldr	r2, [pc, #108]	@ (8003a0c <recvfrom+0x274>)
 800399e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039a2:	021b      	lsls	r3, r3, #8
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	7d7a      	ldrb	r2, [r7, #21]
 80039a8:	4413      	add	r3, r2
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	7bfb      	ldrb	r3, [r7, #15]
 80039ae:	3a02      	subs	r2, #2
 80039b0:	b291      	uxth	r1, r2
 80039b2:	4a16      	ldr	r2, [pc, #88]	@ (8003a0c <recvfrom+0x274>)
 80039b4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <recvfrom+0x274>)
 80039bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039c0:	f240 52ea 	movw	r2, #1514	@ 0x5ea
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d906      	bls.n	80039d6 <recvfrom+0x23e>
   			{
   			   close(sn);
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fb6e 	bl	80030ac <close>
   			   return SOCKFATAL_PACKLEN;
 80039d0:	f46f 737a 	mvn.w	r3, #1000	@ 0x3e8
 80039d4:	e0c4      	b.n	8003b60 <recvfrom+0x3c8>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	4a0e      	ldr	r2, [pc, #56]	@ (8003a14 <recvfrom+0x27c>)
 80039da:	2180      	movs	r1, #128	@ 0x80
 80039dc:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	4a0a      	ldr	r2, [pc, #40]	@ (8003a0c <recvfrom+0x274>)
 80039e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039e6:	89ba      	ldrh	r2, [r7, #12]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d202      	bcs.n	80039f2 <recvfrom+0x25a>
 80039ec:	89bb      	ldrh	r3, [r7, #12]
 80039ee:	83fb      	strh	r3, [r7, #30]
 80039f0:	e004      	b.n	80039fc <recvfrom+0x264>
			else pack_len = sock_remained_size[sn];
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	4a05      	ldr	r2, [pc, #20]	@ (8003a0c <recvfrom+0x274>)
 80039f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80039fa:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80039fc:	8bfa      	ldrh	r2, [r7, #30]
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
 8003a00:	68b9      	ldr	r1, [r7, #8]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7ff f99e 	bl	8002d44 <wiz_recv_data>
		   break;
 8003a08:	e073      	b.n	8003af2 <recvfrom+0x35a>
 8003a0a:	bf00      	nop
 8003a0c:	200009d4 	.word	0x200009d4
 8003a10:	200009ce 	.word	0x200009ce
 8003a14:	200009e4 	.word	0x200009e4
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	4a53      	ldr	r2, [pc, #332]	@ (8003b68 <recvfrom+0x3d0>)
 8003a1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d144      	bne.n	8003aae <recvfrom+0x316>
		   {
   			wiz_recv_data(sn, head, 6);
 8003a24:	f107 0114 	add.w	r1, r7, #20
 8003a28:	7bfb      	ldrb	r3, [r7, #15]
 8003a2a:	2206      	movs	r2, #6
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f7ff f989 	bl	8002d44 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8003a32:	7bfb      	ldrb	r3, [r7, #15]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	3301      	adds	r3, #1
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a3e:	2140      	movs	r1, #64	@ 0x40
 8003a40:	4618      	mov	r0, r3
 8003a42:	f7fe ff85 	bl	8002950 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8003a46:	bf00      	nop
 8003a48:	7bfb      	ldrb	r3, [r7, #15]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7fe ff2f 	bl	80028b8 <WIZCHIP_READ>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1f3      	bne.n	8003a48 <recvfrom+0x2b0>
   			addr[0] = head[0];
 8003a60:	7d3a      	ldrb	r2, [r7, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	7d7a      	ldrb	r2, [r7, #21]
 8003a6c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	3302      	adds	r3, #2
 8003a72:	7dba      	ldrb	r2, [r7, #22]
 8003a74:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3303      	adds	r3, #3
 8003a7a:	7dfa      	ldrb	r2, [r7, #23]
 8003a7c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8003a7e:	7e3a      	ldrb	r2, [r7, #24]
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	4611      	mov	r1, r2
 8003a84:	4a38      	ldr	r2, [pc, #224]	@ (8003b68 <recvfrom+0x3d0>)
 8003a86:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
 8003a8c:	4a36      	ldr	r2, [pc, #216]	@ (8003b68 <recvfrom+0x3d0>)
 8003a8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a92:	021b      	lsls	r3, r3, #8
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	7e7b      	ldrb	r3, [r7, #25]
 8003a98:	4619      	mov	r1, r3
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
 8003a9c:	440a      	add	r2, r1
 8003a9e:	b291      	uxth	r1, r2
 8003aa0:	4a31      	ldr	r2, [pc, #196]	@ (8003b68 <recvfrom+0x3d0>)
 8003aa2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	@ (8003b6c <recvfrom+0x3d4>)
 8003aaa:	2180      	movs	r1, #128	@ 0x80
 8003aac:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8003b68 <recvfrom+0x3d0>)
 8003ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ab6:	89ba      	ldrh	r2, [r7, #12]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d202      	bcs.n	8003ac2 <recvfrom+0x32a>
 8003abc:	89bb      	ldrh	r3, [r7, #12]
 8003abe:	83fb      	strh	r3, [r7, #30]
 8003ac0:	e004      	b.n	8003acc <recvfrom+0x334>
			else pack_len = sock_remained_size[sn];
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	4a28      	ldr	r2, [pc, #160]	@ (8003b68 <recvfrom+0x3d0>)
 8003ac6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003aca:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8003acc:	8bfa      	ldrh	r2, [r7, #30]
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff f936 	bl	8002d44 <wiz_recv_data>
			break;
 8003ad8:	e00b      	b.n	8003af2 <recvfrom+0x35a>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8003ada:	8bfa      	ldrh	r2, [r7, #30]
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7ff f989 	bl	8002df8 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	491f      	ldr	r1, [pc, #124]	@ (8003b68 <recvfrom+0x3d0>)
 8003aea:	8bfa      	ldrh	r2, [r7, #30]
 8003aec:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8003af0:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8003af2:	7bfb      	ldrb	r3, [r7, #15]
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	3301      	adds	r3, #1
 8003af8:	00db      	lsls	r3, r3, #3
 8003afa:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003afe:	2140      	movs	r1, #64	@ 0x40
 8003b00:	4618      	mov	r0, r3
 8003b02:	f7fe ff25 	bl	8002950 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8003b06:	bf00      	nop
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fecf 	bl	80028b8 <WIZCHIP_READ>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1f3      	bne.n	8003b08 <recvfrom+0x370>
	sock_remained_size[sn] -= pack_len;
 8003b20:	7bfb      	ldrb	r3, [r7, #15]
 8003b22:	4a11      	ldr	r2, [pc, #68]	@ (8003b68 <recvfrom+0x3d0>)
 8003b24:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003b28:	7bfb      	ldrb	r3, [r7, #15]
 8003b2a:	8bfa      	ldrh	r2, [r7, #30]
 8003b2c:	1a8a      	subs	r2, r1, r2
 8003b2e:	b291      	uxth	r1, r2
 8003b30:	4a0d      	ldr	r2, [pc, #52]	@ (8003b68 <recvfrom+0x3d0>)
 8003b32:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	4a0b      	ldr	r2, [pc, #44]	@ (8003b68 <recvfrom+0x3d0>)
 8003b3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <recvfrom+0x3be>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <recvfrom+0x3d4>)
 8003b46:	5cd2      	ldrb	r2, [r2, r3]
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	f042 0201 	orr.w	r2, r2, #1
 8003b4e:	b2d1      	uxtb	r1, r2
 8003b50:	4a06      	ldr	r2, [pc, #24]	@ (8003b6c <recvfrom+0x3d4>)
 8003b52:	54d1      	strb	r1, [r2, r3]
 8003b54:	e003      	b.n	8003b5e <recvfrom+0x3c6>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	4a04      	ldr	r2, [pc, #16]	@ (8003b6c <recvfrom+0x3d4>)
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8003b5e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3720      	adds	r7, #32
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	200009d4 	.word	0x200009d4
 8003b6c:	200009e4 	.word	0x200009e4

08003b70 <SPIReadWrite>:
#include "stdio.h"

extern SPI_HandleTypeDef hspi1;

uint8_t SPIReadWrite(uint8_t data)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	4603      	mov	r3, r0
 8003b78:	71fb      	strb	r3, [r7, #7]
	//wait till FIFO has a free slot
	while((hspi1.Instance->SR & SPI_FLAG_TXE) != SPI_FLAG_TXE);
 8003b7a:	bf00      	nop
 8003b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bbc <SPIReadWrite+0x4c>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d1f8      	bne.n	8003b7c <SPIReadWrite+0xc>

	*(__IO uint8_t*)&hspi1.Instance->DR=data;
 8003b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003bbc <SPIReadWrite+0x4c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	330c      	adds	r3, #12
 8003b90:	79fa      	ldrb	r2, [r7, #7]
 8003b92:	701a      	strb	r2, [r3, #0]

	//Now wait till data arrives
	while((hspi1.Instance->SR & SPI_FLAG_RXNE)!=SPI_FLAG_RXNE);
 8003b94:	bf00      	nop
 8003b96:	4b09      	ldr	r3, [pc, #36]	@ (8003bbc <SPIReadWrite+0x4c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d1f8      	bne.n	8003b96 <SPIReadWrite+0x26>

	return (*(__IO uint8_t*)&hspi1.Instance->DR);
 8003ba4:	4b05      	ldr	r3, [pc, #20]	@ (8003bbc <SPIReadWrite+0x4c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	330c      	adds	r3, #12
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	b2db      	uxtb	r3, r3
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	200008f0 	.word	0x200008f0

08003bc0 <wizchip_select>:

void  wizchip_select(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2102      	movs	r1, #2
 8003bc8:	4802      	ldr	r0, [pc, #8]	@ (8003bd4 <wizchip_select+0x14>)
 8003bca:	f001 f9d5 	bl	8004f78 <HAL_GPIO_WritePin>
}
 8003bce:	bf00      	nop
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40020000 	.word	0x40020000

08003bd8 <wizchip_deselect>:

void  wizchip_deselect(void)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8003bdc:	2201      	movs	r2, #1
 8003bde:	2102      	movs	r1, #2
 8003be0:	4802      	ldr	r0, [pc, #8]	@ (8003bec <wizchip_deselect+0x14>)
 8003be2:	f001 f9c9 	bl	8004f78 <HAL_GPIO_WritePin>
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40020000 	.word	0x40020000

08003bf0 <wizchip_read>:

uint8_t wizchip_read()
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
	uint8_t rb;
	rb=SPIReadWrite(0x00);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f7ff ffba 	bl	8003b70 <SPIReadWrite>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	71fb      	strb	r3, [r7, #7]
	return rb;
 8003c00:	79fb      	ldrb	r3, [r7, #7]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3708      	adds	r7, #8
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <wizchip_write>:

void  wizchip_write(uint8_t wb)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b082      	sub	sp, #8
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	4603      	mov	r3, r0
 8003c12:	71fb      	strb	r3, [r7, #7]
	SPIReadWrite(wb);
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7ff ffaa 	bl	8003b70 <SPIReadWrite>
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <wizchip_readburst>:

void wizchip_readburst(uint8_t* pBuf, uint16_t len)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	460b      	mov	r3, r1
 8003c2e:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003c30:	2300      	movs	r3, #0
 8003c32:	81fb      	strh	r3, [r7, #14]
 8003c34:	e00c      	b.n	8003c50 <wizchip_readburst+0x2c>
	{
		*pBuf=SPIReadWrite(0x00);
 8003c36:	2000      	movs	r0, #0
 8003c38:	f7ff ff9a 	bl	8003b70 <SPIReadWrite>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	461a      	mov	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	701a      	strb	r2, [r3, #0]
		pBuf++;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3301      	adds	r3, #1
 8003c48:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8003c4a:	89fb      	ldrh	r3, [r7, #14]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	81fb      	strh	r3, [r7, #14]
 8003c50:	89fa      	ldrh	r2, [r7, #14]
 8003c52:	887b      	ldrh	r3, [r7, #2]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d3ee      	bcc.n	8003c36 <wizchip_readburst+0x12>
	}
}
 8003c58:	bf00      	nop
 8003c5a:	bf00      	nop
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <wizchip_writeburst>:

void  wizchip_writeburst(uint8_t* pBuf, uint16_t len)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	807b      	strh	r3, [r7, #2]
	for(uint16_t i=0;i<len;i++)
 8003c6e:	2300      	movs	r3, #0
 8003c70:	81fb      	strh	r3, [r7, #14]
 8003c72:	e00a      	b.n	8003c8a <wizchip_writeburst+0x28>
	{
		SPIReadWrite(*pBuf);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff ff79 	bl	8003b70 <SPIReadWrite>
		pBuf++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3301      	adds	r3, #1
 8003c82:	607b      	str	r3, [r7, #4]
	for(uint16_t i=0;i<len;i++)
 8003c84:	89fb      	ldrh	r3, [r7, #14]
 8003c86:	3301      	adds	r3, #1
 8003c88:	81fb      	strh	r3, [r7, #14]
 8003c8a:	89fa      	ldrh	r2, [r7, #14]
 8003c8c:	887b      	ldrh	r3, [r7, #2]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d3f0      	bcc.n	8003c74 <wizchip_writeburst+0x12>
	}
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <W5500IOInit>:

void W5500IOInit()
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
	 * Initialize the two GPIO pins
	 * RESET->PA10
	 * and
	 * CS->PA11
	 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca2:	1d3b      	adds	r3, r7, #4
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]

	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	603b      	str	r3, [r7, #0]
 8003cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf0 <W5500IOInit+0x54>)
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003cf0 <W5500IOInit+0x54>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003cf0 <W5500IOInit+0x54>)
 8003cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc4:	f003 0301 	and.w	r3, r3, #1
 8003cc8:	603b      	str	r3, [r7, #0]
 8003cca:	683b      	ldr	r3, [r7, #0]

	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ccc:	2303      	movs	r3, #3
 8003cce:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	613b      	str	r3, [r7, #16]

	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cdc:	1d3b      	adds	r3, r7, #4
 8003cde:	4619      	mov	r1, r3
 8003ce0:	4804      	ldr	r0, [pc, #16]	@ (8003cf4 <W5500IOInit+0x58>)
 8003ce2:	f000 ffad 	bl	8004c40 <HAL_GPIO_Init>
}
 8003ce6:	bf00      	nop
 8003ce8:	3718      	adds	r7, #24
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40020000 	.word	0x40020000

08003cf8 <W5500Init>:

void W5500Init()
{
 8003cf8:	b590      	push	{r4, r7, lr}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
	uint8_t tmp;
	uint8_t memsize[2][8] = { { 2, 2, 2, 2, 2, 2, 2, 2 }, { 2, 2, 2, 2, 2, 2, 2, 2 } };
 8003cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8003d7c <W5500Init+0x84>)
 8003d00:	1d3c      	adds	r4, r7, #4
 8003d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	W5500IOInit();
 8003d08:	f7ff ffc8 	bl	8003c9c <W5500IOInit>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//CS high by default
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	2102      	movs	r1, #2
 8003d10:	481b      	ldr	r0, [pc, #108]	@ (8003d80 <W5500Init+0x88>)
 8003d12:	f001 f931 	bl	8004f78 <HAL_GPIO_WritePin>

	//Send a pulse on reset pin
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003d16:	2200      	movs	r2, #0
 8003d18:	2101      	movs	r1, #1
 8003d1a:	4819      	ldr	r0, [pc, #100]	@ (8003d80 <W5500Init+0x88>)
 8003d1c:	f001 f92c 	bl	8004f78 <HAL_GPIO_WritePin>
	tmp = 0xFF;
 8003d20:	23ff      	movs	r3, #255	@ 0xff
 8003d22:	75fb      	strb	r3, [r7, #23]
	while(tmp--);
 8003d24:	bf00      	nop
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	1e5a      	subs	r2, r3, #1
 8003d2a:	75fa      	strb	r2, [r7, #23]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d1fa      	bne.n	8003d26 <W5500Init+0x2e>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003d30:	2201      	movs	r2, #1
 8003d32:	2101      	movs	r1, #1
 8003d34:	4812      	ldr	r0, [pc, #72]	@ (8003d80 <W5500Init+0x88>)
 8003d36:	f001 f91f 	bl	8004f78 <HAL_GPIO_WritePin>

	reg_wizchip_cs_cbfunc(wizchip_select, wizchip_deselect);
 8003d3a:	4912      	ldr	r1, [pc, #72]	@ (8003d84 <W5500Init+0x8c>)
 8003d3c:	4812      	ldr	r0, [pc, #72]	@ (8003d88 <W5500Init+0x90>)
 8003d3e:	f000 f895 	bl	8003e6c <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(wizchip_read, wizchip_write);
 8003d42:	4912      	ldr	r1, [pc, #72]	@ (8003d8c <W5500Init+0x94>)
 8003d44:	4812      	ldr	r0, [pc, #72]	@ (8003d90 <W5500Init+0x98>)
 8003d46:	f000 f8b7 	bl	8003eb8 <reg_wizchip_spi_cbfunc>
	reg_wizchip_spiburst_cbfunc(wizchip_readburst, wizchip_writeburst);
 8003d4a:	4912      	ldr	r1, [pc, #72]	@ (8003d94 <W5500Init+0x9c>)
 8003d4c:	4812      	ldr	r0, [pc, #72]	@ (8003d98 <W5500Init+0xa0>)
 8003d4e:	f000 f8df 	bl	8003f10 <reg_wizchip_spiburst_cbfunc>

	/* WIZChip Initialize*/
	if (ctlwizchip(CW_INIT_WIZCHIP, (void*) memsize) == -1) {
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	2001      	movs	r0, #1
 8003d58:	f000 f906 	bl	8003f68 <ctlwizchip>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d62:	d104      	bne.n	8003d6e <W5500Init+0x76>
		printf("WIZCHIP Initialized Failed.\r\n");
 8003d64:	480d      	ldr	r0, [pc, #52]	@ (8003d9c <W5500Init+0xa4>)
 8003d66:	f002 fa6f 	bl	8006248 <puts>
		while (1);
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <W5500Init+0x72>
	}
	printf("WIZCHIP Initialization Success.\r\n");
 8003d6e:	480c      	ldr	r0, [pc, #48]	@ (8003da0 <W5500Init+0xa8>)
 8003d70:	f002 fa6a 	bl	8006248 <puts>
	do {
		if (ctlwizchip(CW_GET_PHYLINK, (void*) &tmp) == -1)
			printf("Unknown PHY Link stauts.\r\n");
	} while (tmp == PHY_LINK_OFF);
*/
}
 8003d74:	bf00      	nop
 8003d76:	371c      	adds	r7, #28
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd90      	pop	{r4, r7, pc}
 8003d7c:	0800789c 	.word	0x0800789c
 8003d80:	40020000 	.word	0x40020000
 8003d84:	08003bd9 	.word	0x08003bd9
 8003d88:	08003bc1 	.word	0x08003bc1
 8003d8c:	08003c0b 	.word	0x08003c0b
 8003d90:	08003bf1 	.word	0x08003bf1
 8003d94:	08003c63 	.word	0x08003c63
 8003d98:	08003c25 	.word	0x08003c25
 8003d9c:	08007858 	.word	0x08007858
 8003da0:	08007878 	.word	0x08007878

08003da4 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8003da4:	b480      	push	{r7}
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8003db2:	b480      	push	{r7}
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	bf00      	nop
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	bf00      	nop
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr

08003dce <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8003dce:	b480      	push	{r7}
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	bf00      	nop
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	4618      	mov	r0, r3
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8003df6:	b480      	push	{r7}
 8003df8:	b083      	sub	sp, #12
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	70fb      	strb	r3, [r7, #3]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	78fa      	ldrb	r2, [r7, #3]
 8003e06:	701a      	strb	r2, [r3, #0]
 8003e08:	bf00      	nop
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	2300      	movs	r3, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr

08003e24 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	71fb      	strb	r3, [r7, #7]
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <wizchip_spi_readburst>:
 * @brief Default function to burst read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}; 
void 	wizchip_spi_readburst(uint8_t* pBuf, uint16_t len) 	{}
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	460b      	mov	r3, r1
 8003e44:	807b      	strh	r3, [r7, #2]
 8003e46:	bf00      	nop
 8003e48:	370c      	adds	r7, #12
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr

08003e52 <wizchip_spi_writeburst>:
 * @brief Default function to burst write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {};
void 	wizchip_spi_writeburst(uint8_t* pBuf, uint16_t len) {}
 8003e52:	b480      	push	{r7}
 8003e54:	b083      	sub	sp, #12
 8003e56:	af00      	add	r7, sp, #0
 8003e58:	6078      	str	r0, [r7, #4]
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	807b      	strh	r3, [r7, #2]
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <reg_wizchip_cs_cbfunc+0x16>
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d106      	bne.n	8003e90 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8003e82:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <reg_wizchip_cs_cbfunc+0x40>)
 8003e84:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb0 <reg_wizchip_cs_cbfunc+0x44>)
 8003e86:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8003e88:	4b08      	ldr	r3, [pc, #32]	@ (8003eac <reg_wizchip_cs_cbfunc+0x40>)
 8003e8a:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb4 <reg_wizchip_cs_cbfunc+0x48>)
 8003e8c:	619a      	str	r2, [r3, #24]
 8003e8e:	e006      	b.n	8003e9e <reg_wizchip_cs_cbfunc+0x32>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8003e90:	4a06      	ldr	r2, [pc, #24]	@ (8003eac <reg_wizchip_cs_cbfunc+0x40>)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8003e96:	4a05      	ldr	r2, [pc, #20]	@ (8003eac <reg_wizchip_cs_cbfunc+0x40>)
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	6193      	str	r3, [r2, #24]
   }
}
 8003e9c:	bf00      	nop
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	20000044 	.word	0x20000044
 8003eb0:	08003dc1 	.word	0x08003dc1
 8003eb4:	08003dcf 	.word	0x08003dcf

08003eb8 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003ec2:	bf00      	nop
 8003ec4:	4b0f      	ldr	r3, [pc, #60]	@ (8003f04 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ec6:	881b      	ldrh	r3, [r3, #0]
 8003ec8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0f9      	beq.n	8003ec4 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <reg_wizchip_spi_cbfunc+0x24>
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d106      	bne.n	8003eea <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8003edc:	4b09      	ldr	r3, [pc, #36]	@ (8003f04 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ede:	4a0a      	ldr	r2, [pc, #40]	@ (8003f08 <reg_wizchip_spi_cbfunc+0x50>)
 8003ee0:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8003ee2:	4b08      	ldr	r3, [pc, #32]	@ (8003f04 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ee4:	4a09      	ldr	r2, [pc, #36]	@ (8003f0c <reg_wizchip_spi_cbfunc+0x54>)
 8003ee6:	621a      	str	r2, [r3, #32]
 8003ee8:	e006      	b.n	8003ef8 <reg_wizchip_spi_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8003eea:	4a06      	ldr	r2, [pc, #24]	@ (8003f04 <reg_wizchip_spi_cbfunc+0x4c>)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8003ef0:	4a04      	ldr	r2, [pc, #16]	@ (8003f04 <reg_wizchip_spi_cbfunc+0x4c>)
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	6213      	str	r3, [r2, #32]
   }
}
 8003ef6:	bf00      	nop
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr
 8003f04:	20000044 	.word	0x20000044
 8003f08:	08003e15 	.word	0x08003e15
 8003f0c:	08003e25 	.word	0x08003e25

08003f10 <reg_wizchip_spiburst_cbfunc>:

// 20140626 Eric Added for SPI burst operations
void reg_wizchip_spiburst_cbfunc(void (*spi_rb)(uint8_t* pBuf, uint16_t len), void (*spi_wb)(uint8_t* pBuf, uint16_t len))
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8003f1a:	bf00      	nop
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003f1e:	881b      	ldrh	r3, [r3, #0]
 8003f20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d0f9      	beq.n	8003f1c <reg_wizchip_spiburst_cbfunc+0xc>

   if(!spi_rb || !spi_wb)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <reg_wizchip_spiburst_cbfunc+0x24>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d106      	bne.n	8003f42 <reg_wizchip_spiburst_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_burst   = wizchip_spi_readburst;
 8003f34:	4b09      	ldr	r3, [pc, #36]	@ (8003f5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003f36:	4a0a      	ldr	r2, [pc, #40]	@ (8003f60 <reg_wizchip_spiburst_cbfunc+0x50>)
 8003f38:	625a      	str	r2, [r3, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = wizchip_spi_writeburst;
 8003f3a:	4b08      	ldr	r3, [pc, #32]	@ (8003f5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003f3c:	4a09      	ldr	r2, [pc, #36]	@ (8003f64 <reg_wizchip_spiburst_cbfunc+0x54>)
 8003f3e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f40:	e006      	b.n	8003f50 <reg_wizchip_spiburst_cbfunc+0x40>
   }
   else
   {
      WIZCHIP.IF.SPI._read_burst   = spi_rb;
 8003f42:	4a06      	ldr	r2, [pc, #24]	@ (8003f5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6253      	str	r3, [r2, #36]	@ 0x24
      WIZCHIP.IF.SPI._write_burst  = spi_wb;
 8003f48:	4a04      	ldr	r2, [pc, #16]	@ (8003f5c <reg_wizchip_spiburst_cbfunc+0x4c>)
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6293      	str	r3, [r2, #40]	@ 0x28
   }
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	20000044 	.word	0x20000044
 8003f60:	08003e3b 	.word	0x08003e3b
 8003f64:	08003e53 	.word	0x08003e53

08003f68 <ctlwizchip>:

int8_t ctlwizchip(ctlwizchip_type cwtype, void* arg)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	6039      	str	r1, [r7, #0]
 8003f72:	71fb      	strb	r3, [r7, #7]
#if	_WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
   uint8_t tmp = 0;
 8003f74:	2300      	movs	r3, #0
 8003f76:	75fb      	strb	r3, [r7, #23]
#endif
   uint8_t* ptmp[2] = {0,0};
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	613b      	str	r3, [r7, #16]
   switch(cwtype)
 8003f80:	79fb      	ldrb	r3, [r7, #7]
 8003f82:	2b0f      	cmp	r3, #15
 8003f84:	f200 80c5 	bhi.w	8004112 <ctlwizchip+0x1aa>
 8003f88:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <ctlwizchip+0x28>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fd1 	.word	0x08003fd1
 8003f94:	08003fd7 	.word	0x08003fd7
 8003f98:	08004003 	.word	0x08004003
 8003f9c:	08003ff7 	.word	0x08003ff7
 8003fa0:	08004011 	.word	0x08004011
 8003fa4:	0800401d 	.word	0x0800401d
 8003fa8:	0800402b 	.word	0x0800402b
 8003fac:	08004051 	.word	0x08004051
 8003fb0:	08004073 	.word	0x08004073
 8003fb4:	080040b7 	.word	0x080040b7
 8003fb8:	080040bd 	.word	0x080040bd
 8003fbc:	080040c5 	.word	0x080040c5
 8003fc0:	08004119 	.word	0x08004119
 8003fc4:	080040cd 	.word	0x080040cd
 8003fc8:	080040db 	.word	0x080040db
 8003fcc:	080040f7 	.word	0x080040f7
   {
      case CW_RESET_WIZCHIP:
         wizchip_sw_reset();
 8003fd0:	f000 f8e8 	bl	80041a4 <wizchip_sw_reset>
         break;
 8003fd4:	e0a1      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_INIT_WIZCHIP:
         if(arg != 0) 
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d004      	beq.n	8003fe6 <ctlwizchip+0x7e>
         {
            ptmp[0] = (uint8_t*)arg;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	60fb      	str	r3, [r7, #12]
            ptmp[1] = ptmp[0] + _WIZCHIP_SOCK_NUM_;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	3308      	adds	r3, #8
 8003fe4:	613b      	str	r3, [r7, #16]
         }
         return wizchip_init(ptmp[0], ptmp[1]);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	4611      	mov	r1, r2
 8003fec:	4618      	mov	r0, r3
 8003fee:	f000 f925 	bl	800423c <wizchip_init>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	e092      	b.n	800411c <ctlwizchip+0x1b4>
      case CW_CLR_INTERRUPT:
         wizchip_clrinterrupt(*((intr_kind*)arg));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	881b      	ldrh	r3, [r3, #0]
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f000 f9aa 	bl	8004354 <wizchip_clrinterrupt>
         break;
 8004000:	e08b      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_GET_INTERRUPT:
        *((intr_kind*)arg) = wizchip_getinterrupt();
 8004002:	f000 f9db 	bl	80043bc <wizchip_getinterrupt>
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	801a      	strh	r2, [r3, #0]
         break;
 800400e:	e084      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_SET_INTRMASK:
         wizchip_setinterruptmask(*((intr_kind*)arg));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f9f6 	bl	8004406 <wizchip_setinterruptmask>
         break;         
 800401a:	e07e      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_GET_INTRMASK:
         *((intr_kind*)arg) = wizchip_getinterruptmask();
 800401c:	f000 fa0e 	bl	800443c <wizchip_getinterruptmask>
 8004020:	4603      	mov	r3, r0
 8004022:	461a      	mov	r2, r3
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	801a      	strh	r2, [r3, #0]
         break;
 8004028:	e077      	b.n	800411a <ctlwizchip+0x1b2>
   //M20150601 : This can be supported by W5200, W5500
   //#if _WIZCHIP_ > W5100
   #if (_WIZCHIP_ == W5200 || _WIZCHIP_ == W5500)
      case CW_SET_INTRTIME:
         setINTLEVEL(*(uint16_t*)arg);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	881b      	ldrh	r3, [r3, #0]
 800402e:	0a1b      	lsrs	r3, r3, #8
 8004030:	b29b      	uxth	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	4619      	mov	r1, r3
 8004036:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 800403a:	f7fe fc89 	bl	8002950 <WIZCHIP_WRITE>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	881b      	ldrh	r3, [r3, #0]
 8004042:	b2db      	uxtb	r3, r3
 8004044:	4619      	mov	r1, r3
 8004046:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 800404a:	f7fe fc81 	bl	8002950 <WIZCHIP_WRITE>
         break;
 800404e:	e064      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_GET_INTRTIME:
         *(uint16_t*)arg = getINTLEVEL();
 8004050:	f44f 5098 	mov.w	r0, #4864	@ 0x1300
 8004054:	f7fe fc30 	bl	80028b8 <WIZCHIP_READ>
 8004058:	4603      	mov	r3, r0
 800405a:	021b      	lsls	r3, r3, #8
 800405c:	b29c      	uxth	r4, r3
 800405e:	f44f 50a0 	mov.w	r0, #5120	@ 0x1400
 8004062:	f7fe fc29 	bl	80028b8 <WIZCHIP_READ>
 8004066:	4603      	mov	r3, r0
 8004068:	4423      	add	r3, r4
 800406a:	b29a      	uxth	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	801a      	strh	r2, [r3, #0]
         break;
 8004070:	e053      	b.n	800411a <ctlwizchip+0x1b2>
   #endif
      case CW_GET_ID:
         ((uint8_t*)arg)[0] = WIZCHIP.id[0];
 8004072:	4b2c      	ldr	r3, [pc, #176]	@ (8004124 <ctlwizchip+0x1bc>)
 8004074:	789a      	ldrb	r2, [r3, #2]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[1] = WIZCHIP.id[1];
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	3301      	adds	r3, #1
 800407e:	4a29      	ldr	r2, [pc, #164]	@ (8004124 <ctlwizchip+0x1bc>)
 8004080:	78d2      	ldrb	r2, [r2, #3]
 8004082:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[2] = WIZCHIP.id[2];
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	3302      	adds	r3, #2
 8004088:	4a26      	ldr	r2, [pc, #152]	@ (8004124 <ctlwizchip+0x1bc>)
 800408a:	7912      	ldrb	r2, [r2, #4]
 800408c:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[3] = WIZCHIP.id[3];
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	3303      	adds	r3, #3
 8004092:	4a24      	ldr	r2, [pc, #144]	@ (8004124 <ctlwizchip+0x1bc>)
 8004094:	7952      	ldrb	r2, [r2, #5]
 8004096:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[4] = WIZCHIP.id[4];
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	3304      	adds	r3, #4
 800409c:	4a21      	ldr	r2, [pc, #132]	@ (8004124 <ctlwizchip+0x1bc>)
 800409e:	7992      	ldrb	r2, [r2, #6]
 80040a0:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[5] = WIZCHIP.id[5];
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	3305      	adds	r3, #5
 80040a6:	4a1f      	ldr	r2, [pc, #124]	@ (8004124 <ctlwizchip+0x1bc>)
 80040a8:	79d2      	ldrb	r2, [r2, #7]
 80040aa:	701a      	strb	r2, [r3, #0]
         ((uint8_t*)arg)[6] = 0;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	3306      	adds	r3, #6
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
         break;
 80040b4:	e031      	b.n	800411a <ctlwizchip+0x1b2>
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5500
      case CW_RESET_PHY:
         wizphy_reset();
 80040b6:	f000 fa13 	bl	80044e0 <wizphy_reset>
         break;
 80040ba:	e02e      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_SET_PHYCONF:
         wizphy_setphyconf((wiz_PhyConf*)arg);
 80040bc:	6838      	ldr	r0, [r7, #0]
 80040be:	f000 fa36 	bl	800452e <wizphy_setphyconf>
         break;
 80040c2:	e02a      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_GET_PHYCONF:
         wizphy_getphyconf((wiz_PhyConf*)arg);
 80040c4:	6838      	ldr	r0, [r7, #0]
 80040c6:	f000 fa75 	bl	80045b4 <wizphy_getphyconf>
         break;
 80040ca:	e026      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_GET_PHYSTATUS:
         break;
      case CW_SET_PHYPOWMODE:
         return wizphy_setphypmode(*(uint8_t*)arg);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fad9 	bl	8004688 <wizphy_setphypmode>
 80040d6:	4603      	mov	r3, r0
 80040d8:	e020      	b.n	800411c <ctlwizchip+0x1b4>
   #endif
   #if _WIZCHIP_ == W5100S || _WIZCHIP_ == W5200 || _WIZCHIP_ == W5500
      case CW_GET_PHYPOWMODE:
         tmp = wizphy_getphypmode();
 80040da:	f000 f9e8 	bl	80044ae <wizphy_getphypmode>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80040e2:	7dfb      	ldrb	r3, [r7, #23]
 80040e4:	2bff      	cmp	r3, #255	@ 0xff
 80040e6:	d102      	bne.n	80040ee <ctlwizchip+0x186>
 80040e8:	f04f 33ff 	mov.w	r3, #4294967295
 80040ec:	e016      	b.n	800411c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	7dfa      	ldrb	r2, [r7, #23]
 80040f2:	701a      	strb	r2, [r3, #0]
         break;
 80040f4:	e011      	b.n	800411a <ctlwizchip+0x1b2>
      case CW_GET_PHYLINK:
         tmp = wizphy_getphylink();
 80040f6:	f000 f9c4 	bl	8004482 <wizphy_getphylink>
 80040fa:	4603      	mov	r3, r0
 80040fc:	75fb      	strb	r3, [r7, #23]
         if((int8_t)tmp == -1) return -1;
 80040fe:	7dfb      	ldrb	r3, [r7, #23]
 8004100:	2bff      	cmp	r3, #255	@ 0xff
 8004102:	d102      	bne.n	800410a <ctlwizchip+0x1a2>
 8004104:	f04f 33ff 	mov.w	r3, #4294967295
 8004108:	e008      	b.n	800411c <ctlwizchip+0x1b4>
         *(uint8_t*)arg = tmp;
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	7dfa      	ldrb	r2, [r7, #23]
 800410e:	701a      	strb	r2, [r3, #0]
         break;
 8004110:	e003      	b.n	800411a <ctlwizchip+0x1b2>
   #endif      
      default:
         return -1;
 8004112:	f04f 33ff 	mov.w	r3, #4294967295
 8004116:	e001      	b.n	800411c <ctlwizchip+0x1b4>
         break;
 8004118:	bf00      	nop
   }
   return 0;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	371c      	adds	r7, #28
 8004120:	46bd      	mov	sp, r7
 8004122:	bd90      	pop	{r4, r7, pc}
 8004124:	20000044 	.word	0x20000044

08004128 <ctlnetwork>:


int8_t ctlnetwork(ctlnetwork_type cntype, void* arg)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	4603      	mov	r3, r0
 8004130:	6039      	str	r1, [r7, #0]
 8004132:	71fb      	strb	r3, [r7, #7]
   
   switch(cntype)
 8004134:	79fb      	ldrb	r3, [r7, #7]
 8004136:	2b05      	cmp	r3, #5
 8004138:	d82c      	bhi.n	8004194 <ctlnetwork+0x6c>
 800413a:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <ctlnetwork+0x18>)
 800413c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004140:	08004159 	.word	0x08004159
 8004144:	08004161 	.word	0x08004161
 8004148:	08004169 	.word	0x08004169
 800414c:	08004177 	.word	0x08004177
 8004150:	08004185 	.word	0x08004185
 8004154:	0800418d 	.word	0x0800418d
   {
      case CN_SET_NETINFO:
         wizchip_setnetinfo((wiz_NetInfo*)arg);
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	f000 fadf 	bl	800471c <wizchip_setnetinfo>
         break;
 800415e:	e01c      	b.n	800419a <ctlnetwork+0x72>
      case CN_GET_NETINFO:
         wizchip_getnetinfo((wiz_NetInfo*)arg);
 8004160:	6838      	ldr	r0, [r7, #0]
 8004162:	f000 fb1b 	bl	800479c <wizchip_getnetinfo>
         break;
 8004166:	e018      	b.n	800419a <ctlnetwork+0x72>
      case CN_SET_NETMODE:
         return wizchip_setnetmode(*(netmode_type*)arg);
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	4618      	mov	r0, r3
 800416e:	f000 fb55 	bl	800481c <wizchip_setnetmode>
 8004172:	4603      	mov	r3, r0
 8004174:	e012      	b.n	800419c <ctlnetwork+0x74>
      case CN_GET_NETMODE:
         *(netmode_type*)arg = wizchip_getnetmode();
 8004176:	f000 fb73 	bl	8004860 <wizchip_getnetmode>
 800417a:	4603      	mov	r3, r0
 800417c:	461a      	mov	r2, r3
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	701a      	strb	r2, [r3, #0]
         break;
 8004182:	e00a      	b.n	800419a <ctlnetwork+0x72>
      case CN_SET_TIMEOUT:
         wizchip_settimeout((wiz_NetTimeout*)arg);
 8004184:	6838      	ldr	r0, [r7, #0]
 8004186:	f000 fb73 	bl	8004870 <wizchip_settimeout>
         break;
 800418a:	e006      	b.n	800419a <ctlnetwork+0x72>
      case CN_GET_TIMEOUT:
         wizchip_gettimeout((wiz_NetTimeout*)arg);
 800418c:	6838      	ldr	r0, [r7, #0]
 800418e:	f000 fb90 	bl	80048b2 <wizchip_gettimeout>
         break;
 8004192:	e002      	b.n	800419a <ctlnetwork+0x72>
      default:
         return -1;
 8004194:	f04f 33ff 	mov.w	r3, #4294967295
 8004198:	e000      	b.n	800419c <ctlnetwork+0x74>
   }
   return 0;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <wizchip_sw_reset>:

void wizchip_sw_reset(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	2206      	movs	r2, #6
 80041ae:	4619      	mov	r1, r3
 80041b0:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80041b4:	f7fe fc1a 	bl	80029ec <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 80041b8:	f107 0314 	add.w	r3, r7, #20
 80041bc:	2204      	movs	r2, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80041c4:	f7fe fc12 	bl	80029ec <WIZCHIP_READ_BUF>
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	2204      	movs	r2, #4
 80041ce:	4619      	mov	r1, r3
 80041d0:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80041d4:	f7fe fc0a 	bl	80029ec <WIZCHIP_READ_BUF>
 80041d8:	f107 030c 	add.w	r3, r7, #12
 80041dc:	2204      	movs	r2, #4
 80041de:	4619      	mov	r1, r3
 80041e0:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80041e4:	f7fe fc02 	bl	80029ec <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 80041e8:	2180      	movs	r1, #128	@ 0x80
 80041ea:	2000      	movs	r0, #0
 80041ec:	f7fe fbb0 	bl	8002950 <WIZCHIP_WRITE>
   getMR(); // for delay
 80041f0:	2000      	movs	r0, #0
 80041f2:	f7fe fb61 	bl	80028b8 <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 80041f6:	1d3b      	adds	r3, r7, #4
 80041f8:	2206      	movs	r2, #6
 80041fa:	4619      	mov	r1, r3
 80041fc:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 8004200:	f7fe fc54 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8004204:	f107 0314 	add.w	r3, r7, #20
 8004208:	2204      	movs	r2, #4
 800420a:	4619      	mov	r1, r3
 800420c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004210:	f7fe fc4c 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8004214:	f107 0310 	add.w	r3, r7, #16
 8004218:	2204      	movs	r2, #4
 800421a:	4619      	mov	r1, r3
 800421c:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 8004220:	f7fe fc44 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8004224:	f107 030c 	add.w	r3, r7, #12
 8004228:	2204      	movs	r2, #4
 800422a:	4619      	mov	r1, r3
 800422c:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 8004230:	f7fe fc3c 	bl	8002aac <WIZCHIP_WRITE_BUF>
}
 8004234:	bf00      	nop
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8004246:	2300      	movs	r3, #0
 8004248:	73bb      	strb	r3, [r7, #14]
   wizchip_sw_reset();
 800424a:	f7ff ffab 	bl	80041a4 <wizchip_sw_reset>
   if(txsize)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d03b      	beq.n	80042cc <wizchip_init+0x90>
   {
      tmp = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	73bb      	strb	r3, [r7, #14]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004258:	2300      	movs	r3, #0
 800425a:	73fb      	strb	r3, [r7, #15]
 800425c:	e015      	b.n	800428a <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 800425e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	4413      	add	r3, r2
 8004266:	781a      	ldrb	r2, [r3, #0]
 8004268:	7bbb      	ldrb	r3, [r7, #14]
 800426a:	4413      	add	r3, r2
 800426c:	b2db      	uxtb	r3, r3
 800426e:	73bb      	strb	r3, [r7, #14]

#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 8004270:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004274:	2b10      	cmp	r3, #16
 8004276:	dd02      	ble.n	800427e <wizchip_init+0x42>
 8004278:	f04f 33ff 	mov.w	r3, #4294967295
 800427c:	e066      	b.n	800434c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 800427e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004282:	b2db      	uxtb	r3, r3
 8004284:	3301      	adds	r3, #1
 8004286:	b2db      	uxtb	r3, r3
 8004288:	73fb      	strb	r3, [r7, #15]
 800428a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428e:	2b07      	cmp	r3, #7
 8004290:	dde5      	ble.n	800425e <wizchip_init+0x22>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004292:	2300      	movs	r3, #0
 8004294:	73fb      	strb	r3, [r7, #15]
 8004296:	e015      	b.n	80042c4 <wizchip_init+0x88>
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_TXBUF_SIZE(i, j);
#else
			setSn_TXBUF_SIZE(i, txsize[i]);
 8004298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	3301      	adds	r3, #1
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	f503 53f8 	add.w	r3, r3, #7936	@ 0x1f00
 80042a6:	4618      	mov	r0, r3
 80042a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	4413      	add	r3, r2
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	4619      	mov	r1, r3
 80042b4:	f7fe fb4c 	bl	8002950 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	73fb      	strb	r3, [r7, #15]
 80042c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042c8:	2b07      	cmp	r3, #7
 80042ca:	dde5      	ble.n	8004298 <wizchip_init+0x5c>
#endif
		}	
   }

   if(rxsize)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d03b      	beq.n	800434a <wizchip_init+0x10e>
   {
      tmp = 0;
 80042d2:	2300      	movs	r3, #0
 80042d4:	73bb      	strb	r3, [r7, #14]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
#else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042d6:	2300      	movs	r3, #0
 80042d8:	73fb      	strb	r3, [r7, #15]
 80042da:	e015      	b.n	8004308 <wizchip_init+0xcc>
		{
			tmp += rxsize[i];
 80042dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042e0:	683a      	ldr	r2, [r7, #0]
 80042e2:	4413      	add	r3, r2
 80042e4:	781a      	ldrb	r2, [r3, #0]
 80042e6:	7bbb      	ldrb	r3, [r7, #14]
 80042e8:	4413      	add	r3, r2
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	73bb      	strb	r3, [r7, #14]
#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
#else
			if(tmp > 16) return -1;
 80042ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042f2:	2b10      	cmp	r3, #16
 80042f4:	dd02      	ble.n	80042fc <wizchip_init+0xc0>
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	e027      	b.n	800434c <wizchip_init+0x110>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 80042fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004300:	b2db      	uxtb	r3, r3
 8004302:	3301      	adds	r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	73fb      	strb	r3, [r7, #15]
 8004308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430c:	2b07      	cmp	r3, #7
 800430e:	dde5      	ble.n	80042dc <wizchip_init+0xa0>
#endif
		}
#endif
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004310:	2300      	movs	r3, #0
 8004312:	73fb      	strb	r3, [r7, #15]
 8004314:	e015      	b.n	8004342 <wizchip_init+0x106>
#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
			setSn_RXBUF_SIZE(i, j);
#else
			setSn_RXBUF_SIZE(i, rxsize[i]);
 8004316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	3301      	adds	r3, #1
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	f503 53f0 	add.w	r3, r3, #7680	@ 0x1e00
 8004324:	4618      	mov	r0, r3
 8004326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	4413      	add	r3, r2
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4619      	mov	r1, r3
 8004332:	f7fe fb0d 	bl	8002950 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8004336:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800433a:	b2db      	uxtb	r3, r3
 800433c:	3301      	adds	r3, #1
 800433e:	b2db      	uxtb	r3, r3
 8004340:	73fb      	strb	r3, [r7, #15]
 8004342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004346:	2b07      	cmp	r3, #7
 8004348:	dde5      	ble.n	8004316 <wizchip_init+0xda>
#endif
		}
   }
   return 0;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3710      	adds	r7, #16
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}

08004354 <wizchip_clrinterrupt>:

void wizchip_clrinterrupt(intr_kind intr)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	80fb      	strh	r3, [r7, #6]
   uint8_t ir  = (uint8_t)intr;
 800435e:	88fb      	ldrh	r3, [r7, #6]
 8004360:	73fb      	strb	r3, [r7, #15]
   uint8_t sir = (uint8_t)((uint16_t)intr >> 8);
 8004362:	88fb      	ldrh	r3, [r7, #6]
 8004364:	0a1b      	lsrs	r3, r3, #8
 8004366:	b29b      	uxth	r3, r3
 8004368:	73bb      	strb	r3, [r7, #14]
   setIR(ir);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIR( ((((uint16_t)ir) << 8) | (((uint16_t)sir) & 0x00FF)) );
#else
   setIR(ir);
 800436a:	7bfb      	ldrb	r3, [r7, #15]
 800436c:	f023 030f 	bic.w	r3, r3, #15
 8004370:	b2db      	uxtb	r3, r3
 8004372:	4619      	mov	r1, r3
 8004374:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 8004378:	f7fe faea 	bl	8002950 <WIZCHIP_WRITE>
//M20200227 : For clear
   //setSIR(sir);
   for(ir=0; ir<8; ir++){
 800437c:	2300      	movs	r3, #0
 800437e:	73fb      	strb	r3, [r7, #15]
 8004380:	e014      	b.n	80043ac <wizchip_clrinterrupt+0x58>
       if(sir & (0x01 <<ir) ) setSn_IR(ir, 0xff);
 8004382:	7bba      	ldrb	r2, [r7, #14]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	fa42 f303 	asr.w	r3, r2, r3
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <wizchip_clrinterrupt+0x52>
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	3301      	adds	r3, #1
 8004398:	00db      	lsls	r3, r3, #3
 800439a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 800439e:	211f      	movs	r1, #31
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7fe fad5 	bl	8002950 <WIZCHIP_WRITE>
   for(ir=0; ir<8; ir++){
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	3301      	adds	r3, #1
 80043aa:	73fb      	strb	r3, [r7, #15]
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	2b07      	cmp	r3, #7
 80043b0:	d9e7      	bls.n	8004382 <wizchip_clrinterrupt+0x2e>
   }

#endif   
}
 80043b2:	bf00      	nop
 80043b4:	bf00      	nop
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <wizchip_getinterrupt>:

intr_kind wizchip_getinterrupt(void)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
   uint8_t ir  = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	71fb      	strb	r3, [r7, #7]
   uint8_t sir = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 80043ca:	2300      	movs	r3, #0
 80043cc:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_  == W5300
   ret = getIR();
   ir = (uint8_t)(ret >> 8);
   sir = (uint8_t)ret;
#else
   ir  = getIR();
 80043ce:	f44f 50a8 	mov.w	r0, #5376	@ 0x1500
 80043d2:	f7fe fa71 	bl	80028b8 <WIZCHIP_READ>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f023 030f 	bic.w	r3, r3, #15
 80043dc:	71fb      	strb	r3, [r7, #7]
   sir = getSIR();
 80043de:	f44f 50b8 	mov.w	r0, #5888	@ 0x1700
 80043e2:	f7fe fa69 	bl	80028b8 <WIZCHIP_READ>
 80043e6:	4603      	mov	r3, r0
 80043e8:	71bb      	strb	r3, [r7, #6]
   ir &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   ir &= ~(1 << 6);
#endif
  ret = sir;
 80043ea:	79bb      	ldrb	r3, [r7, #6]
 80043ec:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + ir;
 80043ee:	88bb      	ldrh	r3, [r7, #4]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	79fb      	ldrb	r3, [r7, #7]
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	4413      	add	r3, r2
 80043fa:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 80043fc:	88bb      	ldrh	r3, [r7, #4]
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3708      	adds	r7, #8
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <wizchip_setinterruptmask>:

void wizchip_setinterruptmask(intr_kind intr)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	4603      	mov	r3, r0
 800440e:	80fb      	strh	r3, [r7, #6]
   uint8_t imr  = (uint8_t)intr;
 8004410:	88fb      	ldrh	r3, [r7, #6]
 8004412:	73fb      	strb	r3, [r7, #15]
   uint8_t simr = (uint8_t)((uint16_t)intr >> 8);
 8004414:	88fb      	ldrh	r3, [r7, #6]
 8004416:	0a1b      	lsrs	r3, r3, #8
 8004418:	b29b      	uxth	r3, r3
 800441a:	73bb      	strb	r3, [r7, #14]
   setIMR(imr);
//A20150601 : For integrating with W5300
#elif _WIZCHIP_ == W5300
   setIMR( ((((uint16_t)imr) << 8) | (((uint16_t)simr) & 0x00FF)) );
#else
   setIMR(imr);
 800441c:	7bfb      	ldrb	r3, [r7, #15]
 800441e:	4619      	mov	r1, r3
 8004420:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004424:	f7fe fa94 	bl	8002950 <WIZCHIP_WRITE>
   setSIMR(simr);
 8004428:	7bbb      	ldrb	r3, [r7, #14]
 800442a:	4619      	mov	r1, r3
 800442c:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 8004430:	f7fe fa8e 	bl	8002950 <WIZCHIP_WRITE>
#endif   
}
 8004434:	bf00      	nop
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <wizchip_getinterruptmask>:

intr_kind wizchip_getinterruptmask(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
   uint8_t imr  = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	71fb      	strb	r3, [r7, #7]
   uint8_t simr = 0;
 8004446:	2300      	movs	r3, #0
 8004448:	71bb      	strb	r3, [r7, #6]
   uint16_t ret = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	80bb      	strh	r3, [r7, #4]
#elif _WIZCHIP_ == W5300
   ret = getIMR();
   imr = (uint8_t)(ret >> 8);
   simr = (uint8_t)ret;
#else
   imr  = getIMR();
 800444e:	f44f 50b0 	mov.w	r0, #5632	@ 0x1600
 8004452:	f7fe fa31 	bl	80028b8 <WIZCHIP_READ>
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
   simr = getSIMR();
 800445a:	f44f 50c0 	mov.w	r0, #6144	@ 0x1800
 800445e:	f7fe fa2b 	bl	80028b8 <WIZCHIP_READ>
 8004462:	4603      	mov	r3, r0
 8004464:	71bb      	strb	r3, [r7, #6]
   imr &= ~(1<<4); // IK_WOL
#endif
#if _WIZCHIP_ == W5200
   imr &= ~(1 << 6);  // IK_DEST_UNREACH
#endif
  ret = simr;
 8004466:	79bb      	ldrb	r3, [r7, #6]
 8004468:	80bb      	strh	r3, [r7, #4]
  ret = (ret << 8) + imr;
 800446a:	88bb      	ldrh	r3, [r7, #4]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	b29a      	uxth	r2, r3
 8004470:	79fb      	ldrb	r3, [r7, #7]
 8004472:	b29b      	uxth	r3, r3
 8004474:	4413      	add	r3, r2
 8004476:	80bb      	strh	r3, [r7, #4]
  return (intr_kind)ret;
 8004478:	88bb      	ldrh	r3, [r7, #4]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <wizphy_getphylink>:

int8_t wizphy_getphylink(void)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b082      	sub	sp, #8
 8004486:	af00      	add	r7, sp, #0
   int8_t tmp = PHY_LINK_OFF;
 8004488:	2300      	movs	r3, #0
 800448a:	71fb      	strb	r3, [r7, #7]
	   tmp = PHY_LINK_ON;
#elif   _WIZCHIP_ == W5200
   if(getPHYSTATUS() & PHYSTATUS_LINK)
      tmp = PHY_LINK_ON;
#elif _WIZCHIP_ == W5500
   if(getPHYCFGR() & PHYCFGR_LNK_ON)
 800448c:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004490:	f7fe fa12 	bl	80028b8 <WIZCHIP_READ>
 8004494:	4603      	mov	r3, r0
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <wizphy_getphylink+0x20>
      tmp = PHY_LINK_ON;
 800449e:	2301      	movs	r3, #1
 80044a0:	71fb      	strb	r3, [r7, #7]

#else
   tmp = -1;
#endif
   return tmp;
 80044a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <wizphy_getphypmode>:

#if _WIZCHIP_ > W5100

int8_t wizphy_getphypmode(void)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b082      	sub	sp, #8
 80044b2:	af00      	add	r7, sp, #0
   int8_t tmp = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	71fb      	strb	r3, [r7, #7]
      if(getPHYSTATUS() & PHYSTATUS_POWERDOWN)
         tmp = PHY_POWER_DOWN;
      else          
         tmp = PHY_POWER_NORM;
   #elif _WIZCHIP_ == 5500
      if((getPHYCFGR() & PHYCFGR_OPMDC_ALLA) == PHYCFGR_OPMDC_PDOWN)
 80044b8:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80044bc:	f7fe f9fc 	bl	80028b8 <WIZCHIP_READ>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80044c6:	2b30      	cmp	r3, #48	@ 0x30
 80044c8:	d102      	bne.n	80044d0 <wizphy_getphypmode+0x22>
         tmp = PHY_POWER_DOWN;
 80044ca:	2301      	movs	r3, #1
 80044cc:	71fb      	strb	r3, [r7, #7]
 80044ce:	e001      	b.n	80044d4 <wizphy_getphypmode+0x26>
      else 
         tmp = PHY_POWER_NORM;
 80044d0:	2300      	movs	r3, #0
 80044d2:	71fb      	strb	r3, [r7, #7]
   #else
      tmp = -1;
   #endif
   return tmp;
 80044d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <wizphy_reset>:
}

#endif
#if _WIZCHIP_ == W5500
void wizphy_reset(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
   uint8_t tmp = getPHYCFGR();
 80044e6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80044ea:	f7fe f9e5 	bl	80028b8 <WIZCHIP_READ>
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
   tmp &= PHYCFGR_RST;
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044f8:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	4619      	mov	r1, r3
 80044fe:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004502:	f7fe fa25 	bl	8002950 <WIZCHIP_WRITE>
   tmp = getPHYCFGR();
 8004506:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800450a:	f7fe f9d5 	bl	80028b8 <WIZCHIP_READ>
 800450e:	4603      	mov	r3, r0
 8004510:	71fb      	strb	r3, [r7, #7]
   tmp |= ~PHYCFGR_RST;
 8004512:	79fb      	ldrb	r3, [r7, #7]
 8004514:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004518:	71fb      	strb	r3, [r7, #7]
   setPHYCFGR(tmp);
 800451a:	79fb      	ldrb	r3, [r7, #7]
 800451c:	4619      	mov	r1, r3
 800451e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 8004522:	f7fe fa15 	bl	8002950 <WIZCHIP_WRITE>
}
 8004526:	bf00      	nop
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <wizphy_setphyconf>:

void wizphy_setphyconf(wiz_PhyConf* phyconf)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
   if(phyconf->by == PHY_CONFBY_SW)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	781b      	ldrb	r3, [r3, #0]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d104      	bne.n	800454c <wizphy_setphyconf+0x1e>
      tmp |= PHYCFGR_OPMD;
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004548:	73fb      	strb	r3, [r7, #15]
 800454a:	e003      	b.n	8004554 <wizphy_setphyconf+0x26>
   else
      tmp &= ~PHYCFGR_OPMD;
 800454c:	7bfb      	ldrb	r3, [r7, #15]
 800454e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004552:	73fb      	strb	r3, [r7, #15]
   if(phyconf->mode == PHY_MODE_AUTONEGO)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	785b      	ldrb	r3, [r3, #1]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d104      	bne.n	8004566 <wizphy_setphyconf+0x38>
      tmp |= PHYCFGR_OPMDC_ALLA;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 8004562:	73fb      	strb	r3, [r7, #15]
 8004564:	e019      	b.n	800459a <wizphy_setphyconf+0x6c>
   else
   {
      if(phyconf->duplex == PHY_DUPLEX_FULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	78db      	ldrb	r3, [r3, #3]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d10d      	bne.n	800458a <wizphy_setphyconf+0x5c>
      {
         if(phyconf->speed == PHY_SPEED_100)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	789b      	ldrb	r3, [r3, #2]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d104      	bne.n	8004580 <wizphy_setphyconf+0x52>
            tmp |= PHYCFGR_OPMDC_100F;
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	f043 0318 	orr.w	r3, r3, #24
 800457c:	73fb      	strb	r3, [r7, #15]
 800457e:	e00c      	b.n	800459a <wizphy_setphyconf+0x6c>
         else
            tmp |= PHYCFGR_OPMDC_10F;
 8004580:	7bfb      	ldrb	r3, [r7, #15]
 8004582:	f043 0308 	orr.w	r3, r3, #8
 8004586:	73fb      	strb	r3, [r7, #15]
 8004588:	e007      	b.n	800459a <wizphy_setphyconf+0x6c>
      }   
      else
      {
         if(phyconf->speed == PHY_SPEED_100)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	789b      	ldrb	r3, [r3, #2]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d103      	bne.n	800459a <wizphy_setphyconf+0x6c>
            tmp |= PHYCFGR_OPMDC_100H;
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	f043 0310 	orr.w	r3, r3, #16
 8004598:	73fb      	strb	r3, [r7, #15]
         else
            tmp |= PHYCFGR_OPMDC_10H;
      }
   }
   setPHYCFGR(tmp);
 800459a:	7bfb      	ldrb	r3, [r7, #15]
 800459c:	4619      	mov	r1, r3
 800459e:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80045a2:	f7fe f9d5 	bl	8002950 <WIZCHIP_WRITE>
   wizphy_reset();
 80045a6:	f7ff ff9b 	bl	80044e0 <wizphy_reset>
}
 80045aa:	bf00      	nop
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <wizphy_getphyconf>:

void wizphy_getphyconf(wiz_PhyConf* phyconf)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
   uint8_t tmp = 0;
 80045bc:	2300      	movs	r3, #0
 80045be:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 80045c0:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80045c4:	f7fe f978 	bl	80028b8 <WIZCHIP_READ>
 80045c8:	4603      	mov	r3, r0
 80045ca:	73fb      	strb	r3, [r7, #15]
   phyconf->by   = (tmp & PHYCFGR_OPMD) ? PHY_CONFBY_SW : PHY_CONFBY_HW;
 80045cc:	7bfb      	ldrb	r3, [r7, #15]
 80045ce:	119b      	asrs	r3, r3, #6
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	701a      	strb	r2, [r3, #0]
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80045e2:	2b20      	cmp	r3, #32
 80045e4:	d001      	beq.n	80045ea <wizphy_getphyconf+0x36>
 80045e6:	2b38      	cmp	r3, #56	@ 0x38
 80045e8:	d103      	bne.n	80045f2 <wizphy_getphyconf+0x3e>
   {
      case PHYCFGR_OPMDC_ALLA:
      case PHYCFGR_OPMDC_100FA: 
         phyconf->mode = PHY_MODE_AUTONEGO;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	705a      	strb	r2, [r3, #1]
         break;
 80045f0:	e003      	b.n	80045fa <wizphy_getphyconf+0x46>
      default:
         phyconf->mode = PHY_MODE_MANUAL;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	705a      	strb	r2, [r3, #1]
         break;
 80045f8:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 80045fa:	7bfb      	ldrb	r3, [r7, #15]
 80045fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004600:	3b10      	subs	r3, #16
 8004602:	2b10      	cmp	r3, #16
 8004604:	bf8c      	ite	hi
 8004606:	2201      	movhi	r2, #1
 8004608:	2200      	movls	r2, #0
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	2a00      	cmp	r2, #0
 800460e:	d10f      	bne.n	8004630 <wizphy_getphyconf+0x7c>
 8004610:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <wizphy_getphyconf+0xcc>)
 8004612:	fa22 f303 	lsr.w	r3, r2, r3
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	2b00      	cmp	r3, #0
 800461c:	bf14      	ite	ne
 800461e:	2301      	movne	r3, #1
 8004620:	2300      	moveq	r3, #0
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d003      	beq.n	8004630 <wizphy_getphyconf+0x7c>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_100H:
         phyconf->speed = PHY_SPEED_100;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	709a      	strb	r2, [r3, #2]
         break;
 800462e:	e003      	b.n	8004638 <wizphy_getphyconf+0x84>
      default:
         phyconf->speed = PHY_SPEED_10;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	709a      	strb	r2, [r3, #2]
         break;
 8004636:	bf00      	nop
   }
   switch(tmp & PHYCFGR_OPMDC_ALLA)
 8004638:	7bfb      	ldrb	r3, [r7, #15]
 800463a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800463e:	3b08      	subs	r3, #8
 8004640:	2b18      	cmp	r3, #24
 8004642:	bf8c      	ite	hi
 8004644:	2201      	movhi	r2, #1
 8004646:	2200      	movls	r2, #0
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	2a00      	cmp	r2, #0
 800464c:	d10f      	bne.n	800466e <wizphy_getphyconf+0xba>
 800464e:	4a0d      	ldr	r2, [pc, #52]	@ (8004684 <wizphy_getphyconf+0xd0>)
 8004650:	fa22 f303 	lsr.w	r3, r2, r3
 8004654:	f003 0301 	and.w	r3, r3, #1
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b00      	cmp	r3, #0
 8004664:	d003      	beq.n	800466e <wizphy_getphyconf+0xba>
   {
      case PHYCFGR_OPMDC_100FA:
      case PHYCFGR_OPMDC_100F:
      case PHYCFGR_OPMDC_10F:
         phyconf->duplex = PHY_DUPLEX_FULL;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	70da      	strb	r2, [r3, #3]
         break;
 800466c:	e003      	b.n	8004676 <wizphy_getphyconf+0xc2>
      default:
         phyconf->duplex = PHY_DUPLEX_HALF;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	70da      	strb	r2, [r3, #3]
         break;
 8004674:	bf00      	nop
   }
}
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	00010101 	.word	0x00010101
 8004684:	01010001 	.word	0x01010001

08004688 <wizphy_setphypmode>:
   phyconf->duplex = (tmp & PHYCFGR_DPX_FULL) ? PHY_DUPLEX_FULL : PHY_DUPLEX_HALF;
   phyconf->speed  = (tmp & PHYCFGR_SPD_100) ? PHY_SPEED_100 : PHY_SPEED_10;
}

int8_t wizphy_setphypmode(uint8_t pmode)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
   tmp = getPHYCFGR();
 8004696:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 800469a:	f7fe f90d 	bl	80028b8 <WIZCHIP_READ>
 800469e:	4603      	mov	r3, r0
 80046a0:	73fb      	strb	r3, [r7, #15]
   if((tmp & PHYCFGR_OPMD)== 0) return -1;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <wizphy_setphypmode+0x2a>
 80046ac:	f04f 33ff 	mov.w	r3, #4294967295
 80046b0:	e030      	b.n	8004714 <wizphy_setphypmode+0x8c>
   tmp &= ~PHYCFGR_OPMDC_ALLA;         
 80046b2:	7bfb      	ldrb	r3, [r7, #15]
 80046b4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 80046b8:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80046ba:	79fb      	ldrb	r3, [r7, #7]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d104      	bne.n	80046ca <wizphy_setphypmode+0x42>
      tmp |= PHYCFGR_OPMDC_PDOWN;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
 80046c2:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 80046c6:	73fb      	strb	r3, [r7, #15]
 80046c8:	e003      	b.n	80046d2 <wizphy_setphypmode+0x4a>
   else
      tmp |= PHYCFGR_OPMDC_ALLA;
 80046ca:	7bfb      	ldrb	r3, [r7, #15]
 80046cc:	f043 0338 	orr.w	r3, r3, #56	@ 0x38
 80046d0:	73fb      	strb	r3, [r7, #15]
   setPHYCFGR(tmp);
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	4619      	mov	r1, r3
 80046d6:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80046da:	f7fe f939 	bl	8002950 <WIZCHIP_WRITE>
   wizphy_reset();
 80046de:	f7ff feff 	bl	80044e0 <wizphy_reset>
   tmp = getPHYCFGR();
 80046e2:	f44f 5038 	mov.w	r0, #11776	@ 0x2e00
 80046e6:	f7fe f8e7 	bl	80028b8 <WIZCHIP_READ>
 80046ea:	4603      	mov	r3, r0
 80046ec:	73fb      	strb	r3, [r7, #15]
   if( pmode == PHY_POWER_DOWN)
 80046ee:	79fb      	ldrb	r3, [r7, #7]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <wizphy_setphypmode+0x7a>
   {
      if(tmp & PHYCFGR_OPMDC_PDOWN) return 0;
 80046f4:	7bfb      	ldrb	r3, [r7, #15]
 80046f6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d008      	beq.n	8004710 <wizphy_setphypmode+0x88>
 80046fe:	2300      	movs	r3, #0
 8004700:	e008      	b.n	8004714 <wizphy_setphypmode+0x8c>
   }
   else
   {
      if(tmp & PHYCFGR_OPMDC_ALLA) return 0;
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <wizphy_setphypmode+0x88>
 800470c:	2300      	movs	r3, #0
 800470e:	e001      	b.n	8004714 <wizphy_setphypmode+0x8c>
   }
   return -1;
 8004710:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004714:	4618      	mov	r0, r3
 8004716:	3710      	adds	r7, #16
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <wizchip_setnetinfo>:
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2206      	movs	r2, #6
 8004728:	4619      	mov	r1, r3
 800472a:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 800472e:	f7fe f9bd 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	330e      	adds	r3, #14
 8004736:	2204      	movs	r2, #4
 8004738:	4619      	mov	r1, r3
 800473a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800473e:	f7fe f9b5 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	330a      	adds	r3, #10
 8004746:	2204      	movs	r2, #4
 8004748:	4619      	mov	r1, r3
 800474a:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 800474e:	f7fe f9ad 	bl	8002aac <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	3306      	adds	r3, #6
 8004756:	2204      	movs	r2, #4
 8004758:	4619      	mov	r1, r3
 800475a:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 800475e:	f7fe f9a5 	bl	8002aac <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	7c9a      	ldrb	r2, [r3, #18]
 8004766:	4b0b      	ldr	r3, [pc, #44]	@ (8004794 <wizchip_setnetinfo+0x78>)
 8004768:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	7cda      	ldrb	r2, [r3, #19]
 800476e:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <wizchip_setnetinfo+0x78>)
 8004770:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	7d1a      	ldrb	r2, [r3, #20]
 8004776:	4b07      	ldr	r3, [pc, #28]	@ (8004794 <wizchip_setnetinfo+0x78>)
 8004778:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	7d5a      	ldrb	r2, [r3, #21]
 800477e:	4b05      	ldr	r3, [pc, #20]	@ (8004794 <wizchip_setnetinfo+0x78>)
 8004780:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	7d9a      	ldrb	r2, [r3, #22]
 8004786:	4b04      	ldr	r3, [pc, #16]	@ (8004798 <wizchip_setnetinfo+0x7c>)
 8004788:	701a      	strb	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3708      	adds	r7, #8
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	200009ec 	.word	0x200009ec
 8004798:	200009f0 	.word	0x200009f0

0800479c <wizchip_getnetinfo>:

void wizchip_getnetinfo(wiz_NetInfo* pnetinfo)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b082      	sub	sp, #8
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
   getSHAR(pnetinfo->mac);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2206      	movs	r2, #6
 80047a8:	4619      	mov	r1, r3
 80047aa:	f44f 6010 	mov.w	r0, #2304	@ 0x900
 80047ae:	f7fe f91d 	bl	80029ec <WIZCHIP_READ_BUF>
   getGAR(pnetinfo->gw);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	330e      	adds	r3, #14
 80047b6:	2204      	movs	r2, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80047be:	f7fe f915 	bl	80029ec <WIZCHIP_READ_BUF>
   getSUBR(pnetinfo->sn);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	330a      	adds	r3, #10
 80047c6:	2204      	movs	r2, #4
 80047c8:	4619      	mov	r1, r3
 80047ca:	f44f 60a0 	mov.w	r0, #1280	@ 0x500
 80047ce:	f7fe f90d 	bl	80029ec <WIZCHIP_READ_BUF>
   getSIPR(pnetinfo->ip);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3306      	adds	r3, #6
 80047d6:	2204      	movs	r2, #4
 80047d8:	4619      	mov	r1, r3
 80047da:	f44f 6070 	mov.w	r0, #3840	@ 0xf00
 80047de:	f7fe f905 	bl	80029ec <WIZCHIP_READ_BUF>
   pnetinfo->dns[0]= _DNS_[0];
 80047e2:	4b0c      	ldr	r3, [pc, #48]	@ (8004814 <wizchip_getnetinfo+0x78>)
 80047e4:	781a      	ldrb	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	749a      	strb	r2, [r3, #18]
   pnetinfo->dns[1]= _DNS_[1];
 80047ea:	4b0a      	ldr	r3, [pc, #40]	@ (8004814 <wizchip_getnetinfo+0x78>)
 80047ec:	785a      	ldrb	r2, [r3, #1]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	74da      	strb	r2, [r3, #19]
   pnetinfo->dns[2]= _DNS_[2];
 80047f2:	4b08      	ldr	r3, [pc, #32]	@ (8004814 <wizchip_getnetinfo+0x78>)
 80047f4:	789a      	ldrb	r2, [r3, #2]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	751a      	strb	r2, [r3, #20]
   pnetinfo->dns[3]= _DNS_[3];
 80047fa:	4b06      	ldr	r3, [pc, #24]	@ (8004814 <wizchip_getnetinfo+0x78>)
 80047fc:	78da      	ldrb	r2, [r3, #3]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	755a      	strb	r2, [r3, #21]
   pnetinfo->dhcp  = _DHCP_;
 8004802:	4b05      	ldr	r3, [pc, #20]	@ (8004818 <wizchip_getnetinfo+0x7c>)
 8004804:	781a      	ldrb	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	759a      	strb	r2, [r3, #22]
}
 800480a:	bf00      	nop
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	200009ec 	.word	0x200009ec
 8004818:	200009f0 	.word	0x200009f0

0800481c <wizchip_setnetmode>:

int8_t wizchip_setnetmode(netmode_type netmode)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	4603      	mov	r3, r0
 8004824:	71fb      	strb	r3, [r7, #7]
   uint8_t tmp = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	73fb      	strb	r3, [r7, #15]
#if _WIZCHIP_ != W5500
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK)) return -1;
#else
   if(netmode & ~(NM_WAKEONLAN | NM_PPPOE | NM_PINGBLOCK | NM_FORCEARP)) return -1;
 800482a:	79fb      	ldrb	r3, [r7, #7]
 800482c:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <wizchip_setnetmode+0x1e>
 8004834:	f04f 33ff 	mov.w	r3, #4294967295
 8004838:	e00e      	b.n	8004858 <wizchip_setnetmode+0x3c>
#endif      
   tmp = getMR();
 800483a:	2000      	movs	r0, #0
 800483c:	f7fe f83c 	bl	80028b8 <WIZCHIP_READ>
 8004840:	4603      	mov	r3, r0
 8004842:	73fb      	strb	r3, [r7, #15]
   tmp |= (uint8_t)netmode;
 8004844:	7bfa      	ldrb	r2, [r7, #15]
 8004846:	79fb      	ldrb	r3, [r7, #7]
 8004848:	4313      	orrs	r3, r2
 800484a:	73fb      	strb	r3, [r7, #15]
   setMR(tmp);
 800484c:	7bfb      	ldrb	r3, [r7, #15]
 800484e:	4619      	mov	r1, r3
 8004850:	2000      	movs	r0, #0
 8004852:	f7fe f87d 	bl	8002950 <WIZCHIP_WRITE>
   return 0;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <wizchip_getnetmode>:

netmode_type wizchip_getnetmode(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
   return (netmode_type) getMR();
 8004864:	2000      	movs	r0, #0
 8004866:	f7fe f827 	bl	80028b8 <WIZCHIP_READ>
 800486a:	4603      	mov	r3, r0
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}

08004870 <wizchip_settimeout>:

void wizchip_settimeout(wiz_NetTimeout* nettime)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
   setRCR(nettime->retry_cnt);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	4619      	mov	r1, r3
 800487e:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 8004882:	f7fe f865 	bl	8002950 <WIZCHIP_WRITE>
   setRTR(nettime->time_100us);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	885b      	ldrh	r3, [r3, #2]
 800488a:	0a1b      	lsrs	r3, r3, #8
 800488c:	b29b      	uxth	r3, r3
 800488e:	b2db      	uxtb	r3, r3
 8004890:	4619      	mov	r1, r3
 8004892:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 8004896:	f7fe f85b 	bl	8002950 <WIZCHIP_WRITE>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	885b      	ldrh	r3, [r3, #2]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80048a6:	f7fe f853 	bl	8002950 <WIZCHIP_WRITE>
}
 80048aa:	bf00      	nop
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <wizchip_gettimeout>:

void wizchip_gettimeout(wiz_NetTimeout* nettime)
{
 80048b2:	b590      	push	{r4, r7, lr}
 80048b4:	b083      	sub	sp, #12
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
   nettime->retry_cnt = getRCR();
 80048ba:	f44f 50d8 	mov.w	r0, #6912	@ 0x1b00
 80048be:	f7fd fffb 	bl	80028b8 <WIZCHIP_READ>
 80048c2:	4603      	mov	r3, r0
 80048c4:	461a      	mov	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	701a      	strb	r2, [r3, #0]
   nettime->time_100us = getRTR();
 80048ca:	f44f 50c8 	mov.w	r0, #6400	@ 0x1900
 80048ce:	f7fd fff3 	bl	80028b8 <WIZCHIP_READ>
 80048d2:	4603      	mov	r3, r0
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	b29c      	uxth	r4, r3
 80048d8:	f44f 50d0 	mov.w	r0, #6656	@ 0x1a00
 80048dc:	f7fd ffec 	bl	80028b8 <WIZCHIP_READ>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4423      	add	r3, r4
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	805a      	strh	r2, [r3, #2]
}
 80048ea:	bf00      	nop
 80048ec:	370c      	adds	r7, #12
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd90      	pop	{r4, r7, pc}
	...

080048f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80048f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800492c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80048f8:	f7fc fba0 	bl	800103c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048fc:	480c      	ldr	r0, [pc, #48]	@ (8004930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048fe:	490d      	ldr	r1, [pc, #52]	@ (8004934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004900:	4a0d      	ldr	r2, [pc, #52]	@ (8004938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004904:	e002      	b.n	800490c <LoopCopyDataInit>

08004906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800490a:	3304      	adds	r3, #4

0800490c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800490c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800490e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004910:	d3f9      	bcc.n	8004906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004912:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004914:	4c0a      	ldr	r4, [pc, #40]	@ (8004940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004918:	e001      	b.n	800491e <LoopFillZerobss>

0800491a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800491a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800491c:	3204      	adds	r2, #4

0800491e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800491e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004920:	d3fb      	bcc.n	800491a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004922:	f001 feb5 	bl	8006690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004926:	f7fb fe23 	bl	8000570 <main>
  bx  lr    
 800492a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800492c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004934:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8004938:	080079b4 	.word	0x080079b4
  ldr r2, =_sbss
 800493c:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8004940:	20000b44 	.word	0x20000b44

08004944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004944:	e7fe      	b.n	8004944 <ADC_IRQHandler>
	...

08004948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800494c:	4b0e      	ldr	r3, [pc, #56]	@ (8004988 <HAL_Init+0x40>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a0d      	ldr	r2, [pc, #52]	@ (8004988 <HAL_Init+0x40>)
 8004952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004958:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <HAL_Init+0x40>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a0a      	ldr	r2, [pc, #40]	@ (8004988 <HAL_Init+0x40>)
 800495e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004964:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <HAL_Init+0x40>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a07      	ldr	r2, [pc, #28]	@ (8004988 <HAL_Init+0x40>)
 800496a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800496e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004970:	2003      	movs	r0, #3
 8004972:	f000 f931 	bl	8004bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004976:	200f      	movs	r0, #15
 8004978:	f000 f808 	bl	800498c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800497c:	f7fc f9b0 	bl	8000ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40023c00 	.word	0x40023c00

0800498c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004994:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <HAL_InitTick+0x54>)
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	4b12      	ldr	r3, [pc, #72]	@ (80049e4 <HAL_InitTick+0x58>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	4619      	mov	r1, r3
 800499e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80049a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 f93b 	bl	8004c26 <HAL_SYSTICK_Config>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e00e      	b.n	80049d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b0f      	cmp	r3, #15
 80049be:	d80a      	bhi.n	80049d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049c0:	2200      	movs	r2, #0
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	f04f 30ff 	mov.w	r0, #4294967295
 80049c8:	f000 f911 	bl	8004bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049cc:	4a06      	ldr	r2, [pc, #24]	@ (80049e8 <HAL_InitTick+0x5c>)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000020 	.word	0x20000020
 80049e4:	20000074 	.word	0x20000074
 80049e8:	20000070 	.word	0x20000070

080049ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049f0:	4b06      	ldr	r3, [pc, #24]	@ (8004a0c <HAL_IncTick+0x20>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	4b06      	ldr	r3, [pc, #24]	@ (8004a10 <HAL_IncTick+0x24>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4413      	add	r3, r2
 80049fc:	4a04      	ldr	r2, [pc, #16]	@ (8004a10 <HAL_IncTick+0x24>)
 80049fe:	6013      	str	r3, [r2, #0]
}
 8004a00:	bf00      	nop
 8004a02:	46bd      	mov	sp, r7
 8004a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a08:	4770      	bx	lr
 8004a0a:	bf00      	nop
 8004a0c:	20000074 	.word	0x20000074
 8004a10:	200009f4 	.word	0x200009f4

08004a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  return uwTick;
 8004a18:	4b03      	ldr	r3, [pc, #12]	@ (8004a28 <HAL_GetTick+0x14>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	200009f4 	.word	0x200009f4

08004a2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b084      	sub	sp, #16
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a34:	f7ff ffee 	bl	8004a14 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a44:	d005      	beq.n	8004a52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a46:	4b0a      	ldr	r3, [pc, #40]	@ (8004a70 <HAL_Delay+0x44>)
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	4413      	add	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a52:	bf00      	nop
 8004a54:	f7ff ffde 	bl	8004a14 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d8f7      	bhi.n	8004a54 <HAL_Delay+0x28>
  {
  }
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000074 	.word	0x20000074

08004a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b085      	sub	sp, #20
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a8a:	68ba      	ldr	r2, [r7, #8]
 8004a8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a90:	4013      	ands	r3, r2
 8004a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004aa6:	4a04      	ldr	r2, [pc, #16]	@ (8004ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	60d3      	str	r3, [r2, #12]
}
 8004aac:	bf00      	nop
 8004aae:	3714      	adds	r7, #20
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	e000ed00 	.word	0xe000ed00

08004abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ac0:	4b04      	ldr	r3, [pc, #16]	@ (8004ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	0a1b      	lsrs	r3, r3, #8
 8004ac6:	f003 0307 	and.w	r3, r3, #7
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	e000ed00 	.word	0xe000ed00

08004ad8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	4603      	mov	r3, r0
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	db0a      	blt.n	8004b02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	490c      	ldr	r1, [pc, #48]	@ (8004b24 <__NVIC_SetPriority+0x4c>)
 8004af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af6:	0112      	lsls	r2, r2, #4
 8004af8:	b2d2      	uxtb	r2, r2
 8004afa:	440b      	add	r3, r1
 8004afc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b00:	e00a      	b.n	8004b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4908      	ldr	r1, [pc, #32]	@ (8004b28 <__NVIC_SetPriority+0x50>)
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3b04      	subs	r3, #4
 8004b10:	0112      	lsls	r2, r2, #4
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	440b      	add	r3, r1
 8004b16:	761a      	strb	r2, [r3, #24]
}
 8004b18:	bf00      	nop
 8004b1a:	370c      	adds	r7, #12
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr
 8004b24:	e000e100 	.word	0xe000e100
 8004b28:	e000ed00 	.word	0xe000ed00

08004b2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b089      	sub	sp, #36	@ 0x24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f003 0307 	and.w	r3, r3, #7
 8004b3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f1c3 0307 	rsb	r3, r3, #7
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	bf28      	it	cs
 8004b4a:	2304      	movcs	r3, #4
 8004b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	3304      	adds	r3, #4
 8004b52:	2b06      	cmp	r3, #6
 8004b54:	d902      	bls.n	8004b5c <NVIC_EncodePriority+0x30>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	3b03      	subs	r3, #3
 8004b5a:	e000      	b.n	8004b5e <NVIC_EncodePriority+0x32>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b60:	f04f 32ff 	mov.w	r2, #4294967295
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6a:	43da      	mvns	r2, r3
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	401a      	ands	r2, r3
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b74:	f04f 31ff 	mov.w	r1, #4294967295
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b7e:	43d9      	mvns	r1, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b84:	4313      	orrs	r3, r2
         );
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3724      	adds	r7, #36	@ 0x24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
	...

08004b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b082      	sub	sp, #8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ba4:	d301      	bcc.n	8004baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e00f      	b.n	8004bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004baa:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bb2:	210f      	movs	r1, #15
 8004bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004bb8:	f7ff ff8e 	bl	8004ad8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bc2:	4b04      	ldr	r3, [pc, #16]	@ (8004bd4 <SysTick_Config+0x40>)
 8004bc4:	2207      	movs	r2, #7
 8004bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3708      	adds	r7, #8
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	e000e010 	.word	0xe000e010

08004bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b082      	sub	sp, #8
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7ff ff47 	bl	8004a74 <__NVIC_SetPriorityGrouping>
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c00:	f7ff ff5c 	bl	8004abc <__NVIC_GetPriorityGrouping>
 8004c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	68b9      	ldr	r1, [r7, #8]
 8004c0a:	6978      	ldr	r0, [r7, #20]
 8004c0c:	f7ff ff8e 	bl	8004b2c <NVIC_EncodePriority>
 8004c10:	4602      	mov	r2, r0
 8004c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c16:	4611      	mov	r1, r2
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f7ff ff5d 	bl	8004ad8 <__NVIC_SetPriority>
}
 8004c1e:	bf00      	nop
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}

08004c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c26:	b580      	push	{r7, lr}
 8004c28:	b082      	sub	sp, #8
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f7ff ffb0 	bl	8004b94 <SysTick_Config>
 8004c34:	4603      	mov	r3, r0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	@ 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c56:	2300      	movs	r3, #0
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	e16b      	b.n	8004f34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	697a      	ldr	r2, [r7, #20]
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c70:	693a      	ldr	r2, [r7, #16]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	f040 815a 	bne.w	8004f2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f003 0303 	and.w	r3, r3, #3
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d005      	beq.n	8004c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d130      	bne.n	8004cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca2:	43db      	mvns	r3, r3
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	4013      	ands	r3, r2
 8004ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	68da      	ldr	r2, [r3, #12]
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	69ba      	ldr	r2, [r7, #24]
 8004cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004cc8:	2201      	movs	r2, #1
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd0:	43db      	mvns	r3, r3
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	4013      	ands	r3, r2
 8004cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	091b      	lsrs	r3, r3, #4
 8004cde:	f003 0201 	and.w	r2, r3, #1
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b03      	cmp	r3, #3
 8004cfe:	d017      	beq.n	8004d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	689a      	ldr	r2, [r3, #8]
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	fa02 f303 	lsl.w	r3, r2, r3
 8004d24:	69ba      	ldr	r2, [r7, #24]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	69ba      	ldr	r2, [r7, #24]
 8004d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d123      	bne.n	8004d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	08da      	lsrs	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	3208      	adds	r2, #8
 8004d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	f003 0307 	and.w	r3, r3, #7
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	220f      	movs	r2, #15
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	69ba      	ldr	r2, [r7, #24]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	691a      	ldr	r2, [r3, #16]
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f003 0307 	and.w	r3, r3, #7
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	08da      	lsrs	r2, r3, #3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	3208      	adds	r2, #8
 8004d7e:	69b9      	ldr	r1, [r7, #24]
 8004d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	2203      	movs	r2, #3
 8004d90:	fa02 f303 	lsl.w	r3, r2, r3
 8004d94:	43db      	mvns	r3, r3
 8004d96:	69ba      	ldr	r2, [r7, #24]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	f003 0203 	and.w	r2, r3, #3
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 80b4 	beq.w	8004f2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	4b60      	ldr	r3, [pc, #384]	@ (8004f4c <HAL_GPIO_Init+0x30c>)
 8004dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dce:	4a5f      	ldr	r2, [pc, #380]	@ (8004f4c <HAL_GPIO_Init+0x30c>)
 8004dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8004f4c <HAL_GPIO_Init+0x30c>)
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004de2:	4a5b      	ldr	r2, [pc, #364]	@ (8004f50 <HAL_GPIO_Init+0x310>)
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	089b      	lsrs	r3, r3, #2
 8004de8:	3302      	adds	r3, #2
 8004dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	220f      	movs	r2, #15
 8004dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	69ba      	ldr	r2, [r7, #24]
 8004e02:	4013      	ands	r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a52      	ldr	r2, [pc, #328]	@ (8004f54 <HAL_GPIO_Init+0x314>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d02b      	beq.n	8004e66 <HAL_GPIO_Init+0x226>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	4a51      	ldr	r2, [pc, #324]	@ (8004f58 <HAL_GPIO_Init+0x318>)
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d025      	beq.n	8004e62 <HAL_GPIO_Init+0x222>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	4a50      	ldr	r2, [pc, #320]	@ (8004f5c <HAL_GPIO_Init+0x31c>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d01f      	beq.n	8004e5e <HAL_GPIO_Init+0x21e>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a4f      	ldr	r2, [pc, #316]	@ (8004f60 <HAL_GPIO_Init+0x320>)
 8004e22:	4293      	cmp	r3, r2
 8004e24:	d019      	beq.n	8004e5a <HAL_GPIO_Init+0x21a>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	4a4e      	ldr	r2, [pc, #312]	@ (8004f64 <HAL_GPIO_Init+0x324>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_GPIO_Init+0x216>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	4a4d      	ldr	r2, [pc, #308]	@ (8004f68 <HAL_GPIO_Init+0x328>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d00d      	beq.n	8004e52 <HAL_GPIO_Init+0x212>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	4a4c      	ldr	r2, [pc, #304]	@ (8004f6c <HAL_GPIO_Init+0x32c>)
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d007      	beq.n	8004e4e <HAL_GPIO_Init+0x20e>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a4b      	ldr	r2, [pc, #300]	@ (8004f70 <HAL_GPIO_Init+0x330>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d101      	bne.n	8004e4a <HAL_GPIO_Init+0x20a>
 8004e46:	2307      	movs	r3, #7
 8004e48:	e00e      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e4a:	2308      	movs	r3, #8
 8004e4c:	e00c      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e4e:	2306      	movs	r3, #6
 8004e50:	e00a      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e52:	2305      	movs	r3, #5
 8004e54:	e008      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e56:	2304      	movs	r3, #4
 8004e58:	e006      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	e004      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e5e:	2302      	movs	r3, #2
 8004e60:	e002      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e62:	2301      	movs	r3, #1
 8004e64:	e000      	b.n	8004e68 <HAL_GPIO_Init+0x228>
 8004e66:	2300      	movs	r3, #0
 8004e68:	69fa      	ldr	r2, [r7, #28]
 8004e6a:	f002 0203 	and.w	r2, r2, #3
 8004e6e:	0092      	lsls	r2, r2, #2
 8004e70:	4093      	lsls	r3, r2
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e78:	4935      	ldr	r1, [pc, #212]	@ (8004f50 <HAL_GPIO_Init+0x310>)
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	089b      	lsrs	r3, r3, #2
 8004e7e:	3302      	adds	r3, #2
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	43db      	mvns	r3, r3
 8004e90:	69ba      	ldr	r2, [r7, #24]
 8004e92:	4013      	ands	r3, r2
 8004e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d003      	beq.n	8004eaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004eaa:	4a32      	ldr	r2, [pc, #200]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004eac:	69bb      	ldr	r3, [r7, #24]
 8004eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004eb0:	4b30      	ldr	r3, [pc, #192]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ed4:	4a27      	ldr	r2, [pc, #156]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004eda:	4b26      	ldr	r3, [pc, #152]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	43db      	mvns	r3, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d003      	beq.n	8004efe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004efe:	4a1d      	ldr	r2, [pc, #116]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f04:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4013      	ands	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f28:	4a12      	ldr	r2, [pc, #72]	@ (8004f74 <HAL_GPIO_Init+0x334>)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	3301      	adds	r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	f67f ae90 	bls.w	8004c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	3724      	adds	r7, #36	@ 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
 8004f4a:	bf00      	nop
 8004f4c:	40023800 	.word	0x40023800
 8004f50:	40013800 	.word	0x40013800
 8004f54:	40020000 	.word	0x40020000
 8004f58:	40020400 	.word	0x40020400
 8004f5c:	40020800 	.word	0x40020800
 8004f60:	40020c00 	.word	0x40020c00
 8004f64:	40021000 	.word	0x40021000
 8004f68:	40021400 	.word	0x40021400
 8004f6c:	40021800 	.word	0x40021800
 8004f70:	40021c00 	.word	0x40021c00
 8004f74:	40013c00 	.word	0x40013c00

08004f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
 8004f80:	460b      	mov	r3, r1
 8004f82:	807b      	strh	r3, [r7, #2]
 8004f84:	4613      	mov	r3, r2
 8004f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f88:	787b      	ldrb	r3, [r7, #1]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f8e:	887a      	ldrh	r2, [r7, #2]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f94:	e003      	b.n	8004f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f96:	887b      	ldrh	r3, [r7, #2]
 8004f98:	041a      	lsls	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	619a      	str	r2, [r3, #24]
}
 8004f9e:	bf00      	nop
 8004fa0:	370c      	adds	r7, #12
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa8:	4770      	bx	lr
	...

08004fac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d101      	bne.n	8004fbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e267      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0301 	and.w	r3, r3, #1
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d075      	beq.n	80050b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fca:	4b88      	ldr	r3, [pc, #544]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b04      	cmp	r3, #4
 8004fd4:	d00c      	beq.n	8004ff0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fd6:	4b85      	ldr	r3, [pc, #532]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d112      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe2:	4b82      	ldr	r3, [pc, #520]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fee:	d10b      	bne.n	8005008 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff0:	4b7e      	ldr	r3, [pc, #504]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d05b      	beq.n	80050b4 <HAL_RCC_OscConfig+0x108>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d157      	bne.n	80050b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e242      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d106      	bne.n	8005020 <HAL_RCC_OscConfig+0x74>
 8005012:	4b76      	ldr	r3, [pc, #472]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a75      	ldr	r2, [pc, #468]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e01d      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005028:	d10c      	bne.n	8005044 <HAL_RCC_OscConfig+0x98>
 800502a:	4b70      	ldr	r3, [pc, #448]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a6f      	ldr	r2, [pc, #444]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b6d      	ldr	r3, [pc, #436]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6c      	ldr	r2, [pc, #432]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800503c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	e00b      	b.n	800505c <HAL_RCC_OscConfig+0xb0>
 8005044:	4b69      	ldr	r3, [pc, #420]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a68      	ldr	r2, [pc, #416]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800504a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800504e:	6013      	str	r3, [r2, #0]
 8005050:	4b66      	ldr	r3, [pc, #408]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a65      	ldr	r2, [pc, #404]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005056:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800505a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d013      	beq.n	800508c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005064:	f7ff fcd6 	bl	8004a14 <HAL_GetTick>
 8005068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	e008      	b.n	800507e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800506c:	f7ff fcd2 	bl	8004a14 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	2b64      	cmp	r3, #100	@ 0x64
 8005078:	d901      	bls.n	800507e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	e207      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800507e:	4b5b      	ldr	r3, [pc, #364]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d0f0      	beq.n	800506c <HAL_RCC_OscConfig+0xc0>
 800508a:	e014      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800508c:	f7ff fcc2 	bl	8004a14 <HAL_GetTick>
 8005090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005092:	e008      	b.n	80050a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005094:	f7ff fcbe 	bl	8004a14 <HAL_GetTick>
 8005098:	4602      	mov	r2, r0
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b64      	cmp	r3, #100	@ 0x64
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e1f3      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80050a6:	4b51      	ldr	r3, [pc, #324]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0xe8>
 80050b2:	e000      	b.n	80050b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d063      	beq.n	800518a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050c2:	4b4a      	ldr	r3, [pc, #296]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 030c 	and.w	r3, r3, #12
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ce:	4b47      	ldr	r3, [pc, #284]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d11c      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050da:	4b44      	ldr	r3, [pc, #272]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d116      	bne.n	8005114 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050e6:	4b41      	ldr	r3, [pc, #260]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d005      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e1c7      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fe:	4b3b      	ldr	r3, [pc, #236]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	4937      	ldr	r1, [pc, #220]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800510e:	4313      	orrs	r3, r2
 8005110:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005112:	e03a      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d020      	beq.n	800515e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800511c:	4b34      	ldr	r3, [pc, #208]	@ (80051f0 <HAL_RCC_OscConfig+0x244>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005122:	f7ff fc77 	bl	8004a14 <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800512a:	f7ff fc73 	bl	8004a14 <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e1a8      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800513c:	4b2b      	ldr	r3, [pc, #172]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005148:	4b28      	ldr	r3, [pc, #160]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4925      	ldr	r1, [pc, #148]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005158:	4313      	orrs	r3, r2
 800515a:	600b      	str	r3, [r1, #0]
 800515c:	e015      	b.n	800518a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800515e:	4b24      	ldr	r3, [pc, #144]	@ (80051f0 <HAL_RCC_OscConfig+0x244>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005164:	f7ff fc56 	bl	8004a14 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800516c:	f7ff fc52 	bl	8004a14 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e187      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800517e:	4b1b      	ldr	r3, [pc, #108]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0308 	and.w	r3, r3, #8
 8005192:	2b00      	cmp	r3, #0
 8005194:	d036      	beq.n	8005204 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d016      	beq.n	80051cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800519e:	4b15      	ldr	r3, [pc, #84]	@ (80051f4 <HAL_RCC_OscConfig+0x248>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051a4:	f7ff fc36 	bl	8004a14 <HAL_GetTick>
 80051a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051aa:	e008      	b.n	80051be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051ac:	f7ff fc32 	bl	8004a14 <HAL_GetTick>
 80051b0:	4602      	mov	r2, r0
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e167      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051be:	4b0b      	ldr	r3, [pc, #44]	@ (80051ec <HAL_RCC_OscConfig+0x240>)
 80051c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d0f0      	beq.n	80051ac <HAL_RCC_OscConfig+0x200>
 80051ca:	e01b      	b.n	8005204 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051cc:	4b09      	ldr	r3, [pc, #36]	@ (80051f4 <HAL_RCC_OscConfig+0x248>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051d2:	f7ff fc1f 	bl	8004a14 <HAL_GetTick>
 80051d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	e00e      	b.n	80051f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80051da:	f7ff fc1b 	bl	8004a14 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d907      	bls.n	80051f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e150      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
 80051ec:	40023800 	.word	0x40023800
 80051f0:	42470000 	.word	0x42470000
 80051f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f8:	4b88      	ldr	r3, [pc, #544]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80051fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ea      	bne.n	80051da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8097 	beq.w	8005340 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005212:	2300      	movs	r3, #0
 8005214:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005216:	4b81      	ldr	r3, [pc, #516]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800521a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005222:	2300      	movs	r3, #0
 8005224:	60bb      	str	r3, [r7, #8]
 8005226:	4b7d      	ldr	r3, [pc, #500]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522a:	4a7c      	ldr	r2, [pc, #496]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800522c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005230:	6413      	str	r3, [r2, #64]	@ 0x40
 8005232:	4b7a      	ldr	r3, [pc, #488]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800523a:	60bb      	str	r3, [r7, #8]
 800523c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800523e:	2301      	movs	r3, #1
 8005240:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005242:	4b77      	ldr	r3, [pc, #476]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800524a:	2b00      	cmp	r3, #0
 800524c:	d118      	bne.n	8005280 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800524e:	4b74      	ldr	r3, [pc, #464]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a73      	ldr	r2, [pc, #460]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800525a:	f7ff fbdb 	bl	8004a14 <HAL_GetTick>
 800525e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005260:	e008      	b.n	8005274 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005262:	f7ff fbd7 	bl	8004a14 <HAL_GetTick>
 8005266:	4602      	mov	r2, r0
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	1ad3      	subs	r3, r2, r3
 800526c:	2b02      	cmp	r3, #2
 800526e:	d901      	bls.n	8005274 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005270:	2303      	movs	r3, #3
 8005272:	e10c      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005274:	4b6a      	ldr	r3, [pc, #424]	@ (8005420 <HAL_RCC_OscConfig+0x474>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800527c:	2b00      	cmp	r3, #0
 800527e:	d0f0      	beq.n	8005262 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d106      	bne.n	8005296 <HAL_RCC_OscConfig+0x2ea>
 8005288:	4b64      	ldr	r3, [pc, #400]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800528a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528c:	4a63      	ldr	r2, [pc, #396]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800528e:	f043 0301 	orr.w	r3, r3, #1
 8005292:	6713      	str	r3, [r2, #112]	@ 0x70
 8005294:	e01c      	b.n	80052d0 <HAL_RCC_OscConfig+0x324>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	2b05      	cmp	r3, #5
 800529c:	d10c      	bne.n	80052b8 <HAL_RCC_OscConfig+0x30c>
 800529e:	4b5f      	ldr	r3, [pc, #380]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a2:	4a5e      	ldr	r2, [pc, #376]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052a4:	f043 0304 	orr.w	r3, r3, #4
 80052a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80052aa:	4b5c      	ldr	r3, [pc, #368]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ae:	4a5b      	ldr	r2, [pc, #364]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052b0:	f043 0301 	orr.w	r3, r3, #1
 80052b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80052b6:	e00b      	b.n	80052d0 <HAL_RCC_OscConfig+0x324>
 80052b8:	4b58      	ldr	r3, [pc, #352]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052bc:	4a57      	ldr	r2, [pc, #348]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052be:	f023 0301 	bic.w	r3, r3, #1
 80052c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052c4:	4b55      	ldr	r3, [pc, #340]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c8:	4a54      	ldr	r2, [pc, #336]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052ca:	f023 0304 	bic.w	r3, r3, #4
 80052ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d015      	beq.n	8005304 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d8:	f7ff fb9c 	bl	8004a14 <HAL_GetTick>
 80052dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052de:	e00a      	b.n	80052f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052e0:	f7ff fb98 	bl	8004a14 <HAL_GetTick>
 80052e4:	4602      	mov	r2, r0
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d901      	bls.n	80052f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e0cb      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052f6:	4b49      	ldr	r3, [pc, #292]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80052f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d0ee      	beq.n	80052e0 <HAL_RCC_OscConfig+0x334>
 8005302:	e014      	b.n	800532e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005304:	f7ff fb86 	bl	8004a14 <HAL_GetTick>
 8005308:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800530a:	e00a      	b.n	8005322 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800530c:	f7ff fb82 	bl	8004a14 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	f241 3288 	movw	r2, #5000	@ 0x1388
 800531a:	4293      	cmp	r3, r2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e0b5      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005322:	4b3e      	ldr	r3, [pc, #248]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005324:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d1ee      	bne.n	800530c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005334:	4b39      	ldr	r3, [pc, #228]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005338:	4a38      	ldr	r2, [pc, #224]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800533a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800533e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	699b      	ldr	r3, [r3, #24]
 8005344:	2b00      	cmp	r3, #0
 8005346:	f000 80a1 	beq.w	800548c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800534a:	4b34      	ldr	r3, [pc, #208]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 030c 	and.w	r3, r3, #12
 8005352:	2b08      	cmp	r3, #8
 8005354:	d05c      	beq.n	8005410 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	699b      	ldr	r3, [r3, #24]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d141      	bne.n	80053e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800535e:	4b31      	ldr	r3, [pc, #196]	@ (8005424 <HAL_RCC_OscConfig+0x478>)
 8005360:	2200      	movs	r2, #0
 8005362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005364:	f7ff fb56 	bl	8004a14 <HAL_GetTick>
 8005368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800536a:	e008      	b.n	800537e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800536c:	f7ff fb52 	bl	8004a14 <HAL_GetTick>
 8005370:	4602      	mov	r2, r0
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	1ad3      	subs	r3, r2, r3
 8005376:	2b02      	cmp	r3, #2
 8005378:	d901      	bls.n	800537e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800537a:	2303      	movs	r3, #3
 800537c:	e087      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800537e:	4b27      	ldr	r3, [pc, #156]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1f0      	bne.n	800536c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	69da      	ldr	r2, [r3, #28]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	019b      	lsls	r3, r3, #6
 800539a:	431a      	orrs	r2, r3
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	3b01      	subs	r3, #1
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	431a      	orrs	r2, r3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ac:	061b      	lsls	r3, r3, #24
 80053ae:	491b      	ldr	r1, [pc, #108]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005424 <HAL_RCC_OscConfig+0x478>)
 80053b6:	2201      	movs	r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053ba:	f7ff fb2b 	bl	8004a14 <HAL_GetTick>
 80053be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053c0:	e008      	b.n	80053d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053c2:	f7ff fb27 	bl	8004a14 <HAL_GetTick>
 80053c6:	4602      	mov	r2, r0
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	1ad3      	subs	r3, r2, r3
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d901      	bls.n	80053d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053d0:	2303      	movs	r3, #3
 80053d2:	e05c      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053d4:	4b11      	ldr	r3, [pc, #68]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0f0      	beq.n	80053c2 <HAL_RCC_OscConfig+0x416>
 80053e0:	e054      	b.n	800548c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053e2:	4b10      	ldr	r3, [pc, #64]	@ (8005424 <HAL_RCC_OscConfig+0x478>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7ff fb14 	bl	8004a14 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80053f0:	f7ff fb10 	bl	8004a14 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e045      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005402:	4b06      	ldr	r3, [pc, #24]	@ (800541c <HAL_RCC_OscConfig+0x470>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x444>
 800540e:	e03d      	b.n	800548c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	699b      	ldr	r3, [r3, #24]
 8005414:	2b01      	cmp	r3, #1
 8005416:	d107      	bne.n	8005428 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e038      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
 800541c:	40023800 	.word	0x40023800
 8005420:	40007000 	.word	0x40007000
 8005424:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005428:	4b1b      	ldr	r3, [pc, #108]	@ (8005498 <HAL_RCC_OscConfig+0x4ec>)
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d028      	beq.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005440:	429a      	cmp	r2, r3
 8005442:	d121      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d11a      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005458:	4013      	ands	r3, r2
 800545a:	687a      	ldr	r2, [r7, #4]
 800545c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800545e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005460:	4293      	cmp	r3, r2
 8005462:	d111      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800546e:	085b      	lsrs	r3, r3, #1
 8005470:	3b01      	subs	r3, #1
 8005472:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005474:	429a      	cmp	r2, r3
 8005476:	d107      	bne.n	8005488 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005482:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	40023800 	.word	0x40023800

0800549c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	e0cc      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054b0:	4b68      	ldr	r3, [pc, #416]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0307 	and.w	r3, r3, #7
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d90c      	bls.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054be:	4b65      	ldr	r3, [pc, #404]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054c6:	4b63      	ldr	r3, [pc, #396]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0307 	and.w	r3, r3, #7
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d001      	beq.n	80054d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e0b8      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0302 	and.w	r3, r3, #2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d020      	beq.n	8005526 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054f0:	4b59      	ldr	r3, [pc, #356]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	4a58      	ldr	r2, [pc, #352]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f003 0308 	and.w	r3, r3, #8
 8005504:	2b00      	cmp	r3, #0
 8005506:	d005      	beq.n	8005514 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005508:	4b53      	ldr	r3, [pc, #332]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	4a52      	ldr	r2, [pc, #328]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005512:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005514:	4b50      	ldr	r3, [pc, #320]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	494d      	ldr	r1, [pc, #308]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	4313      	orrs	r3, r2
 8005524:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0301 	and.w	r3, r3, #1
 800552e:	2b00      	cmp	r3, #0
 8005530:	d044      	beq.n	80055bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800553a:	4b47      	ldr	r3, [pc, #284]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d119      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e07f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	2b02      	cmp	r3, #2
 8005550:	d003      	beq.n	800555a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005556:	2b03      	cmp	r3, #3
 8005558:	d107      	bne.n	800556a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800555a:	4b3f      	ldr	r3, [pc, #252]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005562:	2b00      	cmp	r3, #0
 8005564:	d109      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e06f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556a:	4b3b      	ldr	r3, [pc, #236]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0302 	and.w	r3, r3, #2
 8005572:	2b00      	cmp	r3, #0
 8005574:	d101      	bne.n	800557a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	e067      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b37      	ldr	r3, [pc, #220]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4934      	ldr	r1, [pc, #208]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800558c:	f7ff fa42 	bl	8004a14 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7ff fa3e 	bl	8004a14 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e04f      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055bc:	4b25      	ldr	r3, [pc, #148]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0307 	and.w	r3, r3, #7
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d20c      	bcs.n	80055e4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055ca:	4b22      	ldr	r3, [pc, #136]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	683a      	ldr	r2, [r7, #0]
 80055ce:	b2d2      	uxtb	r2, r2
 80055d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055d2:	4b20      	ldr	r3, [pc, #128]	@ (8005654 <HAL_RCC_ClockConfig+0x1b8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0307 	and.w	r3, r3, #7
 80055da:	683a      	ldr	r2, [r7, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d001      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055e0:	2301      	movs	r3, #1
 80055e2:	e032      	b.n	800564a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0304 	and.w	r3, r3, #4
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d008      	beq.n	8005602 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055f0:	4b19      	ldr	r3, [pc, #100]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4916      	ldr	r1, [pc, #88]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f003 0308 	and.w	r3, r3, #8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d009      	beq.n	8005622 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800560e:	4b12      	ldr	r3, [pc, #72]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	691b      	ldr	r3, [r3, #16]
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	490e      	ldr	r1, [pc, #56]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	4313      	orrs	r3, r2
 8005620:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005622:	f000 f821 	bl	8005668 <HAL_RCC_GetSysClockFreq>
 8005626:	4602      	mov	r2, r0
 8005628:	4b0b      	ldr	r3, [pc, #44]	@ (8005658 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	091b      	lsrs	r3, r3, #4
 800562e:	f003 030f 	and.w	r3, r3, #15
 8005632:	490a      	ldr	r1, [pc, #40]	@ (800565c <HAL_RCC_ClockConfig+0x1c0>)
 8005634:	5ccb      	ldrb	r3, [r1, r3]
 8005636:	fa22 f303 	lsr.w	r3, r2, r3
 800563a:	4a09      	ldr	r2, [pc, #36]	@ (8005660 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800563e:	4b09      	ldr	r3, [pc, #36]	@ (8005664 <HAL_RCC_ClockConfig+0x1c8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f7ff f9a2 	bl	800498c <HAL_InitTick>

  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40023c00 	.word	0x40023c00
 8005658:	40023800 	.word	0x40023800
 800565c:	080078ac 	.word	0x080078ac
 8005660:	20000020 	.word	0x20000020
 8005664:	20000070 	.word	0x20000070

08005668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005668:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800566c:	b094      	sub	sp, #80	@ 0x50
 800566e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	647b      	str	r3, [r7, #68]	@ 0x44
 8005674:	2300      	movs	r3, #0
 8005676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005678:	2300      	movs	r3, #0
 800567a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800567c:	2300      	movs	r3, #0
 800567e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005680:	4b79      	ldr	r3, [pc, #484]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f003 030c 	and.w	r3, r3, #12
 8005688:	2b08      	cmp	r3, #8
 800568a:	d00d      	beq.n	80056a8 <HAL_RCC_GetSysClockFreq+0x40>
 800568c:	2b08      	cmp	r3, #8
 800568e:	f200 80e1 	bhi.w	8005854 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005692:	2b00      	cmp	r3, #0
 8005694:	d002      	beq.n	800569c <HAL_RCC_GetSysClockFreq+0x34>
 8005696:	2b04      	cmp	r3, #4
 8005698:	d003      	beq.n	80056a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800569a:	e0db      	b.n	8005854 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800569c:	4b73      	ldr	r3, [pc, #460]	@ (800586c <HAL_RCC_GetSysClockFreq+0x204>)
 800569e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80056a0:	e0db      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80056a2:	4b73      	ldr	r3, [pc, #460]	@ (8005870 <HAL_RCC_GetSysClockFreq+0x208>)
 80056a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80056a6:	e0d8      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d063      	beq.n	8005786 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056be:	4b6a      	ldr	r3, [pc, #424]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	099b      	lsrs	r3, r3, #6
 80056c4:	2200      	movs	r2, #0
 80056c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80056d2:	2300      	movs	r3, #0
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80056d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056da:	4622      	mov	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f04f 0000 	mov.w	r0, #0
 80056e2:	f04f 0100 	mov.w	r1, #0
 80056e6:	0159      	lsls	r1, r3, #5
 80056e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056ec:	0150      	lsls	r0, r2, #5
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4621      	mov	r1, r4
 80056f4:	1a51      	subs	r1, r2, r1
 80056f6:	6139      	str	r1, [r7, #16]
 80056f8:	4629      	mov	r1, r5
 80056fa:	eb63 0301 	sbc.w	r3, r3, r1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	f04f 0200 	mov.w	r2, #0
 8005704:	f04f 0300 	mov.w	r3, #0
 8005708:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800570c:	4659      	mov	r1, fp
 800570e:	018b      	lsls	r3, r1, #6
 8005710:	4651      	mov	r1, sl
 8005712:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005716:	4651      	mov	r1, sl
 8005718:	018a      	lsls	r2, r1, #6
 800571a:	4651      	mov	r1, sl
 800571c:	ebb2 0801 	subs.w	r8, r2, r1
 8005720:	4659      	mov	r1, fp
 8005722:	eb63 0901 	sbc.w	r9, r3, r1
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005732:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005736:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800573a:	4690      	mov	r8, r2
 800573c:	4699      	mov	r9, r3
 800573e:	4623      	mov	r3, r4
 8005740:	eb18 0303 	adds.w	r3, r8, r3
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	462b      	mov	r3, r5
 8005748:	eb49 0303 	adc.w	r3, r9, r3
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800575a:	4629      	mov	r1, r5
 800575c:	024b      	lsls	r3, r1, #9
 800575e:	4621      	mov	r1, r4
 8005760:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005764:	4621      	mov	r1, r4
 8005766:	024a      	lsls	r2, r1, #9
 8005768:	4610      	mov	r0, r2
 800576a:	4619      	mov	r1, r3
 800576c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800576e:	2200      	movs	r2, #0
 8005770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005772:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005774:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005778:	f7fa fd82 	bl	8000280 <__aeabi_uldivmod>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4613      	mov	r3, r2
 8005782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005784:	e058      	b.n	8005838 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005786:	4b38      	ldr	r3, [pc, #224]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	099b      	lsrs	r3, r3, #6
 800578c:	2200      	movs	r2, #0
 800578e:	4618      	mov	r0, r3
 8005790:	4611      	mov	r1, r2
 8005792:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005796:	623b      	str	r3, [r7, #32]
 8005798:	2300      	movs	r3, #0
 800579a:	627b      	str	r3, [r7, #36]	@ 0x24
 800579c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057a0:	4642      	mov	r2, r8
 80057a2:	464b      	mov	r3, r9
 80057a4:	f04f 0000 	mov.w	r0, #0
 80057a8:	f04f 0100 	mov.w	r1, #0
 80057ac:	0159      	lsls	r1, r3, #5
 80057ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057b2:	0150      	lsls	r0, r2, #5
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4641      	mov	r1, r8
 80057ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80057be:	4649      	mov	r1, r9
 80057c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057d8:	ebb2 040a 	subs.w	r4, r2, sl
 80057dc:	eb63 050b 	sbc.w	r5, r3, fp
 80057e0:	f04f 0200 	mov.w	r2, #0
 80057e4:	f04f 0300 	mov.w	r3, #0
 80057e8:	00eb      	lsls	r3, r5, #3
 80057ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057ee:	00e2      	lsls	r2, r4, #3
 80057f0:	4614      	mov	r4, r2
 80057f2:	461d      	mov	r5, r3
 80057f4:	4643      	mov	r3, r8
 80057f6:	18e3      	adds	r3, r4, r3
 80057f8:	603b      	str	r3, [r7, #0]
 80057fa:	464b      	mov	r3, r9
 80057fc:	eb45 0303 	adc.w	r3, r5, r3
 8005800:	607b      	str	r3, [r7, #4]
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800580e:	4629      	mov	r1, r5
 8005810:	028b      	lsls	r3, r1, #10
 8005812:	4621      	mov	r1, r4
 8005814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005818:	4621      	mov	r1, r4
 800581a:	028a      	lsls	r2, r1, #10
 800581c:	4610      	mov	r0, r2
 800581e:	4619      	mov	r1, r3
 8005820:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005822:	2200      	movs	r2, #0
 8005824:	61bb      	str	r3, [r7, #24]
 8005826:	61fa      	str	r2, [r7, #28]
 8005828:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800582c:	f7fa fd28 	bl	8000280 <__aeabi_uldivmod>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	4613      	mov	r3, r2
 8005836:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005838:	4b0b      	ldr	r3, [pc, #44]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x200>)
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	0c1b      	lsrs	r3, r3, #16
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	3301      	adds	r3, #1
 8005844:	005b      	lsls	r3, r3, #1
 8005846:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8005848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800584a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800584c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005850:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005852:	e002      	b.n	800585a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005854:	4b05      	ldr	r3, [pc, #20]	@ (800586c <HAL_RCC_GetSysClockFreq+0x204>)
 8005856:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800585a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800585c:	4618      	mov	r0, r3
 800585e:	3750      	adds	r7, #80	@ 0x50
 8005860:	46bd      	mov	sp, r7
 8005862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005866:	bf00      	nop
 8005868:	40023800 	.word	0x40023800
 800586c:	00f42400 	.word	0x00f42400
 8005870:	007a1200 	.word	0x007a1200

08005874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005874:	b480      	push	{r7}
 8005876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005878:	4b03      	ldr	r3, [pc, #12]	@ (8005888 <HAL_RCC_GetHCLKFreq+0x14>)
 800587a:	681b      	ldr	r3, [r3, #0]
}
 800587c:	4618      	mov	r0, r3
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	20000020 	.word	0x20000020

0800588c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005890:	f7ff fff0 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 8005894:	4602      	mov	r2, r0
 8005896:	4b05      	ldr	r3, [pc, #20]	@ (80058ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	0a9b      	lsrs	r3, r3, #10
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	4903      	ldr	r1, [pc, #12]	@ (80058b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058a2:	5ccb      	ldrb	r3, [r1, r3]
 80058a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	40023800 	.word	0x40023800
 80058b0:	080078bc 	.word	0x080078bc

080058b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80058b8:	f7ff ffdc 	bl	8005874 <HAL_RCC_GetHCLKFreq>
 80058bc:	4602      	mov	r2, r0
 80058be:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	0b5b      	lsrs	r3, r3, #13
 80058c4:	f003 0307 	and.w	r3, r3, #7
 80058c8:	4903      	ldr	r1, [pc, #12]	@ (80058d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058ca:	5ccb      	ldrb	r3, [r1, r3]
 80058cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	bd80      	pop	{r7, pc}
 80058d4:	40023800 	.word	0x40023800
 80058d8:	080078bc 	.word	0x080078bc

080058dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d101      	bne.n	80058ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058ea:	2301      	movs	r3, #1
 80058ec:	e07b      	b.n	80059e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d108      	bne.n	8005908 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058fe:	d009      	beq.n	8005914 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	61da      	str	r2, [r3, #28]
 8005906:	e005      	b.n	8005914 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7fb f9fe 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800594a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800595c:	431a      	orrs	r2, r3
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005966:	431a      	orrs	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	f003 0302 	and.w	r3, r3, #2
 8005970:	431a      	orrs	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	431a      	orrs	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005984:	431a      	orrs	r2, r3
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	69db      	ldr	r3, [r3, #28]
 800598a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800598e:	431a      	orrs	r2, r3
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a1b      	ldr	r3, [r3, #32]
 8005994:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005998:	ea42 0103 	orr.w	r1, r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	699b      	ldr	r3, [r3, #24]
 80059b0:	0c1b      	lsrs	r3, r3, #16
 80059b2:	f003 0104 	and.w	r1, r3, #4
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059ba:	f003 0210 	and.w	r2, r3, #16
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	430a      	orrs	r2, r1
 80059c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80059d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b082      	sub	sp, #8
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059fc:	2301      	movs	r3, #1
 80059fe:	e042      	b.n	8005a86 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d106      	bne.n	8005a1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fb f9d3 	bl	8000dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2224      	movs	r2, #36	@ 0x24
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	68da      	ldr	r2, [r3, #12]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 f82c 	bl	8005a90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	691a      	ldr	r2, [r3, #16]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005a46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	695a      	ldr	r2, [r3, #20]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2220      	movs	r2, #32
 8005a7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3708      	adds	r7, #8
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a94:	b0c0      	sub	sp, #256	@ 0x100
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aac:	68d9      	ldr	r1, [r3, #12]
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ab2:	681a      	ldr	r2, [r3, #0]
 8005ab4:	ea40 0301 	orr.w	r3, r0, r1
 8005ab8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005abe:	689a      	ldr	r2, [r3, #8]
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ae8:	f021 010c 	bic.w	r1, r1, #12
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005af6:	430b      	orrs	r3, r1
 8005af8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b0a:	6999      	ldr	r1, [r3, #24]
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	ea40 0301 	orr.w	r3, r0, r1
 8005b16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b1c:	681a      	ldr	r2, [r3, #0]
 8005b1e:	4b8f      	ldr	r3, [pc, #572]	@ (8005d5c <UART_SetConfig+0x2cc>)
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d005      	beq.n	8005b30 <UART_SetConfig+0xa0>
 8005b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d60 <UART_SetConfig+0x2d0>)
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d104      	bne.n	8005b3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b30:	f7ff fec0 	bl	80058b4 <HAL_RCC_GetPCLK2Freq>
 8005b34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b38:	e003      	b.n	8005b42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b3a:	f7ff fea7 	bl	800588c <HAL_RCC_GetPCLK1Freq>
 8005b3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b46:	69db      	ldr	r3, [r3, #28]
 8005b48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b4c:	f040 810c 	bne.w	8005d68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b62:	4622      	mov	r2, r4
 8005b64:	462b      	mov	r3, r5
 8005b66:	1891      	adds	r1, r2, r2
 8005b68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b6a:	415b      	adcs	r3, r3
 8005b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005b72:	4621      	mov	r1, r4
 8005b74:	eb12 0801 	adds.w	r8, r2, r1
 8005b78:	4629      	mov	r1, r5
 8005b7a:	eb43 0901 	adc.w	r9, r3, r1
 8005b7e:	f04f 0200 	mov.w	r2, #0
 8005b82:	f04f 0300 	mov.w	r3, #0
 8005b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b92:	4690      	mov	r8, r2
 8005b94:	4699      	mov	r9, r3
 8005b96:	4623      	mov	r3, r4
 8005b98:	eb18 0303 	adds.w	r3, r8, r3
 8005b9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ba0:	462b      	mov	r3, r5
 8005ba2:	eb49 0303 	adc.w	r3, r9, r3
 8005ba6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005bb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	18db      	adds	r3, r3, r3
 8005bc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	eb42 0303 	adc.w	r3, r2, r3
 8005bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bcc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005bd0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005bd4:	f7fa fb54 	bl	8000280 <__aeabi_uldivmod>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	460b      	mov	r3, r1
 8005bdc:	4b61      	ldr	r3, [pc, #388]	@ (8005d64 <UART_SetConfig+0x2d4>)
 8005bde:	fba3 2302 	umull	r2, r3, r3, r2
 8005be2:	095b      	lsrs	r3, r3, #5
 8005be4:	011c      	lsls	r4, r3, #4
 8005be6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bea:	2200      	movs	r2, #0
 8005bec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005bf0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005bf4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005bf8:	4642      	mov	r2, r8
 8005bfa:	464b      	mov	r3, r9
 8005bfc:	1891      	adds	r1, r2, r2
 8005bfe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c00:	415b      	adcs	r3, r3
 8005c02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c08:	4641      	mov	r1, r8
 8005c0a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c0e:	4649      	mov	r1, r9
 8005c10:	eb43 0b01 	adc.w	fp, r3, r1
 8005c14:	f04f 0200 	mov.w	r2, #0
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c28:	4692      	mov	sl, r2
 8005c2a:	469b      	mov	fp, r3
 8005c2c:	4643      	mov	r3, r8
 8005c2e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c36:	464b      	mov	r3, r9
 8005c38:	eb4b 0303 	adc.w	r3, fp, r3
 8005c3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c54:	460b      	mov	r3, r1
 8005c56:	18db      	adds	r3, r3, r3
 8005c58:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	eb42 0303 	adc.w	r3, r2, r3
 8005c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c6a:	f7fa fb09 	bl	8000280 <__aeabi_uldivmod>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	460b      	mov	r3, r1
 8005c72:	4611      	mov	r1, r2
 8005c74:	4b3b      	ldr	r3, [pc, #236]	@ (8005d64 <UART_SetConfig+0x2d4>)
 8005c76:	fba3 2301 	umull	r2, r3, r3, r1
 8005c7a:	095b      	lsrs	r3, r3, #5
 8005c7c:	2264      	movs	r2, #100	@ 0x64
 8005c7e:	fb02 f303 	mul.w	r3, r2, r3
 8005c82:	1acb      	subs	r3, r1, r3
 8005c84:	00db      	lsls	r3, r3, #3
 8005c86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005c8a:	4b36      	ldr	r3, [pc, #216]	@ (8005d64 <UART_SetConfig+0x2d4>)
 8005c8c:	fba3 2302 	umull	r2, r3, r3, r2
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	005b      	lsls	r3, r3, #1
 8005c94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005c98:	441c      	add	r4, r3
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ca4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ca8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	1851      	adds	r1, r2, r1
 8005cc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	414b      	adcs	r3, r1
 8005cc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005cd4:	4659      	mov	r1, fp
 8005cd6:	00cb      	lsls	r3, r1, #3
 8005cd8:	4651      	mov	r1, sl
 8005cda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005cde:	4651      	mov	r1, sl
 8005ce0:	00ca      	lsls	r2, r1, #3
 8005ce2:	4610      	mov	r0, r2
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	4642      	mov	r2, r8
 8005cea:	189b      	adds	r3, r3, r2
 8005cec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	460a      	mov	r2, r1
 8005cf4:	eb42 0303 	adc.w	r3, r2, r3
 8005cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d08:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d10:	460b      	mov	r3, r1
 8005d12:	18db      	adds	r3, r3, r3
 8005d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d16:	4613      	mov	r3, r2
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d26:	f7fa faab 	bl	8000280 <__aeabi_uldivmod>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d64 <UART_SetConfig+0x2d4>)
 8005d30:	fba3 1302 	umull	r1, r3, r3, r2
 8005d34:	095b      	lsrs	r3, r3, #5
 8005d36:	2164      	movs	r1, #100	@ 0x64
 8005d38:	fb01 f303 	mul.w	r3, r1, r3
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	00db      	lsls	r3, r3, #3
 8005d40:	3332      	adds	r3, #50	@ 0x32
 8005d42:	4a08      	ldr	r2, [pc, #32]	@ (8005d64 <UART_SetConfig+0x2d4>)
 8005d44:	fba2 2303 	umull	r2, r3, r2, r3
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	f003 0207 	and.w	r2, r3, #7
 8005d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4422      	add	r2, r4
 8005d56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d58:	e106      	b.n	8005f68 <UART_SetConfig+0x4d8>
 8005d5a:	bf00      	nop
 8005d5c:	40011000 	.word	0x40011000
 8005d60:	40011400 	.word	0x40011400
 8005d64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005d72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005d76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005d7a:	4642      	mov	r2, r8
 8005d7c:	464b      	mov	r3, r9
 8005d7e:	1891      	adds	r1, r2, r2
 8005d80:	6239      	str	r1, [r7, #32]
 8005d82:	415b      	adcs	r3, r3
 8005d84:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d8a:	4641      	mov	r1, r8
 8005d8c:	1854      	adds	r4, r2, r1
 8005d8e:	4649      	mov	r1, r9
 8005d90:	eb43 0501 	adc.w	r5, r3, r1
 8005d94:	f04f 0200 	mov.w	r2, #0
 8005d98:	f04f 0300 	mov.w	r3, #0
 8005d9c:	00eb      	lsls	r3, r5, #3
 8005d9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005da2:	00e2      	lsls	r2, r4, #3
 8005da4:	4614      	mov	r4, r2
 8005da6:	461d      	mov	r5, r3
 8005da8:	4643      	mov	r3, r8
 8005daa:	18e3      	adds	r3, r4, r3
 8005dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005db0:	464b      	mov	r3, r9
 8005db2:	eb45 0303 	adc.w	r3, r5, r3
 8005db6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005dc6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dca:	f04f 0200 	mov.w	r2, #0
 8005dce:	f04f 0300 	mov.w	r3, #0
 8005dd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005dd6:	4629      	mov	r1, r5
 8005dd8:	008b      	lsls	r3, r1, #2
 8005dda:	4621      	mov	r1, r4
 8005ddc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005de0:	4621      	mov	r1, r4
 8005de2:	008a      	lsls	r2, r1, #2
 8005de4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005de8:	f7fa fa4a 	bl	8000280 <__aeabi_uldivmod>
 8005dec:	4602      	mov	r2, r0
 8005dee:	460b      	mov	r3, r1
 8005df0:	4b60      	ldr	r3, [pc, #384]	@ (8005f74 <UART_SetConfig+0x4e4>)
 8005df2:	fba3 2302 	umull	r2, r3, r3, r2
 8005df6:	095b      	lsrs	r3, r3, #5
 8005df8:	011c      	lsls	r4, r3, #4
 8005dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e04:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e0c:	4642      	mov	r2, r8
 8005e0e:	464b      	mov	r3, r9
 8005e10:	1891      	adds	r1, r2, r2
 8005e12:	61b9      	str	r1, [r7, #24]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e1c:	4641      	mov	r1, r8
 8005e1e:	1851      	adds	r1, r2, r1
 8005e20:	6139      	str	r1, [r7, #16]
 8005e22:	4649      	mov	r1, r9
 8005e24:	414b      	adcs	r3, r1
 8005e26:	617b      	str	r3, [r7, #20]
 8005e28:	f04f 0200 	mov.w	r2, #0
 8005e2c:	f04f 0300 	mov.w	r3, #0
 8005e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e34:	4659      	mov	r1, fp
 8005e36:	00cb      	lsls	r3, r1, #3
 8005e38:	4651      	mov	r1, sl
 8005e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e3e:	4651      	mov	r1, sl
 8005e40:	00ca      	lsls	r2, r1, #3
 8005e42:	4610      	mov	r0, r2
 8005e44:	4619      	mov	r1, r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	4642      	mov	r2, r8
 8005e4a:	189b      	adds	r3, r3, r2
 8005e4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e50:	464b      	mov	r3, r9
 8005e52:	460a      	mov	r2, r1
 8005e54:	eb42 0303 	adc.w	r3, r2, r3
 8005e58:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e66:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005e74:	4649      	mov	r1, r9
 8005e76:	008b      	lsls	r3, r1, #2
 8005e78:	4641      	mov	r1, r8
 8005e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e7e:	4641      	mov	r1, r8
 8005e80:	008a      	lsls	r2, r1, #2
 8005e82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005e86:	f7fa f9fb 	bl	8000280 <__aeabi_uldivmod>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4b38      	ldr	r3, [pc, #224]	@ (8005f74 <UART_SetConfig+0x4e4>)
 8005e92:	fba3 2301 	umull	r2, r3, r3, r1
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	2264      	movs	r2, #100	@ 0x64
 8005e9a:	fb02 f303 	mul.w	r3, r2, r3
 8005e9e:	1acb      	subs	r3, r1, r3
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	3332      	adds	r3, #50	@ 0x32
 8005ea4:	4a33      	ldr	r2, [pc, #204]	@ (8005f74 <UART_SetConfig+0x4e4>)
 8005ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005eb0:	441c      	add	r4, r3
 8005eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005eba:	677a      	str	r2, [r7, #116]	@ 0x74
 8005ebc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	1891      	adds	r1, r2, r2
 8005ec6:	60b9      	str	r1, [r7, #8]
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	60fb      	str	r3, [r7, #12]
 8005ecc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	1851      	adds	r1, r2, r1
 8005ed4:	6039      	str	r1, [r7, #0]
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	414b      	adcs	r3, r1
 8005eda:	607b      	str	r3, [r7, #4]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ee8:	4659      	mov	r1, fp
 8005eea:	00cb      	lsls	r3, r1, #3
 8005eec:	4651      	mov	r1, sl
 8005eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	00ca      	lsls	r2, r1, #3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	4642      	mov	r2, r8
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f02:	464b      	mov	r3, r9
 8005f04:	460a      	mov	r2, r1
 8005f06:	eb42 0303 	adc.w	r3, r2, r3
 8005f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f16:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	f04f 0300 	mov.w	r3, #0
 8005f20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f24:	4649      	mov	r1, r9
 8005f26:	008b      	lsls	r3, r1, #2
 8005f28:	4641      	mov	r1, r8
 8005f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f2e:	4641      	mov	r1, r8
 8005f30:	008a      	lsls	r2, r1, #2
 8005f32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f36:	f7fa f9a3 	bl	8000280 <__aeabi_uldivmod>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f74 <UART_SetConfig+0x4e4>)
 8005f40:	fba3 1302 	umull	r1, r3, r3, r2
 8005f44:	095b      	lsrs	r3, r3, #5
 8005f46:	2164      	movs	r1, #100	@ 0x64
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	011b      	lsls	r3, r3, #4
 8005f50:	3332      	adds	r3, #50	@ 0x32
 8005f52:	4a08      	ldr	r2, [pc, #32]	@ (8005f74 <UART_SetConfig+0x4e4>)
 8005f54:	fba2 2303 	umull	r2, r3, r2, r3
 8005f58:	095b      	lsrs	r3, r3, #5
 8005f5a:	f003 020f 	and.w	r2, r3, #15
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4422      	add	r2, r4
 8005f66:	609a      	str	r2, [r3, #8]
}
 8005f68:	bf00      	nop
 8005f6a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f74:	51eb851f 	.word	0x51eb851f

08005f78 <rand>:
 8005f78:	4b16      	ldr	r3, [pc, #88]	@ (8005fd4 <rand+0x5c>)
 8005f7a:	b510      	push	{r4, lr}
 8005f7c:	681c      	ldr	r4, [r3, #0]
 8005f7e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005f80:	b9b3      	cbnz	r3, 8005fb0 <rand+0x38>
 8005f82:	2018      	movs	r0, #24
 8005f84:	f000 fc14 	bl	80067b0 <malloc>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	6320      	str	r0, [r4, #48]	@ 0x30
 8005f8c:	b920      	cbnz	r0, 8005f98 <rand+0x20>
 8005f8e:	4b12      	ldr	r3, [pc, #72]	@ (8005fd8 <rand+0x60>)
 8005f90:	4812      	ldr	r0, [pc, #72]	@ (8005fdc <rand+0x64>)
 8005f92:	2152      	movs	r1, #82	@ 0x52
 8005f94:	f000 fba4 	bl	80066e0 <__assert_func>
 8005f98:	4911      	ldr	r1, [pc, #68]	@ (8005fe0 <rand+0x68>)
 8005f9a:	4b12      	ldr	r3, [pc, #72]	@ (8005fe4 <rand+0x6c>)
 8005f9c:	e9c0 1300 	strd	r1, r3, [r0]
 8005fa0:	4b11      	ldr	r3, [pc, #68]	@ (8005fe8 <rand+0x70>)
 8005fa2:	6083      	str	r3, [r0, #8]
 8005fa4:	230b      	movs	r3, #11
 8005fa6:	8183      	strh	r3, [r0, #12]
 8005fa8:	2100      	movs	r1, #0
 8005faa:	2001      	movs	r0, #1
 8005fac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005fb0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005fb2:	480e      	ldr	r0, [pc, #56]	@ (8005fec <rand+0x74>)
 8005fb4:	690b      	ldr	r3, [r1, #16]
 8005fb6:	694c      	ldr	r4, [r1, #20]
 8005fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8005ff0 <rand+0x78>)
 8005fba:	4358      	muls	r0, r3
 8005fbc:	fb02 0004 	mla	r0, r2, r4, r0
 8005fc0:	fba3 3202 	umull	r3, r2, r3, r2
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	eb40 0002 	adc.w	r0, r0, r2
 8005fca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005fce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005fd2:	bd10      	pop	{r4, pc}
 8005fd4:	20000084 	.word	0x20000084
 8005fd8:	080078c4 	.word	0x080078c4
 8005fdc:	080078db 	.word	0x080078db
 8005fe0:	abcd330e 	.word	0xabcd330e
 8005fe4:	e66d1234 	.word	0xe66d1234
 8005fe8:	0005deec 	.word	0x0005deec
 8005fec:	5851f42d 	.word	0x5851f42d
 8005ff0:	4c957f2d 	.word	0x4c957f2d

08005ff4 <std>:
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	b510      	push	{r4, lr}
 8005ff8:	4604      	mov	r4, r0
 8005ffa:	e9c0 3300 	strd	r3, r3, [r0]
 8005ffe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006002:	6083      	str	r3, [r0, #8]
 8006004:	8181      	strh	r1, [r0, #12]
 8006006:	6643      	str	r3, [r0, #100]	@ 0x64
 8006008:	81c2      	strh	r2, [r0, #14]
 800600a:	6183      	str	r3, [r0, #24]
 800600c:	4619      	mov	r1, r3
 800600e:	2208      	movs	r2, #8
 8006010:	305c      	adds	r0, #92	@ 0x5c
 8006012:	f000 fae9 	bl	80065e8 <memset>
 8006016:	4b0d      	ldr	r3, [pc, #52]	@ (800604c <std+0x58>)
 8006018:	6263      	str	r3, [r4, #36]	@ 0x24
 800601a:	4b0d      	ldr	r3, [pc, #52]	@ (8006050 <std+0x5c>)
 800601c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <std+0x60>)
 8006020:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006022:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <std+0x64>)
 8006024:	6323      	str	r3, [r4, #48]	@ 0x30
 8006026:	4b0d      	ldr	r3, [pc, #52]	@ (800605c <std+0x68>)
 8006028:	6224      	str	r4, [r4, #32]
 800602a:	429c      	cmp	r4, r3
 800602c:	d006      	beq.n	800603c <std+0x48>
 800602e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006032:	4294      	cmp	r4, r2
 8006034:	d002      	beq.n	800603c <std+0x48>
 8006036:	33d0      	adds	r3, #208	@ 0xd0
 8006038:	429c      	cmp	r4, r3
 800603a:	d105      	bne.n	8006048 <std+0x54>
 800603c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006044:	f000 bb48 	b.w	80066d8 <__retarget_lock_init_recursive>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	bf00      	nop
 800604c:	08006439 	.word	0x08006439
 8006050:	0800645b 	.word	0x0800645b
 8006054:	08006493 	.word	0x08006493
 8006058:	080064b7 	.word	0x080064b7
 800605c:	200009f8 	.word	0x200009f8

08006060 <stdio_exit_handler>:
 8006060:	4a02      	ldr	r2, [pc, #8]	@ (800606c <stdio_exit_handler+0xc>)
 8006062:	4903      	ldr	r1, [pc, #12]	@ (8006070 <stdio_exit_handler+0x10>)
 8006064:	4803      	ldr	r0, [pc, #12]	@ (8006074 <stdio_exit_handler+0x14>)
 8006066:	f000 b869 	b.w	800613c <_fwalk_sglue>
 800606a:	bf00      	nop
 800606c:	20000078 	.word	0x20000078
 8006070:	08007275 	.word	0x08007275
 8006074:	20000088 	.word	0x20000088

08006078 <cleanup_stdio>:
 8006078:	6841      	ldr	r1, [r0, #4]
 800607a:	4b0c      	ldr	r3, [pc, #48]	@ (80060ac <cleanup_stdio+0x34>)
 800607c:	4299      	cmp	r1, r3
 800607e:	b510      	push	{r4, lr}
 8006080:	4604      	mov	r4, r0
 8006082:	d001      	beq.n	8006088 <cleanup_stdio+0x10>
 8006084:	f001 f8f6 	bl	8007274 <_fflush_r>
 8006088:	68a1      	ldr	r1, [r4, #8]
 800608a:	4b09      	ldr	r3, [pc, #36]	@ (80060b0 <cleanup_stdio+0x38>)
 800608c:	4299      	cmp	r1, r3
 800608e:	d002      	beq.n	8006096 <cleanup_stdio+0x1e>
 8006090:	4620      	mov	r0, r4
 8006092:	f001 f8ef 	bl	8007274 <_fflush_r>
 8006096:	68e1      	ldr	r1, [r4, #12]
 8006098:	4b06      	ldr	r3, [pc, #24]	@ (80060b4 <cleanup_stdio+0x3c>)
 800609a:	4299      	cmp	r1, r3
 800609c:	d004      	beq.n	80060a8 <cleanup_stdio+0x30>
 800609e:	4620      	mov	r0, r4
 80060a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060a4:	f001 b8e6 	b.w	8007274 <_fflush_r>
 80060a8:	bd10      	pop	{r4, pc}
 80060aa:	bf00      	nop
 80060ac:	200009f8 	.word	0x200009f8
 80060b0:	20000a60 	.word	0x20000a60
 80060b4:	20000ac8 	.word	0x20000ac8

080060b8 <global_stdio_init.part.0>:
 80060b8:	b510      	push	{r4, lr}
 80060ba:	4b0b      	ldr	r3, [pc, #44]	@ (80060e8 <global_stdio_init.part.0+0x30>)
 80060bc:	4c0b      	ldr	r4, [pc, #44]	@ (80060ec <global_stdio_init.part.0+0x34>)
 80060be:	4a0c      	ldr	r2, [pc, #48]	@ (80060f0 <global_stdio_init.part.0+0x38>)
 80060c0:	601a      	str	r2, [r3, #0]
 80060c2:	4620      	mov	r0, r4
 80060c4:	2200      	movs	r2, #0
 80060c6:	2104      	movs	r1, #4
 80060c8:	f7ff ff94 	bl	8005ff4 <std>
 80060cc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80060d0:	2201      	movs	r2, #1
 80060d2:	2109      	movs	r1, #9
 80060d4:	f7ff ff8e 	bl	8005ff4 <std>
 80060d8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80060dc:	2202      	movs	r2, #2
 80060de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e2:	2112      	movs	r1, #18
 80060e4:	f7ff bf86 	b.w	8005ff4 <std>
 80060e8:	20000b30 	.word	0x20000b30
 80060ec:	200009f8 	.word	0x200009f8
 80060f0:	08006061 	.word	0x08006061

080060f4 <__sfp_lock_acquire>:
 80060f4:	4801      	ldr	r0, [pc, #4]	@ (80060fc <__sfp_lock_acquire+0x8>)
 80060f6:	f000 baf0 	b.w	80066da <__retarget_lock_acquire_recursive>
 80060fa:	bf00      	nop
 80060fc:	20000b39 	.word	0x20000b39

08006100 <__sfp_lock_release>:
 8006100:	4801      	ldr	r0, [pc, #4]	@ (8006108 <__sfp_lock_release+0x8>)
 8006102:	f000 baeb 	b.w	80066dc <__retarget_lock_release_recursive>
 8006106:	bf00      	nop
 8006108:	20000b39 	.word	0x20000b39

0800610c <__sinit>:
 800610c:	b510      	push	{r4, lr}
 800610e:	4604      	mov	r4, r0
 8006110:	f7ff fff0 	bl	80060f4 <__sfp_lock_acquire>
 8006114:	6a23      	ldr	r3, [r4, #32]
 8006116:	b11b      	cbz	r3, 8006120 <__sinit+0x14>
 8006118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800611c:	f7ff bff0 	b.w	8006100 <__sfp_lock_release>
 8006120:	4b04      	ldr	r3, [pc, #16]	@ (8006134 <__sinit+0x28>)
 8006122:	6223      	str	r3, [r4, #32]
 8006124:	4b04      	ldr	r3, [pc, #16]	@ (8006138 <__sinit+0x2c>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f5      	bne.n	8006118 <__sinit+0xc>
 800612c:	f7ff ffc4 	bl	80060b8 <global_stdio_init.part.0>
 8006130:	e7f2      	b.n	8006118 <__sinit+0xc>
 8006132:	bf00      	nop
 8006134:	08006079 	.word	0x08006079
 8006138:	20000b30 	.word	0x20000b30

0800613c <_fwalk_sglue>:
 800613c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006140:	4607      	mov	r7, r0
 8006142:	4688      	mov	r8, r1
 8006144:	4614      	mov	r4, r2
 8006146:	2600      	movs	r6, #0
 8006148:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800614c:	f1b9 0901 	subs.w	r9, r9, #1
 8006150:	d505      	bpl.n	800615e <_fwalk_sglue+0x22>
 8006152:	6824      	ldr	r4, [r4, #0]
 8006154:	2c00      	cmp	r4, #0
 8006156:	d1f7      	bne.n	8006148 <_fwalk_sglue+0xc>
 8006158:	4630      	mov	r0, r6
 800615a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800615e:	89ab      	ldrh	r3, [r5, #12]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d907      	bls.n	8006174 <_fwalk_sglue+0x38>
 8006164:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006168:	3301      	adds	r3, #1
 800616a:	d003      	beq.n	8006174 <_fwalk_sglue+0x38>
 800616c:	4629      	mov	r1, r5
 800616e:	4638      	mov	r0, r7
 8006170:	47c0      	blx	r8
 8006172:	4306      	orrs	r6, r0
 8006174:	3568      	adds	r5, #104	@ 0x68
 8006176:	e7e9      	b.n	800614c <_fwalk_sglue+0x10>

08006178 <iprintf>:
 8006178:	b40f      	push	{r0, r1, r2, r3}
 800617a:	b507      	push	{r0, r1, r2, lr}
 800617c:	4906      	ldr	r1, [pc, #24]	@ (8006198 <iprintf+0x20>)
 800617e:	ab04      	add	r3, sp, #16
 8006180:	6808      	ldr	r0, [r1, #0]
 8006182:	f853 2b04 	ldr.w	r2, [r3], #4
 8006186:	6881      	ldr	r1, [r0, #8]
 8006188:	9301      	str	r3, [sp, #4]
 800618a:	f000 fd49 	bl	8006c20 <_vfiprintf_r>
 800618e:	b003      	add	sp, #12
 8006190:	f85d eb04 	ldr.w	lr, [sp], #4
 8006194:	b004      	add	sp, #16
 8006196:	4770      	bx	lr
 8006198:	20000084 	.word	0x20000084

0800619c <_puts_r>:
 800619c:	6a03      	ldr	r3, [r0, #32]
 800619e:	b570      	push	{r4, r5, r6, lr}
 80061a0:	6884      	ldr	r4, [r0, #8]
 80061a2:	4605      	mov	r5, r0
 80061a4:	460e      	mov	r6, r1
 80061a6:	b90b      	cbnz	r3, 80061ac <_puts_r+0x10>
 80061a8:	f7ff ffb0 	bl	800610c <__sinit>
 80061ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061ae:	07db      	lsls	r3, r3, #31
 80061b0:	d405      	bmi.n	80061be <_puts_r+0x22>
 80061b2:	89a3      	ldrh	r3, [r4, #12]
 80061b4:	0598      	lsls	r0, r3, #22
 80061b6:	d402      	bmi.n	80061be <_puts_r+0x22>
 80061b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061ba:	f000 fa8e 	bl	80066da <__retarget_lock_acquire_recursive>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	0719      	lsls	r1, r3, #28
 80061c2:	d502      	bpl.n	80061ca <_puts_r+0x2e>
 80061c4:	6923      	ldr	r3, [r4, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d135      	bne.n	8006236 <_puts_r+0x9a>
 80061ca:	4621      	mov	r1, r4
 80061cc:	4628      	mov	r0, r5
 80061ce:	f000 f9b5 	bl	800653c <__swsetup_r>
 80061d2:	b380      	cbz	r0, 8006236 <_puts_r+0x9a>
 80061d4:	f04f 35ff 	mov.w	r5, #4294967295
 80061d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061da:	07da      	lsls	r2, r3, #31
 80061dc:	d405      	bmi.n	80061ea <_puts_r+0x4e>
 80061de:	89a3      	ldrh	r3, [r4, #12]
 80061e0:	059b      	lsls	r3, r3, #22
 80061e2:	d402      	bmi.n	80061ea <_puts_r+0x4e>
 80061e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061e6:	f000 fa79 	bl	80066dc <__retarget_lock_release_recursive>
 80061ea:	4628      	mov	r0, r5
 80061ec:	bd70      	pop	{r4, r5, r6, pc}
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	da04      	bge.n	80061fc <_puts_r+0x60>
 80061f2:	69a2      	ldr	r2, [r4, #24]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	dc17      	bgt.n	8006228 <_puts_r+0x8c>
 80061f8:	290a      	cmp	r1, #10
 80061fa:	d015      	beq.n	8006228 <_puts_r+0x8c>
 80061fc:	6823      	ldr	r3, [r4, #0]
 80061fe:	1c5a      	adds	r2, r3, #1
 8006200:	6022      	str	r2, [r4, #0]
 8006202:	7019      	strb	r1, [r3, #0]
 8006204:	68a3      	ldr	r3, [r4, #8]
 8006206:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800620a:	3b01      	subs	r3, #1
 800620c:	60a3      	str	r3, [r4, #8]
 800620e:	2900      	cmp	r1, #0
 8006210:	d1ed      	bne.n	80061ee <_puts_r+0x52>
 8006212:	2b00      	cmp	r3, #0
 8006214:	da11      	bge.n	800623a <_puts_r+0x9e>
 8006216:	4622      	mov	r2, r4
 8006218:	210a      	movs	r1, #10
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f94f 	bl	80064be <__swbuf_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d0d7      	beq.n	80061d4 <_puts_r+0x38>
 8006224:	250a      	movs	r5, #10
 8006226:	e7d7      	b.n	80061d8 <_puts_r+0x3c>
 8006228:	4622      	mov	r2, r4
 800622a:	4628      	mov	r0, r5
 800622c:	f000 f947 	bl	80064be <__swbuf_r>
 8006230:	3001      	adds	r0, #1
 8006232:	d1e7      	bne.n	8006204 <_puts_r+0x68>
 8006234:	e7ce      	b.n	80061d4 <_puts_r+0x38>
 8006236:	3e01      	subs	r6, #1
 8006238:	e7e4      	b.n	8006204 <_puts_r+0x68>
 800623a:	6823      	ldr	r3, [r4, #0]
 800623c:	1c5a      	adds	r2, r3, #1
 800623e:	6022      	str	r2, [r4, #0]
 8006240:	220a      	movs	r2, #10
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e7ee      	b.n	8006224 <_puts_r+0x88>
	...

08006248 <puts>:
 8006248:	4b02      	ldr	r3, [pc, #8]	@ (8006254 <puts+0xc>)
 800624a:	4601      	mov	r1, r0
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	f7ff bfa5 	b.w	800619c <_puts_r>
 8006252:	bf00      	nop
 8006254:	20000084 	.word	0x20000084

08006258 <setbuf>:
 8006258:	fab1 f281 	clz	r2, r1
 800625c:	0952      	lsrs	r2, r2, #5
 800625e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006262:	0052      	lsls	r2, r2, #1
 8006264:	f000 b800 	b.w	8006268 <setvbuf>

08006268 <setvbuf>:
 8006268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800626c:	461d      	mov	r5, r3
 800626e:	4b57      	ldr	r3, [pc, #348]	@ (80063cc <setvbuf+0x164>)
 8006270:	681f      	ldr	r7, [r3, #0]
 8006272:	4604      	mov	r4, r0
 8006274:	460e      	mov	r6, r1
 8006276:	4690      	mov	r8, r2
 8006278:	b127      	cbz	r7, 8006284 <setvbuf+0x1c>
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	b913      	cbnz	r3, 8006284 <setvbuf+0x1c>
 800627e:	4638      	mov	r0, r7
 8006280:	f7ff ff44 	bl	800610c <__sinit>
 8006284:	f1b8 0f02 	cmp.w	r8, #2
 8006288:	d006      	beq.n	8006298 <setvbuf+0x30>
 800628a:	f1b8 0f01 	cmp.w	r8, #1
 800628e:	f200 809a 	bhi.w	80063c6 <setvbuf+0x15e>
 8006292:	2d00      	cmp	r5, #0
 8006294:	f2c0 8097 	blt.w	80063c6 <setvbuf+0x15e>
 8006298:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800629a:	07d9      	lsls	r1, r3, #31
 800629c:	d405      	bmi.n	80062aa <setvbuf+0x42>
 800629e:	89a3      	ldrh	r3, [r4, #12]
 80062a0:	059a      	lsls	r2, r3, #22
 80062a2:	d402      	bmi.n	80062aa <setvbuf+0x42>
 80062a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062a6:	f000 fa18 	bl	80066da <__retarget_lock_acquire_recursive>
 80062aa:	4621      	mov	r1, r4
 80062ac:	4638      	mov	r0, r7
 80062ae:	f000 ffe1 	bl	8007274 <_fflush_r>
 80062b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062b4:	b141      	cbz	r1, 80062c8 <setvbuf+0x60>
 80062b6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ba:	4299      	cmp	r1, r3
 80062bc:	d002      	beq.n	80062c4 <setvbuf+0x5c>
 80062be:	4638      	mov	r0, r7
 80062c0:	f000 fa2c 	bl	800671c <_free_r>
 80062c4:	2300      	movs	r3, #0
 80062c6:	6363      	str	r3, [r4, #52]	@ 0x34
 80062c8:	2300      	movs	r3, #0
 80062ca:	61a3      	str	r3, [r4, #24]
 80062cc:	6063      	str	r3, [r4, #4]
 80062ce:	89a3      	ldrh	r3, [r4, #12]
 80062d0:	061b      	lsls	r3, r3, #24
 80062d2:	d503      	bpl.n	80062dc <setvbuf+0x74>
 80062d4:	6921      	ldr	r1, [r4, #16]
 80062d6:	4638      	mov	r0, r7
 80062d8:	f000 fa20 	bl	800671c <_free_r>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	f1b8 0f02 	cmp.w	r8, #2
 80062ea:	81a3      	strh	r3, [r4, #12]
 80062ec:	d061      	beq.n	80063b2 <setvbuf+0x14a>
 80062ee:	ab01      	add	r3, sp, #4
 80062f0:	466a      	mov	r2, sp
 80062f2:	4621      	mov	r1, r4
 80062f4:	4638      	mov	r0, r7
 80062f6:	f000 fff7 	bl	80072e8 <__swhatbuf_r>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	4318      	orrs	r0, r3
 80062fe:	81a0      	strh	r0, [r4, #12]
 8006300:	bb2d      	cbnz	r5, 800634e <setvbuf+0xe6>
 8006302:	9d00      	ldr	r5, [sp, #0]
 8006304:	4628      	mov	r0, r5
 8006306:	f000 fa53 	bl	80067b0 <malloc>
 800630a:	4606      	mov	r6, r0
 800630c:	2800      	cmp	r0, #0
 800630e:	d152      	bne.n	80063b6 <setvbuf+0x14e>
 8006310:	f8dd 9000 	ldr.w	r9, [sp]
 8006314:	45a9      	cmp	r9, r5
 8006316:	d140      	bne.n	800639a <setvbuf+0x132>
 8006318:	f04f 35ff 	mov.w	r5, #4294967295
 800631c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006320:	f043 0202 	orr.w	r2, r3, #2
 8006324:	81a2      	strh	r2, [r4, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	60a2      	str	r2, [r4, #8]
 800632a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800632e:	6022      	str	r2, [r4, #0]
 8006330:	6122      	str	r2, [r4, #16]
 8006332:	2201      	movs	r2, #1
 8006334:	6162      	str	r2, [r4, #20]
 8006336:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006338:	07d6      	lsls	r6, r2, #31
 800633a:	d404      	bmi.n	8006346 <setvbuf+0xde>
 800633c:	0598      	lsls	r0, r3, #22
 800633e:	d402      	bmi.n	8006346 <setvbuf+0xde>
 8006340:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006342:	f000 f9cb 	bl	80066dc <__retarget_lock_release_recursive>
 8006346:	4628      	mov	r0, r5
 8006348:	b003      	add	sp, #12
 800634a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800634e:	2e00      	cmp	r6, #0
 8006350:	d0d8      	beq.n	8006304 <setvbuf+0x9c>
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	b913      	cbnz	r3, 800635c <setvbuf+0xf4>
 8006356:	4638      	mov	r0, r7
 8006358:	f7ff fed8 	bl	800610c <__sinit>
 800635c:	f1b8 0f01 	cmp.w	r8, #1
 8006360:	bf08      	it	eq
 8006362:	89a3      	ldrheq	r3, [r4, #12]
 8006364:	6026      	str	r6, [r4, #0]
 8006366:	bf04      	itt	eq
 8006368:	f043 0301 	orreq.w	r3, r3, #1
 800636c:	81a3      	strheq	r3, [r4, #12]
 800636e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006372:	f013 0208 	ands.w	r2, r3, #8
 8006376:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800637a:	d01e      	beq.n	80063ba <setvbuf+0x152>
 800637c:	07d9      	lsls	r1, r3, #31
 800637e:	bf41      	itttt	mi
 8006380:	2200      	movmi	r2, #0
 8006382:	426d      	negmi	r5, r5
 8006384:	60a2      	strmi	r2, [r4, #8]
 8006386:	61a5      	strmi	r5, [r4, #24]
 8006388:	bf58      	it	pl
 800638a:	60a5      	strpl	r5, [r4, #8]
 800638c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800638e:	07d2      	lsls	r2, r2, #31
 8006390:	d401      	bmi.n	8006396 <setvbuf+0x12e>
 8006392:	059b      	lsls	r3, r3, #22
 8006394:	d513      	bpl.n	80063be <setvbuf+0x156>
 8006396:	2500      	movs	r5, #0
 8006398:	e7d5      	b.n	8006346 <setvbuf+0xde>
 800639a:	4648      	mov	r0, r9
 800639c:	f000 fa08 	bl	80067b0 <malloc>
 80063a0:	4606      	mov	r6, r0
 80063a2:	2800      	cmp	r0, #0
 80063a4:	d0b8      	beq.n	8006318 <setvbuf+0xb0>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	464d      	mov	r5, r9
 80063b0:	e7cf      	b.n	8006352 <setvbuf+0xea>
 80063b2:	2500      	movs	r5, #0
 80063b4:	e7b2      	b.n	800631c <setvbuf+0xb4>
 80063b6:	46a9      	mov	r9, r5
 80063b8:	e7f5      	b.n	80063a6 <setvbuf+0x13e>
 80063ba:	60a2      	str	r2, [r4, #8]
 80063bc:	e7e6      	b.n	800638c <setvbuf+0x124>
 80063be:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80063c0:	f000 f98c 	bl	80066dc <__retarget_lock_release_recursive>
 80063c4:	e7e7      	b.n	8006396 <setvbuf+0x12e>
 80063c6:	f04f 35ff 	mov.w	r5, #4294967295
 80063ca:	e7bc      	b.n	8006346 <setvbuf+0xde>
 80063cc:	20000084 	.word	0x20000084

080063d0 <sniprintf>:
 80063d0:	b40c      	push	{r2, r3}
 80063d2:	b530      	push	{r4, r5, lr}
 80063d4:	4b17      	ldr	r3, [pc, #92]	@ (8006434 <sniprintf+0x64>)
 80063d6:	1e0c      	subs	r4, r1, #0
 80063d8:	681d      	ldr	r5, [r3, #0]
 80063da:	b09d      	sub	sp, #116	@ 0x74
 80063dc:	da08      	bge.n	80063f0 <sniprintf+0x20>
 80063de:	238b      	movs	r3, #139	@ 0x8b
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	f04f 30ff 	mov.w	r0, #4294967295
 80063e6:	b01d      	add	sp, #116	@ 0x74
 80063e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063ec:	b002      	add	sp, #8
 80063ee:	4770      	bx	lr
 80063f0:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80063f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80063f8:	bf14      	ite	ne
 80063fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 80063fe:	4623      	moveq	r3, r4
 8006400:	9304      	str	r3, [sp, #16]
 8006402:	9307      	str	r3, [sp, #28]
 8006404:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006408:	9002      	str	r0, [sp, #8]
 800640a:	9006      	str	r0, [sp, #24]
 800640c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006410:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006412:	ab21      	add	r3, sp, #132	@ 0x84
 8006414:	a902      	add	r1, sp, #8
 8006416:	4628      	mov	r0, r5
 8006418:	9301      	str	r3, [sp, #4]
 800641a:	f000 fadb 	bl	80069d4 <_svfiprintf_r>
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	bfbc      	itt	lt
 8006422:	238b      	movlt	r3, #139	@ 0x8b
 8006424:	602b      	strlt	r3, [r5, #0]
 8006426:	2c00      	cmp	r4, #0
 8006428:	d0dd      	beq.n	80063e6 <sniprintf+0x16>
 800642a:	9b02      	ldr	r3, [sp, #8]
 800642c:	2200      	movs	r2, #0
 800642e:	701a      	strb	r2, [r3, #0]
 8006430:	e7d9      	b.n	80063e6 <sniprintf+0x16>
 8006432:	bf00      	nop
 8006434:	20000084 	.word	0x20000084

08006438 <__sread>:
 8006438:	b510      	push	{r4, lr}
 800643a:	460c      	mov	r4, r1
 800643c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006440:	f000 f8fc 	bl	800663c <_read_r>
 8006444:	2800      	cmp	r0, #0
 8006446:	bfab      	itete	ge
 8006448:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800644a:	89a3      	ldrhlt	r3, [r4, #12]
 800644c:	181b      	addge	r3, r3, r0
 800644e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006452:	bfac      	ite	ge
 8006454:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006456:	81a3      	strhlt	r3, [r4, #12]
 8006458:	bd10      	pop	{r4, pc}

0800645a <__swrite>:
 800645a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800645e:	461f      	mov	r7, r3
 8006460:	898b      	ldrh	r3, [r1, #12]
 8006462:	05db      	lsls	r3, r3, #23
 8006464:	4605      	mov	r5, r0
 8006466:	460c      	mov	r4, r1
 8006468:	4616      	mov	r6, r2
 800646a:	d505      	bpl.n	8006478 <__swrite+0x1e>
 800646c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006470:	2302      	movs	r3, #2
 8006472:	2200      	movs	r2, #0
 8006474:	f000 f8d0 	bl	8006618 <_lseek_r>
 8006478:	89a3      	ldrh	r3, [r4, #12]
 800647a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800647e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006482:	81a3      	strh	r3, [r4, #12]
 8006484:	4632      	mov	r2, r6
 8006486:	463b      	mov	r3, r7
 8006488:	4628      	mov	r0, r5
 800648a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800648e:	f000 b8e7 	b.w	8006660 <_write_r>

08006492 <__sseek>:
 8006492:	b510      	push	{r4, lr}
 8006494:	460c      	mov	r4, r1
 8006496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800649a:	f000 f8bd 	bl	8006618 <_lseek_r>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	89a3      	ldrh	r3, [r4, #12]
 80064a2:	bf15      	itete	ne
 80064a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80064a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80064aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80064ae:	81a3      	strheq	r3, [r4, #12]
 80064b0:	bf18      	it	ne
 80064b2:	81a3      	strhne	r3, [r4, #12]
 80064b4:	bd10      	pop	{r4, pc}

080064b6 <__sclose>:
 80064b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ba:	f000 b89d 	b.w	80065f8 <_close_r>

080064be <__swbuf_r>:
 80064be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c0:	460e      	mov	r6, r1
 80064c2:	4614      	mov	r4, r2
 80064c4:	4605      	mov	r5, r0
 80064c6:	b118      	cbz	r0, 80064d0 <__swbuf_r+0x12>
 80064c8:	6a03      	ldr	r3, [r0, #32]
 80064ca:	b90b      	cbnz	r3, 80064d0 <__swbuf_r+0x12>
 80064cc:	f7ff fe1e 	bl	800610c <__sinit>
 80064d0:	69a3      	ldr	r3, [r4, #24]
 80064d2:	60a3      	str	r3, [r4, #8]
 80064d4:	89a3      	ldrh	r3, [r4, #12]
 80064d6:	071a      	lsls	r2, r3, #28
 80064d8:	d501      	bpl.n	80064de <__swbuf_r+0x20>
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	b943      	cbnz	r3, 80064f0 <__swbuf_r+0x32>
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 f82b 	bl	800653c <__swsetup_r>
 80064e6:	b118      	cbz	r0, 80064f0 <__swbuf_r+0x32>
 80064e8:	f04f 37ff 	mov.w	r7, #4294967295
 80064ec:	4638      	mov	r0, r7
 80064ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064f0:	6823      	ldr	r3, [r4, #0]
 80064f2:	6922      	ldr	r2, [r4, #16]
 80064f4:	1a98      	subs	r0, r3, r2
 80064f6:	6963      	ldr	r3, [r4, #20]
 80064f8:	b2f6      	uxtb	r6, r6
 80064fa:	4283      	cmp	r3, r0
 80064fc:	4637      	mov	r7, r6
 80064fe:	dc05      	bgt.n	800650c <__swbuf_r+0x4e>
 8006500:	4621      	mov	r1, r4
 8006502:	4628      	mov	r0, r5
 8006504:	f000 feb6 	bl	8007274 <_fflush_r>
 8006508:	2800      	cmp	r0, #0
 800650a:	d1ed      	bne.n	80064e8 <__swbuf_r+0x2a>
 800650c:	68a3      	ldr	r3, [r4, #8]
 800650e:	3b01      	subs	r3, #1
 8006510:	60a3      	str	r3, [r4, #8]
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	1c5a      	adds	r2, r3, #1
 8006516:	6022      	str	r2, [r4, #0]
 8006518:	701e      	strb	r6, [r3, #0]
 800651a:	6962      	ldr	r2, [r4, #20]
 800651c:	1c43      	adds	r3, r0, #1
 800651e:	429a      	cmp	r2, r3
 8006520:	d004      	beq.n	800652c <__swbuf_r+0x6e>
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	07db      	lsls	r3, r3, #31
 8006526:	d5e1      	bpl.n	80064ec <__swbuf_r+0x2e>
 8006528:	2e0a      	cmp	r6, #10
 800652a:	d1df      	bne.n	80064ec <__swbuf_r+0x2e>
 800652c:	4621      	mov	r1, r4
 800652e:	4628      	mov	r0, r5
 8006530:	f000 fea0 	bl	8007274 <_fflush_r>
 8006534:	2800      	cmp	r0, #0
 8006536:	d0d9      	beq.n	80064ec <__swbuf_r+0x2e>
 8006538:	e7d6      	b.n	80064e8 <__swbuf_r+0x2a>
	...

0800653c <__swsetup_r>:
 800653c:	b538      	push	{r3, r4, r5, lr}
 800653e:	4b29      	ldr	r3, [pc, #164]	@ (80065e4 <__swsetup_r+0xa8>)
 8006540:	4605      	mov	r5, r0
 8006542:	6818      	ldr	r0, [r3, #0]
 8006544:	460c      	mov	r4, r1
 8006546:	b118      	cbz	r0, 8006550 <__swsetup_r+0x14>
 8006548:	6a03      	ldr	r3, [r0, #32]
 800654a:	b90b      	cbnz	r3, 8006550 <__swsetup_r+0x14>
 800654c:	f7ff fdde 	bl	800610c <__sinit>
 8006550:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006554:	0719      	lsls	r1, r3, #28
 8006556:	d422      	bmi.n	800659e <__swsetup_r+0x62>
 8006558:	06da      	lsls	r2, r3, #27
 800655a:	d407      	bmi.n	800656c <__swsetup_r+0x30>
 800655c:	2209      	movs	r2, #9
 800655e:	602a      	str	r2, [r5, #0]
 8006560:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006564:	81a3      	strh	r3, [r4, #12]
 8006566:	f04f 30ff 	mov.w	r0, #4294967295
 800656a:	e033      	b.n	80065d4 <__swsetup_r+0x98>
 800656c:	0758      	lsls	r0, r3, #29
 800656e:	d512      	bpl.n	8006596 <__swsetup_r+0x5a>
 8006570:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006572:	b141      	cbz	r1, 8006586 <__swsetup_r+0x4a>
 8006574:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006578:	4299      	cmp	r1, r3
 800657a:	d002      	beq.n	8006582 <__swsetup_r+0x46>
 800657c:	4628      	mov	r0, r5
 800657e:	f000 f8cd 	bl	800671c <_free_r>
 8006582:	2300      	movs	r3, #0
 8006584:	6363      	str	r3, [r4, #52]	@ 0x34
 8006586:	89a3      	ldrh	r3, [r4, #12]
 8006588:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800658c:	81a3      	strh	r3, [r4, #12]
 800658e:	2300      	movs	r3, #0
 8006590:	6063      	str	r3, [r4, #4]
 8006592:	6923      	ldr	r3, [r4, #16]
 8006594:	6023      	str	r3, [r4, #0]
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	f043 0308 	orr.w	r3, r3, #8
 800659c:	81a3      	strh	r3, [r4, #12]
 800659e:	6923      	ldr	r3, [r4, #16]
 80065a0:	b94b      	cbnz	r3, 80065b6 <__swsetup_r+0x7a>
 80065a2:	89a3      	ldrh	r3, [r4, #12]
 80065a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80065a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80065ac:	d003      	beq.n	80065b6 <__swsetup_r+0x7a>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4628      	mov	r0, r5
 80065b2:	f000 febf 	bl	8007334 <__smakebuf_r>
 80065b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065ba:	f013 0201 	ands.w	r2, r3, #1
 80065be:	d00a      	beq.n	80065d6 <__swsetup_r+0x9a>
 80065c0:	2200      	movs	r2, #0
 80065c2:	60a2      	str	r2, [r4, #8]
 80065c4:	6962      	ldr	r2, [r4, #20]
 80065c6:	4252      	negs	r2, r2
 80065c8:	61a2      	str	r2, [r4, #24]
 80065ca:	6922      	ldr	r2, [r4, #16]
 80065cc:	b942      	cbnz	r2, 80065e0 <__swsetup_r+0xa4>
 80065ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80065d2:	d1c5      	bne.n	8006560 <__swsetup_r+0x24>
 80065d4:	bd38      	pop	{r3, r4, r5, pc}
 80065d6:	0799      	lsls	r1, r3, #30
 80065d8:	bf58      	it	pl
 80065da:	6962      	ldrpl	r2, [r4, #20]
 80065dc:	60a2      	str	r2, [r4, #8]
 80065de:	e7f4      	b.n	80065ca <__swsetup_r+0x8e>
 80065e0:	2000      	movs	r0, #0
 80065e2:	e7f7      	b.n	80065d4 <__swsetup_r+0x98>
 80065e4:	20000084 	.word	0x20000084

080065e8 <memset>:
 80065e8:	4402      	add	r2, r0
 80065ea:	4603      	mov	r3, r0
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d100      	bne.n	80065f2 <memset+0xa>
 80065f0:	4770      	bx	lr
 80065f2:	f803 1b01 	strb.w	r1, [r3], #1
 80065f6:	e7f9      	b.n	80065ec <memset+0x4>

080065f8 <_close_r>:
 80065f8:	b538      	push	{r3, r4, r5, lr}
 80065fa:	4d06      	ldr	r5, [pc, #24]	@ (8006614 <_close_r+0x1c>)
 80065fc:	2300      	movs	r3, #0
 80065fe:	4604      	mov	r4, r0
 8006600:	4608      	mov	r0, r1
 8006602:	602b      	str	r3, [r5, #0]
 8006604:	f7fa fcaf 	bl	8000f66 <_close>
 8006608:	1c43      	adds	r3, r0, #1
 800660a:	d102      	bne.n	8006612 <_close_r+0x1a>
 800660c:	682b      	ldr	r3, [r5, #0]
 800660e:	b103      	cbz	r3, 8006612 <_close_r+0x1a>
 8006610:	6023      	str	r3, [r4, #0]
 8006612:	bd38      	pop	{r3, r4, r5, pc}
 8006614:	20000b34 	.word	0x20000b34

08006618 <_lseek_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4d07      	ldr	r5, [pc, #28]	@ (8006638 <_lseek_r+0x20>)
 800661c:	4604      	mov	r4, r0
 800661e:	4608      	mov	r0, r1
 8006620:	4611      	mov	r1, r2
 8006622:	2200      	movs	r2, #0
 8006624:	602a      	str	r2, [r5, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	f7fa fcc4 	bl	8000fb4 <_lseek>
 800662c:	1c43      	adds	r3, r0, #1
 800662e:	d102      	bne.n	8006636 <_lseek_r+0x1e>
 8006630:	682b      	ldr	r3, [r5, #0]
 8006632:	b103      	cbz	r3, 8006636 <_lseek_r+0x1e>
 8006634:	6023      	str	r3, [r4, #0]
 8006636:	bd38      	pop	{r3, r4, r5, pc}
 8006638:	20000b34 	.word	0x20000b34

0800663c <_read_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	4d07      	ldr	r5, [pc, #28]	@ (800665c <_read_r+0x20>)
 8006640:	4604      	mov	r4, r0
 8006642:	4608      	mov	r0, r1
 8006644:	4611      	mov	r1, r2
 8006646:	2200      	movs	r2, #0
 8006648:	602a      	str	r2, [r5, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	f7fa fc52 	bl	8000ef4 <_read>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d102      	bne.n	800665a <_read_r+0x1e>
 8006654:	682b      	ldr	r3, [r5, #0]
 8006656:	b103      	cbz	r3, 800665a <_read_r+0x1e>
 8006658:	6023      	str	r3, [r4, #0]
 800665a:	bd38      	pop	{r3, r4, r5, pc}
 800665c:	20000b34 	.word	0x20000b34

08006660 <_write_r>:
 8006660:	b538      	push	{r3, r4, r5, lr}
 8006662:	4d07      	ldr	r5, [pc, #28]	@ (8006680 <_write_r+0x20>)
 8006664:	4604      	mov	r4, r0
 8006666:	4608      	mov	r0, r1
 8006668:	4611      	mov	r1, r2
 800666a:	2200      	movs	r2, #0
 800666c:	602a      	str	r2, [r5, #0]
 800666e:	461a      	mov	r2, r3
 8006670:	f7fa fc5d 	bl	8000f2e <_write>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d102      	bne.n	800667e <_write_r+0x1e>
 8006678:	682b      	ldr	r3, [r5, #0]
 800667a:	b103      	cbz	r3, 800667e <_write_r+0x1e>
 800667c:	6023      	str	r3, [r4, #0]
 800667e:	bd38      	pop	{r3, r4, r5, pc}
 8006680:	20000b34 	.word	0x20000b34

08006684 <__errno>:
 8006684:	4b01      	ldr	r3, [pc, #4]	@ (800668c <__errno+0x8>)
 8006686:	6818      	ldr	r0, [r3, #0]
 8006688:	4770      	bx	lr
 800668a:	bf00      	nop
 800668c:	20000084 	.word	0x20000084

08006690 <__libc_init_array>:
 8006690:	b570      	push	{r4, r5, r6, lr}
 8006692:	4d0d      	ldr	r5, [pc, #52]	@ (80066c8 <__libc_init_array+0x38>)
 8006694:	4c0d      	ldr	r4, [pc, #52]	@ (80066cc <__libc_init_array+0x3c>)
 8006696:	1b64      	subs	r4, r4, r5
 8006698:	10a4      	asrs	r4, r4, #2
 800669a:	2600      	movs	r6, #0
 800669c:	42a6      	cmp	r6, r4
 800669e:	d109      	bne.n	80066b4 <__libc_init_array+0x24>
 80066a0:	4d0b      	ldr	r5, [pc, #44]	@ (80066d0 <__libc_init_array+0x40>)
 80066a2:	4c0c      	ldr	r4, [pc, #48]	@ (80066d4 <__libc_init_array+0x44>)
 80066a4:	f000 ff5e 	bl	8007564 <_init>
 80066a8:	1b64      	subs	r4, r4, r5
 80066aa:	10a4      	asrs	r4, r4, #2
 80066ac:	2600      	movs	r6, #0
 80066ae:	42a6      	cmp	r6, r4
 80066b0:	d105      	bne.n	80066be <__libc_init_array+0x2e>
 80066b2:	bd70      	pop	{r4, r5, r6, pc}
 80066b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b8:	4798      	blx	r3
 80066ba:	3601      	adds	r6, #1
 80066bc:	e7ee      	b.n	800669c <__libc_init_array+0xc>
 80066be:	f855 3b04 	ldr.w	r3, [r5], #4
 80066c2:	4798      	blx	r3
 80066c4:	3601      	adds	r6, #1
 80066c6:	e7f2      	b.n	80066ae <__libc_init_array+0x1e>
 80066c8:	080079ac 	.word	0x080079ac
 80066cc:	080079ac 	.word	0x080079ac
 80066d0:	080079ac 	.word	0x080079ac
 80066d4:	080079b0 	.word	0x080079b0

080066d8 <__retarget_lock_init_recursive>:
 80066d8:	4770      	bx	lr

080066da <__retarget_lock_acquire_recursive>:
 80066da:	4770      	bx	lr

080066dc <__retarget_lock_release_recursive>:
 80066dc:	4770      	bx	lr
	...

080066e0 <__assert_func>:
 80066e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066e2:	4614      	mov	r4, r2
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b09      	ldr	r3, [pc, #36]	@ (800670c <__assert_func+0x2c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4605      	mov	r5, r0
 80066ec:	68d8      	ldr	r0, [r3, #12]
 80066ee:	b954      	cbnz	r4, 8006706 <__assert_func+0x26>
 80066f0:	4b07      	ldr	r3, [pc, #28]	@ (8006710 <__assert_func+0x30>)
 80066f2:	461c      	mov	r4, r3
 80066f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066f8:	9100      	str	r1, [sp, #0]
 80066fa:	462b      	mov	r3, r5
 80066fc:	4905      	ldr	r1, [pc, #20]	@ (8006714 <__assert_func+0x34>)
 80066fe:	f000 fde1 	bl	80072c4 <fiprintf>
 8006702:	f000 fead 	bl	8007460 <abort>
 8006706:	4b04      	ldr	r3, [pc, #16]	@ (8006718 <__assert_func+0x38>)
 8006708:	e7f4      	b.n	80066f4 <__assert_func+0x14>
 800670a:	bf00      	nop
 800670c:	20000084 	.word	0x20000084
 8006710:	0800796e 	.word	0x0800796e
 8006714:	08007940 	.word	0x08007940
 8006718:	08007933 	.word	0x08007933

0800671c <_free_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4605      	mov	r5, r0
 8006720:	2900      	cmp	r1, #0
 8006722:	d041      	beq.n	80067a8 <_free_r+0x8c>
 8006724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006728:	1f0c      	subs	r4, r1, #4
 800672a:	2b00      	cmp	r3, #0
 800672c:	bfb8      	it	lt
 800672e:	18e4      	addlt	r4, r4, r3
 8006730:	f000 f8e8 	bl	8006904 <__malloc_lock>
 8006734:	4a1d      	ldr	r2, [pc, #116]	@ (80067ac <_free_r+0x90>)
 8006736:	6813      	ldr	r3, [r2, #0]
 8006738:	b933      	cbnz	r3, 8006748 <_free_r+0x2c>
 800673a:	6063      	str	r3, [r4, #4]
 800673c:	6014      	str	r4, [r2, #0]
 800673e:	4628      	mov	r0, r5
 8006740:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006744:	f000 b8e4 	b.w	8006910 <__malloc_unlock>
 8006748:	42a3      	cmp	r3, r4
 800674a:	d908      	bls.n	800675e <_free_r+0x42>
 800674c:	6820      	ldr	r0, [r4, #0]
 800674e:	1821      	adds	r1, r4, r0
 8006750:	428b      	cmp	r3, r1
 8006752:	bf01      	itttt	eq
 8006754:	6819      	ldreq	r1, [r3, #0]
 8006756:	685b      	ldreq	r3, [r3, #4]
 8006758:	1809      	addeq	r1, r1, r0
 800675a:	6021      	streq	r1, [r4, #0]
 800675c:	e7ed      	b.n	800673a <_free_r+0x1e>
 800675e:	461a      	mov	r2, r3
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	b10b      	cbz	r3, 8006768 <_free_r+0x4c>
 8006764:	42a3      	cmp	r3, r4
 8006766:	d9fa      	bls.n	800675e <_free_r+0x42>
 8006768:	6811      	ldr	r1, [r2, #0]
 800676a:	1850      	adds	r0, r2, r1
 800676c:	42a0      	cmp	r0, r4
 800676e:	d10b      	bne.n	8006788 <_free_r+0x6c>
 8006770:	6820      	ldr	r0, [r4, #0]
 8006772:	4401      	add	r1, r0
 8006774:	1850      	adds	r0, r2, r1
 8006776:	4283      	cmp	r3, r0
 8006778:	6011      	str	r1, [r2, #0]
 800677a:	d1e0      	bne.n	800673e <_free_r+0x22>
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	6053      	str	r3, [r2, #4]
 8006782:	4408      	add	r0, r1
 8006784:	6010      	str	r0, [r2, #0]
 8006786:	e7da      	b.n	800673e <_free_r+0x22>
 8006788:	d902      	bls.n	8006790 <_free_r+0x74>
 800678a:	230c      	movs	r3, #12
 800678c:	602b      	str	r3, [r5, #0]
 800678e:	e7d6      	b.n	800673e <_free_r+0x22>
 8006790:	6820      	ldr	r0, [r4, #0]
 8006792:	1821      	adds	r1, r4, r0
 8006794:	428b      	cmp	r3, r1
 8006796:	bf04      	itt	eq
 8006798:	6819      	ldreq	r1, [r3, #0]
 800679a:	685b      	ldreq	r3, [r3, #4]
 800679c:	6063      	str	r3, [r4, #4]
 800679e:	bf04      	itt	eq
 80067a0:	1809      	addeq	r1, r1, r0
 80067a2:	6021      	streq	r1, [r4, #0]
 80067a4:	6054      	str	r4, [r2, #4]
 80067a6:	e7ca      	b.n	800673e <_free_r+0x22>
 80067a8:	bd38      	pop	{r3, r4, r5, pc}
 80067aa:	bf00      	nop
 80067ac:	20000b40 	.word	0x20000b40

080067b0 <malloc>:
 80067b0:	4b02      	ldr	r3, [pc, #8]	@ (80067bc <malloc+0xc>)
 80067b2:	4601      	mov	r1, r0
 80067b4:	6818      	ldr	r0, [r3, #0]
 80067b6:	f000 b825 	b.w	8006804 <_malloc_r>
 80067ba:	bf00      	nop
 80067bc:	20000084 	.word	0x20000084

080067c0 <sbrk_aligned>:
 80067c0:	b570      	push	{r4, r5, r6, lr}
 80067c2:	4e0f      	ldr	r6, [pc, #60]	@ (8006800 <sbrk_aligned+0x40>)
 80067c4:	460c      	mov	r4, r1
 80067c6:	6831      	ldr	r1, [r6, #0]
 80067c8:	4605      	mov	r5, r0
 80067ca:	b911      	cbnz	r1, 80067d2 <sbrk_aligned+0x12>
 80067cc:	f000 fe2a 	bl	8007424 <_sbrk_r>
 80067d0:	6030      	str	r0, [r6, #0]
 80067d2:	4621      	mov	r1, r4
 80067d4:	4628      	mov	r0, r5
 80067d6:	f000 fe25 	bl	8007424 <_sbrk_r>
 80067da:	1c43      	adds	r3, r0, #1
 80067dc:	d103      	bne.n	80067e6 <sbrk_aligned+0x26>
 80067de:	f04f 34ff 	mov.w	r4, #4294967295
 80067e2:	4620      	mov	r0, r4
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
 80067e6:	1cc4      	adds	r4, r0, #3
 80067e8:	f024 0403 	bic.w	r4, r4, #3
 80067ec:	42a0      	cmp	r0, r4
 80067ee:	d0f8      	beq.n	80067e2 <sbrk_aligned+0x22>
 80067f0:	1a21      	subs	r1, r4, r0
 80067f2:	4628      	mov	r0, r5
 80067f4:	f000 fe16 	bl	8007424 <_sbrk_r>
 80067f8:	3001      	adds	r0, #1
 80067fa:	d1f2      	bne.n	80067e2 <sbrk_aligned+0x22>
 80067fc:	e7ef      	b.n	80067de <sbrk_aligned+0x1e>
 80067fe:	bf00      	nop
 8006800:	20000b3c 	.word	0x20000b3c

08006804 <_malloc_r>:
 8006804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006808:	1ccd      	adds	r5, r1, #3
 800680a:	f025 0503 	bic.w	r5, r5, #3
 800680e:	3508      	adds	r5, #8
 8006810:	2d0c      	cmp	r5, #12
 8006812:	bf38      	it	cc
 8006814:	250c      	movcc	r5, #12
 8006816:	2d00      	cmp	r5, #0
 8006818:	4606      	mov	r6, r0
 800681a:	db01      	blt.n	8006820 <_malloc_r+0x1c>
 800681c:	42a9      	cmp	r1, r5
 800681e:	d904      	bls.n	800682a <_malloc_r+0x26>
 8006820:	230c      	movs	r3, #12
 8006822:	6033      	str	r3, [r6, #0]
 8006824:	2000      	movs	r0, #0
 8006826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800682a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006900 <_malloc_r+0xfc>
 800682e:	f000 f869 	bl	8006904 <__malloc_lock>
 8006832:	f8d8 3000 	ldr.w	r3, [r8]
 8006836:	461c      	mov	r4, r3
 8006838:	bb44      	cbnz	r4, 800688c <_malloc_r+0x88>
 800683a:	4629      	mov	r1, r5
 800683c:	4630      	mov	r0, r6
 800683e:	f7ff ffbf 	bl	80067c0 <sbrk_aligned>
 8006842:	1c43      	adds	r3, r0, #1
 8006844:	4604      	mov	r4, r0
 8006846:	d158      	bne.n	80068fa <_malloc_r+0xf6>
 8006848:	f8d8 4000 	ldr.w	r4, [r8]
 800684c:	4627      	mov	r7, r4
 800684e:	2f00      	cmp	r7, #0
 8006850:	d143      	bne.n	80068da <_malloc_r+0xd6>
 8006852:	2c00      	cmp	r4, #0
 8006854:	d04b      	beq.n	80068ee <_malloc_r+0xea>
 8006856:	6823      	ldr	r3, [r4, #0]
 8006858:	4639      	mov	r1, r7
 800685a:	4630      	mov	r0, r6
 800685c:	eb04 0903 	add.w	r9, r4, r3
 8006860:	f000 fde0 	bl	8007424 <_sbrk_r>
 8006864:	4581      	cmp	r9, r0
 8006866:	d142      	bne.n	80068ee <_malloc_r+0xea>
 8006868:	6821      	ldr	r1, [r4, #0]
 800686a:	1a6d      	subs	r5, r5, r1
 800686c:	4629      	mov	r1, r5
 800686e:	4630      	mov	r0, r6
 8006870:	f7ff ffa6 	bl	80067c0 <sbrk_aligned>
 8006874:	3001      	adds	r0, #1
 8006876:	d03a      	beq.n	80068ee <_malloc_r+0xea>
 8006878:	6823      	ldr	r3, [r4, #0]
 800687a:	442b      	add	r3, r5
 800687c:	6023      	str	r3, [r4, #0]
 800687e:	f8d8 3000 	ldr.w	r3, [r8]
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	bb62      	cbnz	r2, 80068e0 <_malloc_r+0xdc>
 8006886:	f8c8 7000 	str.w	r7, [r8]
 800688a:	e00f      	b.n	80068ac <_malloc_r+0xa8>
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	1b52      	subs	r2, r2, r5
 8006890:	d420      	bmi.n	80068d4 <_malloc_r+0xd0>
 8006892:	2a0b      	cmp	r2, #11
 8006894:	d917      	bls.n	80068c6 <_malloc_r+0xc2>
 8006896:	1961      	adds	r1, r4, r5
 8006898:	42a3      	cmp	r3, r4
 800689a:	6025      	str	r5, [r4, #0]
 800689c:	bf18      	it	ne
 800689e:	6059      	strne	r1, [r3, #4]
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	bf08      	it	eq
 80068a4:	f8c8 1000 	streq.w	r1, [r8]
 80068a8:	5162      	str	r2, [r4, r5]
 80068aa:	604b      	str	r3, [r1, #4]
 80068ac:	4630      	mov	r0, r6
 80068ae:	f000 f82f 	bl	8006910 <__malloc_unlock>
 80068b2:	f104 000b 	add.w	r0, r4, #11
 80068b6:	1d23      	adds	r3, r4, #4
 80068b8:	f020 0007 	bic.w	r0, r0, #7
 80068bc:	1ac2      	subs	r2, r0, r3
 80068be:	bf1c      	itt	ne
 80068c0:	1a1b      	subne	r3, r3, r0
 80068c2:	50a3      	strne	r3, [r4, r2]
 80068c4:	e7af      	b.n	8006826 <_malloc_r+0x22>
 80068c6:	6862      	ldr	r2, [r4, #4]
 80068c8:	42a3      	cmp	r3, r4
 80068ca:	bf0c      	ite	eq
 80068cc:	f8c8 2000 	streq.w	r2, [r8]
 80068d0:	605a      	strne	r2, [r3, #4]
 80068d2:	e7eb      	b.n	80068ac <_malloc_r+0xa8>
 80068d4:	4623      	mov	r3, r4
 80068d6:	6864      	ldr	r4, [r4, #4]
 80068d8:	e7ae      	b.n	8006838 <_malloc_r+0x34>
 80068da:	463c      	mov	r4, r7
 80068dc:	687f      	ldr	r7, [r7, #4]
 80068de:	e7b6      	b.n	800684e <_malloc_r+0x4a>
 80068e0:	461a      	mov	r2, r3
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	42a3      	cmp	r3, r4
 80068e6:	d1fb      	bne.n	80068e0 <_malloc_r+0xdc>
 80068e8:	2300      	movs	r3, #0
 80068ea:	6053      	str	r3, [r2, #4]
 80068ec:	e7de      	b.n	80068ac <_malloc_r+0xa8>
 80068ee:	230c      	movs	r3, #12
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	4630      	mov	r0, r6
 80068f4:	f000 f80c 	bl	8006910 <__malloc_unlock>
 80068f8:	e794      	b.n	8006824 <_malloc_r+0x20>
 80068fa:	6005      	str	r5, [r0, #0]
 80068fc:	e7d6      	b.n	80068ac <_malloc_r+0xa8>
 80068fe:	bf00      	nop
 8006900:	20000b40 	.word	0x20000b40

08006904 <__malloc_lock>:
 8006904:	4801      	ldr	r0, [pc, #4]	@ (800690c <__malloc_lock+0x8>)
 8006906:	f7ff bee8 	b.w	80066da <__retarget_lock_acquire_recursive>
 800690a:	bf00      	nop
 800690c:	20000b38 	.word	0x20000b38

08006910 <__malloc_unlock>:
 8006910:	4801      	ldr	r0, [pc, #4]	@ (8006918 <__malloc_unlock+0x8>)
 8006912:	f7ff bee3 	b.w	80066dc <__retarget_lock_release_recursive>
 8006916:	bf00      	nop
 8006918:	20000b38 	.word	0x20000b38

0800691c <__ssputs_r>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	688e      	ldr	r6, [r1, #8]
 8006922:	461f      	mov	r7, r3
 8006924:	42be      	cmp	r6, r7
 8006926:	680b      	ldr	r3, [r1, #0]
 8006928:	4682      	mov	sl, r0
 800692a:	460c      	mov	r4, r1
 800692c:	4690      	mov	r8, r2
 800692e:	d82d      	bhi.n	800698c <__ssputs_r+0x70>
 8006930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006938:	d026      	beq.n	8006988 <__ssputs_r+0x6c>
 800693a:	6965      	ldr	r5, [r4, #20]
 800693c:	6909      	ldr	r1, [r1, #16]
 800693e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006942:	eba3 0901 	sub.w	r9, r3, r1
 8006946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800694a:	1c7b      	adds	r3, r7, #1
 800694c:	444b      	add	r3, r9
 800694e:	106d      	asrs	r5, r5, #1
 8006950:	429d      	cmp	r5, r3
 8006952:	bf38      	it	cc
 8006954:	461d      	movcc	r5, r3
 8006956:	0553      	lsls	r3, r2, #21
 8006958:	d527      	bpl.n	80069aa <__ssputs_r+0x8e>
 800695a:	4629      	mov	r1, r5
 800695c:	f7ff ff52 	bl	8006804 <_malloc_r>
 8006960:	4606      	mov	r6, r0
 8006962:	b360      	cbz	r0, 80069be <__ssputs_r+0xa2>
 8006964:	6921      	ldr	r1, [r4, #16]
 8006966:	464a      	mov	r2, r9
 8006968:	f000 fd6c 	bl	8007444 <memcpy>
 800696c:	89a3      	ldrh	r3, [r4, #12]
 800696e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	6126      	str	r6, [r4, #16]
 800697a:	6165      	str	r5, [r4, #20]
 800697c:	444e      	add	r6, r9
 800697e:	eba5 0509 	sub.w	r5, r5, r9
 8006982:	6026      	str	r6, [r4, #0]
 8006984:	60a5      	str	r5, [r4, #8]
 8006986:	463e      	mov	r6, r7
 8006988:	42be      	cmp	r6, r7
 800698a:	d900      	bls.n	800698e <__ssputs_r+0x72>
 800698c:	463e      	mov	r6, r7
 800698e:	6820      	ldr	r0, [r4, #0]
 8006990:	4632      	mov	r2, r6
 8006992:	4641      	mov	r1, r8
 8006994:	f000 fd0a 	bl	80073ac <memmove>
 8006998:	68a3      	ldr	r3, [r4, #8]
 800699a:	1b9b      	subs	r3, r3, r6
 800699c:	60a3      	str	r3, [r4, #8]
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	4433      	add	r3, r6
 80069a2:	6023      	str	r3, [r4, #0]
 80069a4:	2000      	movs	r0, #0
 80069a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069aa:	462a      	mov	r2, r5
 80069ac:	f000 fd5f 	bl	800746e <_realloc_r>
 80069b0:	4606      	mov	r6, r0
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d1e0      	bne.n	8006978 <__ssputs_r+0x5c>
 80069b6:	6921      	ldr	r1, [r4, #16]
 80069b8:	4650      	mov	r0, sl
 80069ba:	f7ff feaf 	bl	800671c <_free_r>
 80069be:	230c      	movs	r3, #12
 80069c0:	f8ca 3000 	str.w	r3, [sl]
 80069c4:	89a3      	ldrh	r3, [r4, #12]
 80069c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80069ca:	81a3      	strh	r3, [r4, #12]
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	e7e9      	b.n	80069a6 <__ssputs_r+0x8a>
	...

080069d4 <_svfiprintf_r>:
 80069d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d8:	4698      	mov	r8, r3
 80069da:	898b      	ldrh	r3, [r1, #12]
 80069dc:	061b      	lsls	r3, r3, #24
 80069de:	b09d      	sub	sp, #116	@ 0x74
 80069e0:	4607      	mov	r7, r0
 80069e2:	460d      	mov	r5, r1
 80069e4:	4614      	mov	r4, r2
 80069e6:	d510      	bpl.n	8006a0a <_svfiprintf_r+0x36>
 80069e8:	690b      	ldr	r3, [r1, #16]
 80069ea:	b973      	cbnz	r3, 8006a0a <_svfiprintf_r+0x36>
 80069ec:	2140      	movs	r1, #64	@ 0x40
 80069ee:	f7ff ff09 	bl	8006804 <_malloc_r>
 80069f2:	6028      	str	r0, [r5, #0]
 80069f4:	6128      	str	r0, [r5, #16]
 80069f6:	b930      	cbnz	r0, 8006a06 <_svfiprintf_r+0x32>
 80069f8:	230c      	movs	r3, #12
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006a00:	b01d      	add	sp, #116	@ 0x74
 8006a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a06:	2340      	movs	r3, #64	@ 0x40
 8006a08:	616b      	str	r3, [r5, #20]
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a0e:	2320      	movs	r3, #32
 8006a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a18:	2330      	movs	r3, #48	@ 0x30
 8006a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006bb8 <_svfiprintf_r+0x1e4>
 8006a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006a22:	f04f 0901 	mov.w	r9, #1
 8006a26:	4623      	mov	r3, r4
 8006a28:	469a      	mov	sl, r3
 8006a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a2e:	b10a      	cbz	r2, 8006a34 <_svfiprintf_r+0x60>
 8006a30:	2a25      	cmp	r2, #37	@ 0x25
 8006a32:	d1f9      	bne.n	8006a28 <_svfiprintf_r+0x54>
 8006a34:	ebba 0b04 	subs.w	fp, sl, r4
 8006a38:	d00b      	beq.n	8006a52 <_svfiprintf_r+0x7e>
 8006a3a:	465b      	mov	r3, fp
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	4629      	mov	r1, r5
 8006a40:	4638      	mov	r0, r7
 8006a42:	f7ff ff6b 	bl	800691c <__ssputs_r>
 8006a46:	3001      	adds	r0, #1
 8006a48:	f000 80a7 	beq.w	8006b9a <_svfiprintf_r+0x1c6>
 8006a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a4e:	445a      	add	r2, fp
 8006a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a52:	f89a 3000 	ldrb.w	r3, [sl]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 809f 	beq.w	8006b9a <_svfiprintf_r+0x1c6>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a66:	f10a 0a01 	add.w	sl, sl, #1
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	9307      	str	r3, [sp, #28]
 8006a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8006a74:	4654      	mov	r4, sl
 8006a76:	2205      	movs	r2, #5
 8006a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a7c:	484e      	ldr	r0, [pc, #312]	@ (8006bb8 <_svfiprintf_r+0x1e4>)
 8006a7e:	f7f9 fbaf 	bl	80001e0 <memchr>
 8006a82:	9a04      	ldr	r2, [sp, #16]
 8006a84:	b9d8      	cbnz	r0, 8006abe <_svfiprintf_r+0xea>
 8006a86:	06d0      	lsls	r0, r2, #27
 8006a88:	bf44      	itt	mi
 8006a8a:	2320      	movmi	r3, #32
 8006a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a90:	0711      	lsls	r1, r2, #28
 8006a92:	bf44      	itt	mi
 8006a94:	232b      	movmi	r3, #43	@ 0x2b
 8006a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aa0:	d015      	beq.n	8006ace <_svfiprintf_r+0xfa>
 8006aa2:	9a07      	ldr	r2, [sp, #28]
 8006aa4:	4654      	mov	r4, sl
 8006aa6:	2000      	movs	r0, #0
 8006aa8:	f04f 0c0a 	mov.w	ip, #10
 8006aac:	4621      	mov	r1, r4
 8006aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ab2:	3b30      	subs	r3, #48	@ 0x30
 8006ab4:	2b09      	cmp	r3, #9
 8006ab6:	d94b      	bls.n	8006b50 <_svfiprintf_r+0x17c>
 8006ab8:	b1b0      	cbz	r0, 8006ae8 <_svfiprintf_r+0x114>
 8006aba:	9207      	str	r2, [sp, #28]
 8006abc:	e014      	b.n	8006ae8 <_svfiprintf_r+0x114>
 8006abe:	eba0 0308 	sub.w	r3, r0, r8
 8006ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	9304      	str	r3, [sp, #16]
 8006aca:	46a2      	mov	sl, r4
 8006acc:	e7d2      	b.n	8006a74 <_svfiprintf_r+0xa0>
 8006ace:	9b03      	ldr	r3, [sp, #12]
 8006ad0:	1d19      	adds	r1, r3, #4
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	9103      	str	r1, [sp, #12]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	bfbb      	ittet	lt
 8006ada:	425b      	neglt	r3, r3
 8006adc:	f042 0202 	orrlt.w	r2, r2, #2
 8006ae0:	9307      	strge	r3, [sp, #28]
 8006ae2:	9307      	strlt	r3, [sp, #28]
 8006ae4:	bfb8      	it	lt
 8006ae6:	9204      	strlt	r2, [sp, #16]
 8006ae8:	7823      	ldrb	r3, [r4, #0]
 8006aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8006aec:	d10a      	bne.n	8006b04 <_svfiprintf_r+0x130>
 8006aee:	7863      	ldrb	r3, [r4, #1]
 8006af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8006af2:	d132      	bne.n	8006b5a <_svfiprintf_r+0x186>
 8006af4:	9b03      	ldr	r3, [sp, #12]
 8006af6:	1d1a      	adds	r2, r3, #4
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	9203      	str	r2, [sp, #12]
 8006afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006b00:	3402      	adds	r4, #2
 8006b02:	9305      	str	r3, [sp, #20]
 8006b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006bc8 <_svfiprintf_r+0x1f4>
 8006b08:	7821      	ldrb	r1, [r4, #0]
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	4650      	mov	r0, sl
 8006b0e:	f7f9 fb67 	bl	80001e0 <memchr>
 8006b12:	b138      	cbz	r0, 8006b24 <_svfiprintf_r+0x150>
 8006b14:	9b04      	ldr	r3, [sp, #16]
 8006b16:	eba0 000a 	sub.w	r0, r0, sl
 8006b1a:	2240      	movs	r2, #64	@ 0x40
 8006b1c:	4082      	lsls	r2, r0
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	3401      	adds	r4, #1
 8006b22:	9304      	str	r3, [sp, #16]
 8006b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b28:	4824      	ldr	r0, [pc, #144]	@ (8006bbc <_svfiprintf_r+0x1e8>)
 8006b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006b2e:	2206      	movs	r2, #6
 8006b30:	f7f9 fb56 	bl	80001e0 <memchr>
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d036      	beq.n	8006ba6 <_svfiprintf_r+0x1d2>
 8006b38:	4b21      	ldr	r3, [pc, #132]	@ (8006bc0 <_svfiprintf_r+0x1ec>)
 8006b3a:	bb1b      	cbnz	r3, 8006b84 <_svfiprintf_r+0x1b0>
 8006b3c:	9b03      	ldr	r3, [sp, #12]
 8006b3e:	3307      	adds	r3, #7
 8006b40:	f023 0307 	bic.w	r3, r3, #7
 8006b44:	3308      	adds	r3, #8
 8006b46:	9303      	str	r3, [sp, #12]
 8006b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b4a:	4433      	add	r3, r6
 8006b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b4e:	e76a      	b.n	8006a26 <_svfiprintf_r+0x52>
 8006b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b54:	460c      	mov	r4, r1
 8006b56:	2001      	movs	r0, #1
 8006b58:	e7a8      	b.n	8006aac <_svfiprintf_r+0xd8>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	3401      	adds	r4, #1
 8006b5e:	9305      	str	r3, [sp, #20]
 8006b60:	4619      	mov	r1, r3
 8006b62:	f04f 0c0a 	mov.w	ip, #10
 8006b66:	4620      	mov	r0, r4
 8006b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b6c:	3a30      	subs	r2, #48	@ 0x30
 8006b6e:	2a09      	cmp	r2, #9
 8006b70:	d903      	bls.n	8006b7a <_svfiprintf_r+0x1a6>
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d0c6      	beq.n	8006b04 <_svfiprintf_r+0x130>
 8006b76:	9105      	str	r1, [sp, #20]
 8006b78:	e7c4      	b.n	8006b04 <_svfiprintf_r+0x130>
 8006b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b7e:	4604      	mov	r4, r0
 8006b80:	2301      	movs	r3, #1
 8006b82:	e7f0      	b.n	8006b66 <_svfiprintf_r+0x192>
 8006b84:	ab03      	add	r3, sp, #12
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	462a      	mov	r2, r5
 8006b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc4 <_svfiprintf_r+0x1f0>)
 8006b8c:	a904      	add	r1, sp, #16
 8006b8e:	4638      	mov	r0, r7
 8006b90:	f3af 8000 	nop.w
 8006b94:	1c42      	adds	r2, r0, #1
 8006b96:	4606      	mov	r6, r0
 8006b98:	d1d6      	bne.n	8006b48 <_svfiprintf_r+0x174>
 8006b9a:	89ab      	ldrh	r3, [r5, #12]
 8006b9c:	065b      	lsls	r3, r3, #25
 8006b9e:	f53f af2d 	bmi.w	80069fc <_svfiprintf_r+0x28>
 8006ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006ba4:	e72c      	b.n	8006a00 <_svfiprintf_r+0x2c>
 8006ba6:	ab03      	add	r3, sp, #12
 8006ba8:	9300      	str	r3, [sp, #0]
 8006baa:	462a      	mov	r2, r5
 8006bac:	4b05      	ldr	r3, [pc, #20]	@ (8006bc4 <_svfiprintf_r+0x1f0>)
 8006bae:	a904      	add	r1, sp, #16
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	f000 f9bb 	bl	8006f2c <_printf_i>
 8006bb6:	e7ed      	b.n	8006b94 <_svfiprintf_r+0x1c0>
 8006bb8:	0800796f 	.word	0x0800796f
 8006bbc:	08007979 	.word	0x08007979
 8006bc0:	00000000 	.word	0x00000000
 8006bc4:	0800691d 	.word	0x0800691d
 8006bc8:	08007975 	.word	0x08007975

08006bcc <__sfputc_r>:
 8006bcc:	6893      	ldr	r3, [r2, #8]
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	b410      	push	{r4}
 8006bd4:	6093      	str	r3, [r2, #8]
 8006bd6:	da08      	bge.n	8006bea <__sfputc_r+0x1e>
 8006bd8:	6994      	ldr	r4, [r2, #24]
 8006bda:	42a3      	cmp	r3, r4
 8006bdc:	db01      	blt.n	8006be2 <__sfputc_r+0x16>
 8006bde:	290a      	cmp	r1, #10
 8006be0:	d103      	bne.n	8006bea <__sfputc_r+0x1e>
 8006be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006be6:	f7ff bc6a 	b.w	80064be <__swbuf_r>
 8006bea:	6813      	ldr	r3, [r2, #0]
 8006bec:	1c58      	adds	r0, r3, #1
 8006bee:	6010      	str	r0, [r2, #0]
 8006bf0:	7019      	strb	r1, [r3, #0]
 8006bf2:	4608      	mov	r0, r1
 8006bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bf8:	4770      	bx	lr

08006bfa <__sfputs_r>:
 8006bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bfc:	4606      	mov	r6, r0
 8006bfe:	460f      	mov	r7, r1
 8006c00:	4614      	mov	r4, r2
 8006c02:	18d5      	adds	r5, r2, r3
 8006c04:	42ac      	cmp	r4, r5
 8006c06:	d101      	bne.n	8006c0c <__sfputs_r+0x12>
 8006c08:	2000      	movs	r0, #0
 8006c0a:	e007      	b.n	8006c1c <__sfputs_r+0x22>
 8006c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c10:	463a      	mov	r2, r7
 8006c12:	4630      	mov	r0, r6
 8006c14:	f7ff ffda 	bl	8006bcc <__sfputc_r>
 8006c18:	1c43      	adds	r3, r0, #1
 8006c1a:	d1f3      	bne.n	8006c04 <__sfputs_r+0xa>
 8006c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c20 <_vfiprintf_r>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	460d      	mov	r5, r1
 8006c26:	b09d      	sub	sp, #116	@ 0x74
 8006c28:	4614      	mov	r4, r2
 8006c2a:	4698      	mov	r8, r3
 8006c2c:	4606      	mov	r6, r0
 8006c2e:	b118      	cbz	r0, 8006c38 <_vfiprintf_r+0x18>
 8006c30:	6a03      	ldr	r3, [r0, #32]
 8006c32:	b90b      	cbnz	r3, 8006c38 <_vfiprintf_r+0x18>
 8006c34:	f7ff fa6a 	bl	800610c <__sinit>
 8006c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c3a:	07d9      	lsls	r1, r3, #31
 8006c3c:	d405      	bmi.n	8006c4a <_vfiprintf_r+0x2a>
 8006c3e:	89ab      	ldrh	r3, [r5, #12]
 8006c40:	059a      	lsls	r2, r3, #22
 8006c42:	d402      	bmi.n	8006c4a <_vfiprintf_r+0x2a>
 8006c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c46:	f7ff fd48 	bl	80066da <__retarget_lock_acquire_recursive>
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	071b      	lsls	r3, r3, #28
 8006c4e:	d501      	bpl.n	8006c54 <_vfiprintf_r+0x34>
 8006c50:	692b      	ldr	r3, [r5, #16]
 8006c52:	b99b      	cbnz	r3, 8006c7c <_vfiprintf_r+0x5c>
 8006c54:	4629      	mov	r1, r5
 8006c56:	4630      	mov	r0, r6
 8006c58:	f7ff fc70 	bl	800653c <__swsetup_r>
 8006c5c:	b170      	cbz	r0, 8006c7c <_vfiprintf_r+0x5c>
 8006c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c60:	07dc      	lsls	r4, r3, #31
 8006c62:	d504      	bpl.n	8006c6e <_vfiprintf_r+0x4e>
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	b01d      	add	sp, #116	@ 0x74
 8006c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c6e:	89ab      	ldrh	r3, [r5, #12]
 8006c70:	0598      	lsls	r0, r3, #22
 8006c72:	d4f7      	bmi.n	8006c64 <_vfiprintf_r+0x44>
 8006c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c76:	f7ff fd31 	bl	80066dc <__retarget_lock_release_recursive>
 8006c7a:	e7f3      	b.n	8006c64 <_vfiprintf_r+0x44>
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c80:	2320      	movs	r3, #32
 8006c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c8a:	2330      	movs	r3, #48	@ 0x30
 8006c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e3c <_vfiprintf_r+0x21c>
 8006c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c94:	f04f 0901 	mov.w	r9, #1
 8006c98:	4623      	mov	r3, r4
 8006c9a:	469a      	mov	sl, r3
 8006c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ca0:	b10a      	cbz	r2, 8006ca6 <_vfiprintf_r+0x86>
 8006ca2:	2a25      	cmp	r2, #37	@ 0x25
 8006ca4:	d1f9      	bne.n	8006c9a <_vfiprintf_r+0x7a>
 8006ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8006caa:	d00b      	beq.n	8006cc4 <_vfiprintf_r+0xa4>
 8006cac:	465b      	mov	r3, fp
 8006cae:	4622      	mov	r2, r4
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	4630      	mov	r0, r6
 8006cb4:	f7ff ffa1 	bl	8006bfa <__sfputs_r>
 8006cb8:	3001      	adds	r0, #1
 8006cba:	f000 80a7 	beq.w	8006e0c <_vfiprintf_r+0x1ec>
 8006cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cc0:	445a      	add	r2, fp
 8006cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 809f 	beq.w	8006e0c <_vfiprintf_r+0x1ec>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cd8:	f10a 0a01 	add.w	sl, sl, #1
 8006cdc:	9304      	str	r3, [sp, #16]
 8006cde:	9307      	str	r3, [sp, #28]
 8006ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8006ce6:	4654      	mov	r4, sl
 8006ce8:	2205      	movs	r2, #5
 8006cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cee:	4853      	ldr	r0, [pc, #332]	@ (8006e3c <_vfiprintf_r+0x21c>)
 8006cf0:	f7f9 fa76 	bl	80001e0 <memchr>
 8006cf4:	9a04      	ldr	r2, [sp, #16]
 8006cf6:	b9d8      	cbnz	r0, 8006d30 <_vfiprintf_r+0x110>
 8006cf8:	06d1      	lsls	r1, r2, #27
 8006cfa:	bf44      	itt	mi
 8006cfc:	2320      	movmi	r3, #32
 8006cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d02:	0713      	lsls	r3, r2, #28
 8006d04:	bf44      	itt	mi
 8006d06:	232b      	movmi	r3, #43	@ 0x2b
 8006d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8006d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d12:	d015      	beq.n	8006d40 <_vfiprintf_r+0x120>
 8006d14:	9a07      	ldr	r2, [sp, #28]
 8006d16:	4654      	mov	r4, sl
 8006d18:	2000      	movs	r0, #0
 8006d1a:	f04f 0c0a 	mov.w	ip, #10
 8006d1e:	4621      	mov	r1, r4
 8006d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d24:	3b30      	subs	r3, #48	@ 0x30
 8006d26:	2b09      	cmp	r3, #9
 8006d28:	d94b      	bls.n	8006dc2 <_vfiprintf_r+0x1a2>
 8006d2a:	b1b0      	cbz	r0, 8006d5a <_vfiprintf_r+0x13a>
 8006d2c:	9207      	str	r2, [sp, #28]
 8006d2e:	e014      	b.n	8006d5a <_vfiprintf_r+0x13a>
 8006d30:	eba0 0308 	sub.w	r3, r0, r8
 8006d34:	fa09 f303 	lsl.w	r3, r9, r3
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	9304      	str	r3, [sp, #16]
 8006d3c:	46a2      	mov	sl, r4
 8006d3e:	e7d2      	b.n	8006ce6 <_vfiprintf_r+0xc6>
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	1d19      	adds	r1, r3, #4
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	9103      	str	r1, [sp, #12]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	bfbb      	ittet	lt
 8006d4c:	425b      	neglt	r3, r3
 8006d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d52:	9307      	strge	r3, [sp, #28]
 8006d54:	9307      	strlt	r3, [sp, #28]
 8006d56:	bfb8      	it	lt
 8006d58:	9204      	strlt	r2, [sp, #16]
 8006d5a:	7823      	ldrb	r3, [r4, #0]
 8006d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d5e:	d10a      	bne.n	8006d76 <_vfiprintf_r+0x156>
 8006d60:	7863      	ldrb	r3, [r4, #1]
 8006d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d64:	d132      	bne.n	8006dcc <_vfiprintf_r+0x1ac>
 8006d66:	9b03      	ldr	r3, [sp, #12]
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	9203      	str	r2, [sp, #12]
 8006d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d72:	3402      	adds	r4, #2
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e4c <_vfiprintf_r+0x22c>
 8006d7a:	7821      	ldrb	r1, [r4, #0]
 8006d7c:	2203      	movs	r2, #3
 8006d7e:	4650      	mov	r0, sl
 8006d80:	f7f9 fa2e 	bl	80001e0 <memchr>
 8006d84:	b138      	cbz	r0, 8006d96 <_vfiprintf_r+0x176>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	eba0 000a 	sub.w	r0, r0, sl
 8006d8c:	2240      	movs	r2, #64	@ 0x40
 8006d8e:	4082      	lsls	r2, r0
 8006d90:	4313      	orrs	r3, r2
 8006d92:	3401      	adds	r4, #1
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d9a:	4829      	ldr	r0, [pc, #164]	@ (8006e40 <_vfiprintf_r+0x220>)
 8006d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006da0:	2206      	movs	r2, #6
 8006da2:	f7f9 fa1d 	bl	80001e0 <memchr>
 8006da6:	2800      	cmp	r0, #0
 8006da8:	d03f      	beq.n	8006e2a <_vfiprintf_r+0x20a>
 8006daa:	4b26      	ldr	r3, [pc, #152]	@ (8006e44 <_vfiprintf_r+0x224>)
 8006dac:	bb1b      	cbnz	r3, 8006df6 <_vfiprintf_r+0x1d6>
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	3307      	adds	r3, #7
 8006db2:	f023 0307 	bic.w	r3, r3, #7
 8006db6:	3308      	adds	r3, #8
 8006db8:	9303      	str	r3, [sp, #12]
 8006dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dbc:	443b      	add	r3, r7
 8006dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dc0:	e76a      	b.n	8006c98 <_vfiprintf_r+0x78>
 8006dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dc6:	460c      	mov	r4, r1
 8006dc8:	2001      	movs	r0, #1
 8006dca:	e7a8      	b.n	8006d1e <_vfiprintf_r+0xfe>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	3401      	adds	r4, #1
 8006dd0:	9305      	str	r3, [sp, #20]
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	f04f 0c0a 	mov.w	ip, #10
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dde:	3a30      	subs	r2, #48	@ 0x30
 8006de0:	2a09      	cmp	r2, #9
 8006de2:	d903      	bls.n	8006dec <_vfiprintf_r+0x1cc>
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d0c6      	beq.n	8006d76 <_vfiprintf_r+0x156>
 8006de8:	9105      	str	r1, [sp, #20]
 8006dea:	e7c4      	b.n	8006d76 <_vfiprintf_r+0x156>
 8006dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8006df0:	4604      	mov	r4, r0
 8006df2:	2301      	movs	r3, #1
 8006df4:	e7f0      	b.n	8006dd8 <_vfiprintf_r+0x1b8>
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	4b12      	ldr	r3, [pc, #72]	@ (8006e48 <_vfiprintf_r+0x228>)
 8006dfe:	a904      	add	r1, sp, #16
 8006e00:	4630      	mov	r0, r6
 8006e02:	f3af 8000 	nop.w
 8006e06:	4607      	mov	r7, r0
 8006e08:	1c78      	adds	r0, r7, #1
 8006e0a:	d1d6      	bne.n	8006dba <_vfiprintf_r+0x19a>
 8006e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e0e:	07d9      	lsls	r1, r3, #31
 8006e10:	d405      	bmi.n	8006e1e <_vfiprintf_r+0x1fe>
 8006e12:	89ab      	ldrh	r3, [r5, #12]
 8006e14:	059a      	lsls	r2, r3, #22
 8006e16:	d402      	bmi.n	8006e1e <_vfiprintf_r+0x1fe>
 8006e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e1a:	f7ff fc5f 	bl	80066dc <__retarget_lock_release_recursive>
 8006e1e:	89ab      	ldrh	r3, [r5, #12]
 8006e20:	065b      	lsls	r3, r3, #25
 8006e22:	f53f af1f 	bmi.w	8006c64 <_vfiprintf_r+0x44>
 8006e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e28:	e71e      	b.n	8006c68 <_vfiprintf_r+0x48>
 8006e2a:	ab03      	add	r3, sp, #12
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	462a      	mov	r2, r5
 8006e30:	4b05      	ldr	r3, [pc, #20]	@ (8006e48 <_vfiprintf_r+0x228>)
 8006e32:	a904      	add	r1, sp, #16
 8006e34:	4630      	mov	r0, r6
 8006e36:	f000 f879 	bl	8006f2c <_printf_i>
 8006e3a:	e7e4      	b.n	8006e06 <_vfiprintf_r+0x1e6>
 8006e3c:	0800796f 	.word	0x0800796f
 8006e40:	08007979 	.word	0x08007979
 8006e44:	00000000 	.word	0x00000000
 8006e48:	08006bfb 	.word	0x08006bfb
 8006e4c:	08007975 	.word	0x08007975

08006e50 <_printf_common>:
 8006e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e54:	4616      	mov	r6, r2
 8006e56:	4698      	mov	r8, r3
 8006e58:	688a      	ldr	r2, [r1, #8]
 8006e5a:	690b      	ldr	r3, [r1, #16]
 8006e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e60:	4293      	cmp	r3, r2
 8006e62:	bfb8      	it	lt
 8006e64:	4613      	movlt	r3, r2
 8006e66:	6033      	str	r3, [r6, #0]
 8006e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e6c:	4607      	mov	r7, r0
 8006e6e:	460c      	mov	r4, r1
 8006e70:	b10a      	cbz	r2, 8006e76 <_printf_common+0x26>
 8006e72:	3301      	adds	r3, #1
 8006e74:	6033      	str	r3, [r6, #0]
 8006e76:	6823      	ldr	r3, [r4, #0]
 8006e78:	0699      	lsls	r1, r3, #26
 8006e7a:	bf42      	ittt	mi
 8006e7c:	6833      	ldrmi	r3, [r6, #0]
 8006e7e:	3302      	addmi	r3, #2
 8006e80:	6033      	strmi	r3, [r6, #0]
 8006e82:	6825      	ldr	r5, [r4, #0]
 8006e84:	f015 0506 	ands.w	r5, r5, #6
 8006e88:	d106      	bne.n	8006e98 <_printf_common+0x48>
 8006e8a:	f104 0a19 	add.w	sl, r4, #25
 8006e8e:	68e3      	ldr	r3, [r4, #12]
 8006e90:	6832      	ldr	r2, [r6, #0]
 8006e92:	1a9b      	subs	r3, r3, r2
 8006e94:	42ab      	cmp	r3, r5
 8006e96:	dc26      	bgt.n	8006ee6 <_printf_common+0x96>
 8006e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e9c:	6822      	ldr	r2, [r4, #0]
 8006e9e:	3b00      	subs	r3, #0
 8006ea0:	bf18      	it	ne
 8006ea2:	2301      	movne	r3, #1
 8006ea4:	0692      	lsls	r2, r2, #26
 8006ea6:	d42b      	bmi.n	8006f00 <_printf_common+0xb0>
 8006ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006eac:	4641      	mov	r1, r8
 8006eae:	4638      	mov	r0, r7
 8006eb0:	47c8      	blx	r9
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d01e      	beq.n	8006ef4 <_printf_common+0xa4>
 8006eb6:	6823      	ldr	r3, [r4, #0]
 8006eb8:	6922      	ldr	r2, [r4, #16]
 8006eba:	f003 0306 	and.w	r3, r3, #6
 8006ebe:	2b04      	cmp	r3, #4
 8006ec0:	bf02      	ittt	eq
 8006ec2:	68e5      	ldreq	r5, [r4, #12]
 8006ec4:	6833      	ldreq	r3, [r6, #0]
 8006ec6:	1aed      	subeq	r5, r5, r3
 8006ec8:	68a3      	ldr	r3, [r4, #8]
 8006eca:	bf0c      	ite	eq
 8006ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed0:	2500      	movne	r5, #0
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	bfc4      	itt	gt
 8006ed6:	1a9b      	subgt	r3, r3, r2
 8006ed8:	18ed      	addgt	r5, r5, r3
 8006eda:	2600      	movs	r6, #0
 8006edc:	341a      	adds	r4, #26
 8006ede:	42b5      	cmp	r5, r6
 8006ee0:	d11a      	bne.n	8006f18 <_printf_common+0xc8>
 8006ee2:	2000      	movs	r0, #0
 8006ee4:	e008      	b.n	8006ef8 <_printf_common+0xa8>
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	4652      	mov	r2, sl
 8006eea:	4641      	mov	r1, r8
 8006eec:	4638      	mov	r0, r7
 8006eee:	47c8      	blx	r9
 8006ef0:	3001      	adds	r0, #1
 8006ef2:	d103      	bne.n	8006efc <_printf_common+0xac>
 8006ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006efc:	3501      	adds	r5, #1
 8006efe:	e7c6      	b.n	8006e8e <_printf_common+0x3e>
 8006f00:	18e1      	adds	r1, r4, r3
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	2030      	movs	r0, #48	@ 0x30
 8006f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f0a:	4422      	add	r2, r4
 8006f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f14:	3302      	adds	r3, #2
 8006f16:	e7c7      	b.n	8006ea8 <_printf_common+0x58>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4622      	mov	r2, r4
 8006f1c:	4641      	mov	r1, r8
 8006f1e:	4638      	mov	r0, r7
 8006f20:	47c8      	blx	r9
 8006f22:	3001      	adds	r0, #1
 8006f24:	d0e6      	beq.n	8006ef4 <_printf_common+0xa4>
 8006f26:	3601      	adds	r6, #1
 8006f28:	e7d9      	b.n	8006ede <_printf_common+0x8e>
	...

08006f2c <_printf_i>:
 8006f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f30:	7e0f      	ldrb	r7, [r1, #24]
 8006f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f34:	2f78      	cmp	r7, #120	@ 0x78
 8006f36:	4691      	mov	r9, r2
 8006f38:	4680      	mov	r8, r0
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	469a      	mov	sl, r3
 8006f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f42:	d807      	bhi.n	8006f54 <_printf_i+0x28>
 8006f44:	2f62      	cmp	r7, #98	@ 0x62
 8006f46:	d80a      	bhi.n	8006f5e <_printf_i+0x32>
 8006f48:	2f00      	cmp	r7, #0
 8006f4a:	f000 80d2 	beq.w	80070f2 <_printf_i+0x1c6>
 8006f4e:	2f58      	cmp	r7, #88	@ 0x58
 8006f50:	f000 80b9 	beq.w	80070c6 <_printf_i+0x19a>
 8006f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f5c:	e03a      	b.n	8006fd4 <_printf_i+0xa8>
 8006f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f62:	2b15      	cmp	r3, #21
 8006f64:	d8f6      	bhi.n	8006f54 <_printf_i+0x28>
 8006f66:	a101      	add	r1, pc, #4	@ (adr r1, 8006f6c <_printf_i+0x40>)
 8006f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f6c:	08006fc5 	.word	0x08006fc5
 8006f70:	08006fd9 	.word	0x08006fd9
 8006f74:	08006f55 	.word	0x08006f55
 8006f78:	08006f55 	.word	0x08006f55
 8006f7c:	08006f55 	.word	0x08006f55
 8006f80:	08006f55 	.word	0x08006f55
 8006f84:	08006fd9 	.word	0x08006fd9
 8006f88:	08006f55 	.word	0x08006f55
 8006f8c:	08006f55 	.word	0x08006f55
 8006f90:	08006f55 	.word	0x08006f55
 8006f94:	08006f55 	.word	0x08006f55
 8006f98:	080070d9 	.word	0x080070d9
 8006f9c:	08007003 	.word	0x08007003
 8006fa0:	08007093 	.word	0x08007093
 8006fa4:	08006f55 	.word	0x08006f55
 8006fa8:	08006f55 	.word	0x08006f55
 8006fac:	080070fb 	.word	0x080070fb
 8006fb0:	08006f55 	.word	0x08006f55
 8006fb4:	08007003 	.word	0x08007003
 8006fb8:	08006f55 	.word	0x08006f55
 8006fbc:	08006f55 	.word	0x08006f55
 8006fc0:	0800709b 	.word	0x0800709b
 8006fc4:	6833      	ldr	r3, [r6, #0]
 8006fc6:	1d1a      	adds	r2, r3, #4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6032      	str	r2, [r6, #0]
 8006fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	e09d      	b.n	8007114 <_printf_i+0x1e8>
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	6820      	ldr	r0, [r4, #0]
 8006fdc:	1d19      	adds	r1, r3, #4
 8006fde:	6031      	str	r1, [r6, #0]
 8006fe0:	0606      	lsls	r6, r0, #24
 8006fe2:	d501      	bpl.n	8006fe8 <_printf_i+0xbc>
 8006fe4:	681d      	ldr	r5, [r3, #0]
 8006fe6:	e003      	b.n	8006ff0 <_printf_i+0xc4>
 8006fe8:	0645      	lsls	r5, r0, #25
 8006fea:	d5fb      	bpl.n	8006fe4 <_printf_i+0xb8>
 8006fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	da03      	bge.n	8006ffc <_printf_i+0xd0>
 8006ff4:	232d      	movs	r3, #45	@ 0x2d
 8006ff6:	426d      	negs	r5, r5
 8006ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ffc:	4859      	ldr	r0, [pc, #356]	@ (8007164 <_printf_i+0x238>)
 8006ffe:	230a      	movs	r3, #10
 8007000:	e011      	b.n	8007026 <_printf_i+0xfa>
 8007002:	6821      	ldr	r1, [r4, #0]
 8007004:	6833      	ldr	r3, [r6, #0]
 8007006:	0608      	lsls	r0, r1, #24
 8007008:	f853 5b04 	ldr.w	r5, [r3], #4
 800700c:	d402      	bmi.n	8007014 <_printf_i+0xe8>
 800700e:	0649      	lsls	r1, r1, #25
 8007010:	bf48      	it	mi
 8007012:	b2ad      	uxthmi	r5, r5
 8007014:	2f6f      	cmp	r7, #111	@ 0x6f
 8007016:	4853      	ldr	r0, [pc, #332]	@ (8007164 <_printf_i+0x238>)
 8007018:	6033      	str	r3, [r6, #0]
 800701a:	bf14      	ite	ne
 800701c:	230a      	movne	r3, #10
 800701e:	2308      	moveq	r3, #8
 8007020:	2100      	movs	r1, #0
 8007022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007026:	6866      	ldr	r6, [r4, #4]
 8007028:	60a6      	str	r6, [r4, #8]
 800702a:	2e00      	cmp	r6, #0
 800702c:	bfa2      	ittt	ge
 800702e:	6821      	ldrge	r1, [r4, #0]
 8007030:	f021 0104 	bicge.w	r1, r1, #4
 8007034:	6021      	strge	r1, [r4, #0]
 8007036:	b90d      	cbnz	r5, 800703c <_printf_i+0x110>
 8007038:	2e00      	cmp	r6, #0
 800703a:	d04b      	beq.n	80070d4 <_printf_i+0x1a8>
 800703c:	4616      	mov	r6, r2
 800703e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007042:	fb03 5711 	mls	r7, r3, r1, r5
 8007046:	5dc7      	ldrb	r7, [r0, r7]
 8007048:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800704c:	462f      	mov	r7, r5
 800704e:	42bb      	cmp	r3, r7
 8007050:	460d      	mov	r5, r1
 8007052:	d9f4      	bls.n	800703e <_printf_i+0x112>
 8007054:	2b08      	cmp	r3, #8
 8007056:	d10b      	bne.n	8007070 <_printf_i+0x144>
 8007058:	6823      	ldr	r3, [r4, #0]
 800705a:	07df      	lsls	r7, r3, #31
 800705c:	d508      	bpl.n	8007070 <_printf_i+0x144>
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	6861      	ldr	r1, [r4, #4]
 8007062:	4299      	cmp	r1, r3
 8007064:	bfde      	ittt	le
 8007066:	2330      	movle	r3, #48	@ 0x30
 8007068:	f806 3c01 	strble.w	r3, [r6, #-1]
 800706c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007070:	1b92      	subs	r2, r2, r6
 8007072:	6122      	str	r2, [r4, #16]
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	464b      	mov	r3, r9
 800707a:	aa03      	add	r2, sp, #12
 800707c:	4621      	mov	r1, r4
 800707e:	4640      	mov	r0, r8
 8007080:	f7ff fee6 	bl	8006e50 <_printf_common>
 8007084:	3001      	adds	r0, #1
 8007086:	d14a      	bne.n	800711e <_printf_i+0x1f2>
 8007088:	f04f 30ff 	mov.w	r0, #4294967295
 800708c:	b004      	add	sp, #16
 800708e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	f043 0320 	orr.w	r3, r3, #32
 8007098:	6023      	str	r3, [r4, #0]
 800709a:	4833      	ldr	r0, [pc, #204]	@ (8007168 <_printf_i+0x23c>)
 800709c:	2778      	movs	r7, #120	@ 0x78
 800709e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	6831      	ldr	r1, [r6, #0]
 80070a6:	061f      	lsls	r7, r3, #24
 80070a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80070ac:	d402      	bmi.n	80070b4 <_printf_i+0x188>
 80070ae:	065f      	lsls	r7, r3, #25
 80070b0:	bf48      	it	mi
 80070b2:	b2ad      	uxthmi	r5, r5
 80070b4:	6031      	str	r1, [r6, #0]
 80070b6:	07d9      	lsls	r1, r3, #31
 80070b8:	bf44      	itt	mi
 80070ba:	f043 0320 	orrmi.w	r3, r3, #32
 80070be:	6023      	strmi	r3, [r4, #0]
 80070c0:	b11d      	cbz	r5, 80070ca <_printf_i+0x19e>
 80070c2:	2310      	movs	r3, #16
 80070c4:	e7ac      	b.n	8007020 <_printf_i+0xf4>
 80070c6:	4827      	ldr	r0, [pc, #156]	@ (8007164 <_printf_i+0x238>)
 80070c8:	e7e9      	b.n	800709e <_printf_i+0x172>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	f023 0320 	bic.w	r3, r3, #32
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	e7f6      	b.n	80070c2 <_printf_i+0x196>
 80070d4:	4616      	mov	r6, r2
 80070d6:	e7bd      	b.n	8007054 <_printf_i+0x128>
 80070d8:	6833      	ldr	r3, [r6, #0]
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	6961      	ldr	r1, [r4, #20]
 80070de:	1d18      	adds	r0, r3, #4
 80070e0:	6030      	str	r0, [r6, #0]
 80070e2:	062e      	lsls	r6, r5, #24
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	d501      	bpl.n	80070ec <_printf_i+0x1c0>
 80070e8:	6019      	str	r1, [r3, #0]
 80070ea:	e002      	b.n	80070f2 <_printf_i+0x1c6>
 80070ec:	0668      	lsls	r0, r5, #25
 80070ee:	d5fb      	bpl.n	80070e8 <_printf_i+0x1bc>
 80070f0:	8019      	strh	r1, [r3, #0]
 80070f2:	2300      	movs	r3, #0
 80070f4:	6123      	str	r3, [r4, #16]
 80070f6:	4616      	mov	r6, r2
 80070f8:	e7bc      	b.n	8007074 <_printf_i+0x148>
 80070fa:	6833      	ldr	r3, [r6, #0]
 80070fc:	1d1a      	adds	r2, r3, #4
 80070fe:	6032      	str	r2, [r6, #0]
 8007100:	681e      	ldr	r6, [r3, #0]
 8007102:	6862      	ldr	r2, [r4, #4]
 8007104:	2100      	movs	r1, #0
 8007106:	4630      	mov	r0, r6
 8007108:	f7f9 f86a 	bl	80001e0 <memchr>
 800710c:	b108      	cbz	r0, 8007112 <_printf_i+0x1e6>
 800710e:	1b80      	subs	r0, r0, r6
 8007110:	6060      	str	r0, [r4, #4]
 8007112:	6863      	ldr	r3, [r4, #4]
 8007114:	6123      	str	r3, [r4, #16]
 8007116:	2300      	movs	r3, #0
 8007118:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800711c:	e7aa      	b.n	8007074 <_printf_i+0x148>
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	4632      	mov	r2, r6
 8007122:	4649      	mov	r1, r9
 8007124:	4640      	mov	r0, r8
 8007126:	47d0      	blx	sl
 8007128:	3001      	adds	r0, #1
 800712a:	d0ad      	beq.n	8007088 <_printf_i+0x15c>
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	079b      	lsls	r3, r3, #30
 8007130:	d413      	bmi.n	800715a <_printf_i+0x22e>
 8007132:	68e0      	ldr	r0, [r4, #12]
 8007134:	9b03      	ldr	r3, [sp, #12]
 8007136:	4298      	cmp	r0, r3
 8007138:	bfb8      	it	lt
 800713a:	4618      	movlt	r0, r3
 800713c:	e7a6      	b.n	800708c <_printf_i+0x160>
 800713e:	2301      	movs	r3, #1
 8007140:	4632      	mov	r2, r6
 8007142:	4649      	mov	r1, r9
 8007144:	4640      	mov	r0, r8
 8007146:	47d0      	blx	sl
 8007148:	3001      	adds	r0, #1
 800714a:	d09d      	beq.n	8007088 <_printf_i+0x15c>
 800714c:	3501      	adds	r5, #1
 800714e:	68e3      	ldr	r3, [r4, #12]
 8007150:	9903      	ldr	r1, [sp, #12]
 8007152:	1a5b      	subs	r3, r3, r1
 8007154:	42ab      	cmp	r3, r5
 8007156:	dcf2      	bgt.n	800713e <_printf_i+0x212>
 8007158:	e7eb      	b.n	8007132 <_printf_i+0x206>
 800715a:	2500      	movs	r5, #0
 800715c:	f104 0619 	add.w	r6, r4, #25
 8007160:	e7f5      	b.n	800714e <_printf_i+0x222>
 8007162:	bf00      	nop
 8007164:	08007980 	.word	0x08007980
 8007168:	08007991 	.word	0x08007991

0800716c <__sflush_r>:
 800716c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007174:	0716      	lsls	r6, r2, #28
 8007176:	4605      	mov	r5, r0
 8007178:	460c      	mov	r4, r1
 800717a:	d454      	bmi.n	8007226 <__sflush_r+0xba>
 800717c:	684b      	ldr	r3, [r1, #4]
 800717e:	2b00      	cmp	r3, #0
 8007180:	dc02      	bgt.n	8007188 <__sflush_r+0x1c>
 8007182:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	dd48      	ble.n	800721a <__sflush_r+0xae>
 8007188:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800718a:	2e00      	cmp	r6, #0
 800718c:	d045      	beq.n	800721a <__sflush_r+0xae>
 800718e:	2300      	movs	r3, #0
 8007190:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007194:	682f      	ldr	r7, [r5, #0]
 8007196:	6a21      	ldr	r1, [r4, #32]
 8007198:	602b      	str	r3, [r5, #0]
 800719a:	d030      	beq.n	80071fe <__sflush_r+0x92>
 800719c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800719e:	89a3      	ldrh	r3, [r4, #12]
 80071a0:	0759      	lsls	r1, r3, #29
 80071a2:	d505      	bpl.n	80071b0 <__sflush_r+0x44>
 80071a4:	6863      	ldr	r3, [r4, #4]
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071aa:	b10b      	cbz	r3, 80071b0 <__sflush_r+0x44>
 80071ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071ae:	1ad2      	subs	r2, r2, r3
 80071b0:	2300      	movs	r3, #0
 80071b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071b4:	6a21      	ldr	r1, [r4, #32]
 80071b6:	4628      	mov	r0, r5
 80071b8:	47b0      	blx	r6
 80071ba:	1c43      	adds	r3, r0, #1
 80071bc:	89a3      	ldrh	r3, [r4, #12]
 80071be:	d106      	bne.n	80071ce <__sflush_r+0x62>
 80071c0:	6829      	ldr	r1, [r5, #0]
 80071c2:	291d      	cmp	r1, #29
 80071c4:	d82b      	bhi.n	800721e <__sflush_r+0xb2>
 80071c6:	4a2a      	ldr	r2, [pc, #168]	@ (8007270 <__sflush_r+0x104>)
 80071c8:	410a      	asrs	r2, r1
 80071ca:	07d6      	lsls	r6, r2, #31
 80071cc:	d427      	bmi.n	800721e <__sflush_r+0xb2>
 80071ce:	2200      	movs	r2, #0
 80071d0:	6062      	str	r2, [r4, #4]
 80071d2:	04d9      	lsls	r1, r3, #19
 80071d4:	6922      	ldr	r2, [r4, #16]
 80071d6:	6022      	str	r2, [r4, #0]
 80071d8:	d504      	bpl.n	80071e4 <__sflush_r+0x78>
 80071da:	1c42      	adds	r2, r0, #1
 80071dc:	d101      	bne.n	80071e2 <__sflush_r+0x76>
 80071de:	682b      	ldr	r3, [r5, #0]
 80071e0:	b903      	cbnz	r3, 80071e4 <__sflush_r+0x78>
 80071e2:	6560      	str	r0, [r4, #84]	@ 0x54
 80071e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071e6:	602f      	str	r7, [r5, #0]
 80071e8:	b1b9      	cbz	r1, 800721a <__sflush_r+0xae>
 80071ea:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80071ee:	4299      	cmp	r1, r3
 80071f0:	d002      	beq.n	80071f8 <__sflush_r+0x8c>
 80071f2:	4628      	mov	r0, r5
 80071f4:	f7ff fa92 	bl	800671c <_free_r>
 80071f8:	2300      	movs	r3, #0
 80071fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80071fc:	e00d      	b.n	800721a <__sflush_r+0xae>
 80071fe:	2301      	movs	r3, #1
 8007200:	4628      	mov	r0, r5
 8007202:	47b0      	blx	r6
 8007204:	4602      	mov	r2, r0
 8007206:	1c50      	adds	r0, r2, #1
 8007208:	d1c9      	bne.n	800719e <__sflush_r+0x32>
 800720a:	682b      	ldr	r3, [r5, #0]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0c6      	beq.n	800719e <__sflush_r+0x32>
 8007210:	2b1d      	cmp	r3, #29
 8007212:	d001      	beq.n	8007218 <__sflush_r+0xac>
 8007214:	2b16      	cmp	r3, #22
 8007216:	d11e      	bne.n	8007256 <__sflush_r+0xea>
 8007218:	602f      	str	r7, [r5, #0]
 800721a:	2000      	movs	r0, #0
 800721c:	e022      	b.n	8007264 <__sflush_r+0xf8>
 800721e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007222:	b21b      	sxth	r3, r3
 8007224:	e01b      	b.n	800725e <__sflush_r+0xf2>
 8007226:	690f      	ldr	r7, [r1, #16]
 8007228:	2f00      	cmp	r7, #0
 800722a:	d0f6      	beq.n	800721a <__sflush_r+0xae>
 800722c:	0793      	lsls	r3, r2, #30
 800722e:	680e      	ldr	r6, [r1, #0]
 8007230:	bf08      	it	eq
 8007232:	694b      	ldreq	r3, [r1, #20]
 8007234:	600f      	str	r7, [r1, #0]
 8007236:	bf18      	it	ne
 8007238:	2300      	movne	r3, #0
 800723a:	eba6 0807 	sub.w	r8, r6, r7
 800723e:	608b      	str	r3, [r1, #8]
 8007240:	f1b8 0f00 	cmp.w	r8, #0
 8007244:	dde9      	ble.n	800721a <__sflush_r+0xae>
 8007246:	6a21      	ldr	r1, [r4, #32]
 8007248:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800724a:	4643      	mov	r3, r8
 800724c:	463a      	mov	r2, r7
 800724e:	4628      	mov	r0, r5
 8007250:	47b0      	blx	r6
 8007252:	2800      	cmp	r0, #0
 8007254:	dc08      	bgt.n	8007268 <__sflush_r+0xfc>
 8007256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800725a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800725e:	81a3      	strh	r3, [r4, #12]
 8007260:	f04f 30ff 	mov.w	r0, #4294967295
 8007264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007268:	4407      	add	r7, r0
 800726a:	eba8 0800 	sub.w	r8, r8, r0
 800726e:	e7e7      	b.n	8007240 <__sflush_r+0xd4>
 8007270:	dfbffffe 	.word	0xdfbffffe

08007274 <_fflush_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	690b      	ldr	r3, [r1, #16]
 8007278:	4605      	mov	r5, r0
 800727a:	460c      	mov	r4, r1
 800727c:	b913      	cbnz	r3, 8007284 <_fflush_r+0x10>
 800727e:	2500      	movs	r5, #0
 8007280:	4628      	mov	r0, r5
 8007282:	bd38      	pop	{r3, r4, r5, pc}
 8007284:	b118      	cbz	r0, 800728e <_fflush_r+0x1a>
 8007286:	6a03      	ldr	r3, [r0, #32]
 8007288:	b90b      	cbnz	r3, 800728e <_fflush_r+0x1a>
 800728a:	f7fe ff3f 	bl	800610c <__sinit>
 800728e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d0f3      	beq.n	800727e <_fflush_r+0xa>
 8007296:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007298:	07d0      	lsls	r0, r2, #31
 800729a:	d404      	bmi.n	80072a6 <_fflush_r+0x32>
 800729c:	0599      	lsls	r1, r3, #22
 800729e:	d402      	bmi.n	80072a6 <_fflush_r+0x32>
 80072a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072a2:	f7ff fa1a 	bl	80066da <__retarget_lock_acquire_recursive>
 80072a6:	4628      	mov	r0, r5
 80072a8:	4621      	mov	r1, r4
 80072aa:	f7ff ff5f 	bl	800716c <__sflush_r>
 80072ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072b0:	07da      	lsls	r2, r3, #31
 80072b2:	4605      	mov	r5, r0
 80072b4:	d4e4      	bmi.n	8007280 <_fflush_r+0xc>
 80072b6:	89a3      	ldrh	r3, [r4, #12]
 80072b8:	059b      	lsls	r3, r3, #22
 80072ba:	d4e1      	bmi.n	8007280 <_fflush_r+0xc>
 80072bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072be:	f7ff fa0d 	bl	80066dc <__retarget_lock_release_recursive>
 80072c2:	e7dd      	b.n	8007280 <_fflush_r+0xc>

080072c4 <fiprintf>:
 80072c4:	b40e      	push	{r1, r2, r3}
 80072c6:	b503      	push	{r0, r1, lr}
 80072c8:	4601      	mov	r1, r0
 80072ca:	ab03      	add	r3, sp, #12
 80072cc:	4805      	ldr	r0, [pc, #20]	@ (80072e4 <fiprintf+0x20>)
 80072ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80072d2:	6800      	ldr	r0, [r0, #0]
 80072d4:	9301      	str	r3, [sp, #4]
 80072d6:	f7ff fca3 	bl	8006c20 <_vfiprintf_r>
 80072da:	b002      	add	sp, #8
 80072dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80072e0:	b003      	add	sp, #12
 80072e2:	4770      	bx	lr
 80072e4:	20000084 	.word	0x20000084

080072e8 <__swhatbuf_r>:
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	460c      	mov	r4, r1
 80072ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072f0:	2900      	cmp	r1, #0
 80072f2:	b096      	sub	sp, #88	@ 0x58
 80072f4:	4615      	mov	r5, r2
 80072f6:	461e      	mov	r6, r3
 80072f8:	da0d      	bge.n	8007316 <__swhatbuf_r+0x2e>
 80072fa:	89a3      	ldrh	r3, [r4, #12]
 80072fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007300:	f04f 0100 	mov.w	r1, #0
 8007304:	bf14      	ite	ne
 8007306:	2340      	movne	r3, #64	@ 0x40
 8007308:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800730c:	2000      	movs	r0, #0
 800730e:	6031      	str	r1, [r6, #0]
 8007310:	602b      	str	r3, [r5, #0]
 8007312:	b016      	add	sp, #88	@ 0x58
 8007314:	bd70      	pop	{r4, r5, r6, pc}
 8007316:	466a      	mov	r2, sp
 8007318:	f000 f862 	bl	80073e0 <_fstat_r>
 800731c:	2800      	cmp	r0, #0
 800731e:	dbec      	blt.n	80072fa <__swhatbuf_r+0x12>
 8007320:	9901      	ldr	r1, [sp, #4]
 8007322:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007326:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800732a:	4259      	negs	r1, r3
 800732c:	4159      	adcs	r1, r3
 800732e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007332:	e7eb      	b.n	800730c <__swhatbuf_r+0x24>

08007334 <__smakebuf_r>:
 8007334:	898b      	ldrh	r3, [r1, #12]
 8007336:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007338:	079d      	lsls	r5, r3, #30
 800733a:	4606      	mov	r6, r0
 800733c:	460c      	mov	r4, r1
 800733e:	d507      	bpl.n	8007350 <__smakebuf_r+0x1c>
 8007340:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	6123      	str	r3, [r4, #16]
 8007348:	2301      	movs	r3, #1
 800734a:	6163      	str	r3, [r4, #20]
 800734c:	b003      	add	sp, #12
 800734e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007350:	ab01      	add	r3, sp, #4
 8007352:	466a      	mov	r2, sp
 8007354:	f7ff ffc8 	bl	80072e8 <__swhatbuf_r>
 8007358:	9f00      	ldr	r7, [sp, #0]
 800735a:	4605      	mov	r5, r0
 800735c:	4639      	mov	r1, r7
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff fa50 	bl	8006804 <_malloc_r>
 8007364:	b948      	cbnz	r0, 800737a <__smakebuf_r+0x46>
 8007366:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800736a:	059a      	lsls	r2, r3, #22
 800736c:	d4ee      	bmi.n	800734c <__smakebuf_r+0x18>
 800736e:	f023 0303 	bic.w	r3, r3, #3
 8007372:	f043 0302 	orr.w	r3, r3, #2
 8007376:	81a3      	strh	r3, [r4, #12]
 8007378:	e7e2      	b.n	8007340 <__smakebuf_r+0xc>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	6020      	str	r0, [r4, #0]
 800737e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007382:	81a3      	strh	r3, [r4, #12]
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800738a:	b15b      	cbz	r3, 80073a4 <__smakebuf_r+0x70>
 800738c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007390:	4630      	mov	r0, r6
 8007392:	f000 f837 	bl	8007404 <_isatty_r>
 8007396:	b128      	cbz	r0, 80073a4 <__smakebuf_r+0x70>
 8007398:	89a3      	ldrh	r3, [r4, #12]
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	f043 0301 	orr.w	r3, r3, #1
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	89a3      	ldrh	r3, [r4, #12]
 80073a6:	431d      	orrs	r5, r3
 80073a8:	81a5      	strh	r5, [r4, #12]
 80073aa:	e7cf      	b.n	800734c <__smakebuf_r+0x18>

080073ac <memmove>:
 80073ac:	4288      	cmp	r0, r1
 80073ae:	b510      	push	{r4, lr}
 80073b0:	eb01 0402 	add.w	r4, r1, r2
 80073b4:	d902      	bls.n	80073bc <memmove+0x10>
 80073b6:	4284      	cmp	r4, r0
 80073b8:	4623      	mov	r3, r4
 80073ba:	d807      	bhi.n	80073cc <memmove+0x20>
 80073bc:	1e43      	subs	r3, r0, #1
 80073be:	42a1      	cmp	r1, r4
 80073c0:	d008      	beq.n	80073d4 <memmove+0x28>
 80073c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ca:	e7f8      	b.n	80073be <memmove+0x12>
 80073cc:	4402      	add	r2, r0
 80073ce:	4601      	mov	r1, r0
 80073d0:	428a      	cmp	r2, r1
 80073d2:	d100      	bne.n	80073d6 <memmove+0x2a>
 80073d4:	bd10      	pop	{r4, pc}
 80073d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073de:	e7f7      	b.n	80073d0 <memmove+0x24>

080073e0 <_fstat_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d07      	ldr	r5, [pc, #28]	@ (8007400 <_fstat_r+0x20>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	602b      	str	r3, [r5, #0]
 80073ee:	f7f9 fdc6 	bl	8000f7e <_fstat>
 80073f2:	1c43      	adds	r3, r0, #1
 80073f4:	d102      	bne.n	80073fc <_fstat_r+0x1c>
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	b103      	cbz	r3, 80073fc <_fstat_r+0x1c>
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	bd38      	pop	{r3, r4, r5, pc}
 80073fe:	bf00      	nop
 8007400:	20000b34 	.word	0x20000b34

08007404 <_isatty_r>:
 8007404:	b538      	push	{r3, r4, r5, lr}
 8007406:	4d06      	ldr	r5, [pc, #24]	@ (8007420 <_isatty_r+0x1c>)
 8007408:	2300      	movs	r3, #0
 800740a:	4604      	mov	r4, r0
 800740c:	4608      	mov	r0, r1
 800740e:	602b      	str	r3, [r5, #0]
 8007410:	f7f9 fdc5 	bl	8000f9e <_isatty>
 8007414:	1c43      	adds	r3, r0, #1
 8007416:	d102      	bne.n	800741e <_isatty_r+0x1a>
 8007418:	682b      	ldr	r3, [r5, #0]
 800741a:	b103      	cbz	r3, 800741e <_isatty_r+0x1a>
 800741c:	6023      	str	r3, [r4, #0]
 800741e:	bd38      	pop	{r3, r4, r5, pc}
 8007420:	20000b34 	.word	0x20000b34

08007424 <_sbrk_r>:
 8007424:	b538      	push	{r3, r4, r5, lr}
 8007426:	4d06      	ldr	r5, [pc, #24]	@ (8007440 <_sbrk_r+0x1c>)
 8007428:	2300      	movs	r3, #0
 800742a:	4604      	mov	r4, r0
 800742c:	4608      	mov	r0, r1
 800742e:	602b      	str	r3, [r5, #0]
 8007430:	f7f9 fdce 	bl	8000fd0 <_sbrk>
 8007434:	1c43      	adds	r3, r0, #1
 8007436:	d102      	bne.n	800743e <_sbrk_r+0x1a>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	b103      	cbz	r3, 800743e <_sbrk_r+0x1a>
 800743c:	6023      	str	r3, [r4, #0]
 800743e:	bd38      	pop	{r3, r4, r5, pc}
 8007440:	20000b34 	.word	0x20000b34

08007444 <memcpy>:
 8007444:	440a      	add	r2, r1
 8007446:	4291      	cmp	r1, r2
 8007448:	f100 33ff 	add.w	r3, r0, #4294967295
 800744c:	d100      	bne.n	8007450 <memcpy+0xc>
 800744e:	4770      	bx	lr
 8007450:	b510      	push	{r4, lr}
 8007452:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800745a:	4291      	cmp	r1, r2
 800745c:	d1f9      	bne.n	8007452 <memcpy+0xe>
 800745e:	bd10      	pop	{r4, pc}

08007460 <abort>:
 8007460:	b508      	push	{r3, lr}
 8007462:	2006      	movs	r0, #6
 8007464:	f000 f85a 	bl	800751c <raise>
 8007468:	2001      	movs	r0, #1
 800746a:	f7f9 fd38 	bl	8000ede <_exit>

0800746e <_realloc_r>:
 800746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007472:	4680      	mov	r8, r0
 8007474:	4615      	mov	r5, r2
 8007476:	460c      	mov	r4, r1
 8007478:	b921      	cbnz	r1, 8007484 <_realloc_r+0x16>
 800747a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800747e:	4611      	mov	r1, r2
 8007480:	f7ff b9c0 	b.w	8006804 <_malloc_r>
 8007484:	b92a      	cbnz	r2, 8007492 <_realloc_r+0x24>
 8007486:	f7ff f949 	bl	800671c <_free_r>
 800748a:	2400      	movs	r4, #0
 800748c:	4620      	mov	r0, r4
 800748e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007492:	f000 f85f 	bl	8007554 <_malloc_usable_size_r>
 8007496:	4285      	cmp	r5, r0
 8007498:	4606      	mov	r6, r0
 800749a:	d802      	bhi.n	80074a2 <_realloc_r+0x34>
 800749c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80074a0:	d8f4      	bhi.n	800748c <_realloc_r+0x1e>
 80074a2:	4629      	mov	r1, r5
 80074a4:	4640      	mov	r0, r8
 80074a6:	f7ff f9ad 	bl	8006804 <_malloc_r>
 80074aa:	4607      	mov	r7, r0
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d0ec      	beq.n	800748a <_realloc_r+0x1c>
 80074b0:	42b5      	cmp	r5, r6
 80074b2:	462a      	mov	r2, r5
 80074b4:	4621      	mov	r1, r4
 80074b6:	bf28      	it	cs
 80074b8:	4632      	movcs	r2, r6
 80074ba:	f7ff ffc3 	bl	8007444 <memcpy>
 80074be:	4621      	mov	r1, r4
 80074c0:	4640      	mov	r0, r8
 80074c2:	f7ff f92b 	bl	800671c <_free_r>
 80074c6:	463c      	mov	r4, r7
 80074c8:	e7e0      	b.n	800748c <_realloc_r+0x1e>

080074ca <_raise_r>:
 80074ca:	291f      	cmp	r1, #31
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	4605      	mov	r5, r0
 80074d0:	460c      	mov	r4, r1
 80074d2:	d904      	bls.n	80074de <_raise_r+0x14>
 80074d4:	2316      	movs	r3, #22
 80074d6:	6003      	str	r3, [r0, #0]
 80074d8:	f04f 30ff 	mov.w	r0, #4294967295
 80074dc:	bd38      	pop	{r3, r4, r5, pc}
 80074de:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80074e0:	b112      	cbz	r2, 80074e8 <_raise_r+0x1e>
 80074e2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074e6:	b94b      	cbnz	r3, 80074fc <_raise_r+0x32>
 80074e8:	4628      	mov	r0, r5
 80074ea:	f000 f831 	bl	8007550 <_getpid_r>
 80074ee:	4622      	mov	r2, r4
 80074f0:	4601      	mov	r1, r0
 80074f2:	4628      	mov	r0, r5
 80074f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074f8:	f000 b818 	b.w	800752c <_kill_r>
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d00a      	beq.n	8007516 <_raise_r+0x4c>
 8007500:	1c59      	adds	r1, r3, #1
 8007502:	d103      	bne.n	800750c <_raise_r+0x42>
 8007504:	2316      	movs	r3, #22
 8007506:	6003      	str	r3, [r0, #0]
 8007508:	2001      	movs	r0, #1
 800750a:	e7e7      	b.n	80074dc <_raise_r+0x12>
 800750c:	2100      	movs	r1, #0
 800750e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007512:	4620      	mov	r0, r4
 8007514:	4798      	blx	r3
 8007516:	2000      	movs	r0, #0
 8007518:	e7e0      	b.n	80074dc <_raise_r+0x12>
	...

0800751c <raise>:
 800751c:	4b02      	ldr	r3, [pc, #8]	@ (8007528 <raise+0xc>)
 800751e:	4601      	mov	r1, r0
 8007520:	6818      	ldr	r0, [r3, #0]
 8007522:	f7ff bfd2 	b.w	80074ca <_raise_r>
 8007526:	bf00      	nop
 8007528:	20000084 	.word	0x20000084

0800752c <_kill_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d07      	ldr	r5, [pc, #28]	@ (800754c <_kill_r+0x20>)
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	4611      	mov	r1, r2
 8007538:	602b      	str	r3, [r5, #0]
 800753a:	f7f9 fcc0 	bl	8000ebe <_kill>
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	d102      	bne.n	8007548 <_kill_r+0x1c>
 8007542:	682b      	ldr	r3, [r5, #0]
 8007544:	b103      	cbz	r3, 8007548 <_kill_r+0x1c>
 8007546:	6023      	str	r3, [r4, #0]
 8007548:	bd38      	pop	{r3, r4, r5, pc}
 800754a:	bf00      	nop
 800754c:	20000b34 	.word	0x20000b34

08007550 <_getpid_r>:
 8007550:	f7f9 bcad 	b.w	8000eae <_getpid>

08007554 <_malloc_usable_size_r>:
 8007554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007558:	1f18      	subs	r0, r3, #4
 800755a:	2b00      	cmp	r3, #0
 800755c:	bfbc      	itt	lt
 800755e:	580b      	ldrlt	r3, [r1, r0]
 8007560:	18c0      	addlt	r0, r0, r3
 8007562:	4770      	bx	lr

08007564 <_init>:
 8007564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007566:	bf00      	nop
 8007568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756a:	bc08      	pop	{r3}
 800756c:	469e      	mov	lr, r3
 800756e:	4770      	bx	lr

08007570 <_fini>:
 8007570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007572:	bf00      	nop
 8007574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007576:	bc08      	pop	{r3}
 8007578:	469e      	mov	lr, r3
 800757a:	4770      	bx	lr
